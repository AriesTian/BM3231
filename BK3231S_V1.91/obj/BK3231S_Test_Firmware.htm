<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\BK3231S_Test_Firmware.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\BK3231S_Test_Firmware.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Thu Sep 14 16:23:07 2017
<BR><P>
<H3>Maximum Stack Usage =       1740 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
LMssp_LMP_Encapsulated_Payload &rArr; _LMssp_Init_DHKey_Calculation &rArr; LMecc_Generate_ECC_Key &rArr; ECC_Point_Multiplication &rArr; ECC_Point_Multiplication_uint8 &rArr; LMecc_CB_ECC_Point_Multiplication_Complete &rArr; LMssp_CallBack_DH_Key_Complete &rArr; _LMssp_Send_LMP_DH_Key_Check &rArr; LMssp_Calculate_DHKEY_Check &rArr; F3 &rArr; HMAC &rArr; SHA_256
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c]">SYS_Vector_Init_Block</a>
 <LI><a href="#[4]">SYSboot_Startup</a>
 <LI><a href="#[b7]">SYSboot_Warm_Startup</a>
 <LI><a href="#[b8]">_SYSboot_Power_Down</a>
 <LI><a href="#[b9]">__user_initial_stackheap</a>
 <LI><a href="#[8]">_Abort_Handler</a>
 <LI><a href="#[7]">_Prefetch_Abort_Handler</a>
 <LI><a href="#[6]">_SWI_Handler</a>
 <LI><a href="#[5]">_Undefined_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[f9]">BTq_Enqueue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">HCeg_Generate_Event</a><BR>
 <LI><a href="#[2c2]">HCeg_Prevent_HCI_Event_Queue_from_Overfill</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">HCeg_Generate_Event</a><BR>
 <LI><a href="#[101]">USLCchac_Procedure_Finish</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[102]">USLCinqScan_Cancel</a><BR>
 <LI><a href="#[109]">LSLCslot_Handle_TIM2</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[109]">LSLCslot_Handle_TIM2</a><BR>
 <LI><a href="#[10b]">LSLCslot_Handle_TIM0</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10b]">LSLCslot_Handle_TIM0</a><BR>
 <LI><a href="#[8]">_Abort_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">_Abort_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ECC_Point_Multiplication_uint8_non_blocking</a> from lmp_ecc.o(i.ECC_Point_Multiplication_uint8_non_blocking) referenced from lmp_ecc.o(i.ECC_Point_Multiplication_uint8)
 <LI><a href="#[5f]">HCIT_UART_Shutdown</a> from driver_uart.o(i.HCIT_UART_Shutdown) referenced from driver_uart.o(i.TRAhcit_Register_UART_Driver)
 <LI><a href="#[26]">HCeg_Generate_Event</a> from hc_event_gen.o(i.HCeg_Generate_Event) referenced from lmp_config.o(i.LMconfig_Initialise)
 <LI><a href="#[12]">LC_Null_Callback</a> from lc_interface.o(i.LC_Null_Callback) referenced from lc_interface.o(i.LC_Reset_All_Callbacks)
 <LI><a href="#[22]">LM_Encode_Msg_Timeout</a> from lmp_encode_pdu.o(i.LM_Encode_Msg_Timeout) referenced from lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
 <LI><a href="#[22]">LM_Encode_Msg_Timeout</a> from lmp_encode_pdu.o(i.LM_Encode_Msg_Timeout) referenced from lmp_ch.o(i.LMconnection_LM_Incoming_Link_Inf)
 <LI><a href="#[a3]">LMafh_LMP_Channel_Classification</a> from lmp_afh.o(i.LMafh_LMP_Channel_Classification) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[15]">LMafh_LMP_Channel_Classification_Ack</a> from lmp_afh.o(i.LMafh_LMP_Channel_Classification_Ack) referenced from lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
 <LI><a href="#[a2]">LMafh_LMP_Channel_Classification_Req</a> from lmp_afh.o(i.LMafh_LMP_Channel_Classification_Req) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[98]">LMafh_LMP_Set_AFH</a> from lmp_afh.o(i.LMafh_LMP_Set_AFH) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[18]">LMafh_LMP_Set_AFH_Ack</a> from lmp_afh.o(i.LMafh_LMP_Set_AFH_Ack) referenced from lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
 <LI><a href="#[24]">LMafh_Report_Slave_Channel_Classification</a> from lmp_afh.o(i.LMafh_Report_Slave_Channel_Classification) referenced from lmp_afh.o(i.LMafh_Start_Classification_Reporting)
 <LI><a href="#[23]">LMafh_Update_Master_AFH_Piconet</a> from lmp_afh.o(i.LMafh_Update_Master_AFH_Piconet) referenced from lmp_afh.o(i.LMafh_Initialise)
 <LI><a href="#[11]">LMch_CB_Enable_L2CAP_Traffic</a> from lmp_ch.o(i.LMch_CB_Enable_L2CAP_Traffic) referenced from hc_event_gen.o(i.HCeg_Generate_Event)
 <LI><a href="#[87]">LMconfig_LMP_Version_Req</a> from lmp_config.o(i.LMconfig_LMP_Version_Req) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[88]">LMconfig_LMP_Version_Res</a> from lmp_config.o(i.LMconfig_LMP_Version_Res) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[25]">LMconfig_LM_Standby_Low_Power_Timeout</a> from lmp_config.o(i.LMconfig_LM_Standby_Low_Power_Timeout) referenced from lmp_config.o(i.LMconfig_Initialise)
 <LI><a href="#[27]">LMconnection_Connection_Timeout</a> from lmp_ch.o(i.LMconnection_Connection_Timeout) referenced from lmp_ch.o(i.LMconnection_Handle_Incoming_LM_Connection_Request)
 <LI><a href="#[33]">LMconnection_Detach_Timeout</a> from lmp_ch.o(i.LMconnection_Detach_Timeout) referenced from lmp_ch.o(i.LMconnection_Send_LMP_Detach)
 <LI><a href="#[2a]">LMconnection_Disconnect_Acl</a> from lmp_ch.o(i.LMconnection_Disconnect_Acl) referenced from lmp_ch.o(i.LMconnection_LMP_Detach)
 <LI><a href="#[2a]">LMconnection_Disconnect_Acl</a> from lmp_ch.o(i.LMconnection_Disconnect_Acl) referenced from lmp_ch.o(i.LMconnection_LMP_Detach_Ack)
 <LI><a href="#[72]">LMconnection_LMP_Detach</a> from lmp_ch.o(i.LMconnection_LMP_Detach) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[16]">LMconnection_LMP_Detach_Ack</a> from lmp_ch.o(i.LMconnection_LMP_Detach_Ack) referenced from lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
 <LI><a href="#[89]">LMconnection_LMP_Features_Req</a> from lmp_ch.o(i.LMconnection_LMP_Features_Req) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[a0]">LMconnection_LMP_Features_Req_Ext</a> from lmp_ch.o(i.LMconnection_LMP_Features_Req_Ext) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[8a]">LMconnection_LMP_Features_Res</a> from lmp_ch.o(i.LMconnection_LMP_Features_Res) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[a1]">LMconnection_LMP_Features_Res_Ext</a> from lmp_ch.o(i.LMconnection_LMP_Features_Res_Ext) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[91]">LMconnection_LMP_Host_Connection_Req</a> from lmp_ch.o(i.LMconnection_LMP_Host_Connection_Req) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[6c]">LMconnection_LMP_Name_Req</a> from lmp_ch.o(i.LMconnection_LMP_Name_Req) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[6d]">LMconnection_LMP_Name_Res</a> from lmp_ch.o(i.LMconnection_LMP_Name_Res) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[21]">LMconnection_LMP_Packet_Type_Table_Req_Accepted_Ack</a> from lmp_ch.o(i.LMconnection_LMP_Packet_Type_Table_Req_Accepted_Ack) referenced from lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
 <LI><a href="#[8f]">LMconnection_LMP_Setup_Complete</a> from lmp_ch.o(i.LMconnection_LMP_Setup_Complete) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[7e]">LMconnection_LMP_Switch_Req</a> from lmp_ch.o(i.LMconnection_LMP_Switch_Req) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[2b]">LMconnection_LMP_Switch_Timeout</a> from lmp_ch.o(i.LMconnection_LMP_Switch_Timeout) referenced from lmp_ch.o(i.LMconnection_LMP_Switch_Req)
 <LI><a href="#[2b]">LMconnection_LMP_Switch_Timeout</a> from lmp_ch.o(i.LMconnection_LMP_Switch_Timeout) referenced from lmp_ch.o(i._Send_LMP_Connection_PDU)
 <LI><a href="#[2c]">LMconnection_LM_Disconnect_Inf</a> from lmp_ch.o(i.LMconnection_LM_Disconnect_Inf) referenced from lmp_ch.o(i.LMconnection_LM_Incoming_Link_Inf)
 <LI><a href="#[2c]">LMconnection_LM_Disconnect_Inf</a> from lmp_ch.o(i.LMconnection_LM_Disconnect_Inf) referenced from lmp_ch.o(i.LMconnection_LM_Page_Complete_NO_ERROR)
 <LI><a href="#[28]">LMconnection_LM_Page_Complete</a> from lmp_ch.o(i.LMconnection_LM_Page_Complete) referenced from lmp_ch.o(i.LMconnection_Initialise)
 <LI><a href="#[2d]">LMconnection_LM_Page_Complete_ERROR</a> from lmp_ch.o(i.LMconnection_LM_Page_Complete_ERROR) referenced from lmp_ch.o(i.LMconnection_LM_Page_Complete)
 <LI><a href="#[2e]">LMconnection_LM_Page_Complete_NO_ERROR</a> from lmp_ch.o(i.LMconnection_LM_Page_Complete_NO_ERROR) referenced from lmp_ch.o(i.LMconnection_LM_Page_Complete)
 <LI><a href="#[30]">LMconnection_LM_Recent_Contact_Timeout</a> from lmp_ch.o(i.LMconnection_LM_Recent_Contact_Timeout) referenced from lmp_ch.o(i.LMconnection_LM_Page_Complete_NO_ERROR)
 <LI><a href="#[30]">LMconnection_LM_Recent_Contact_Timeout</a> from lmp_ch.o(i.LMconnection_LM_Recent_Contact_Timeout) referenced from lmp_ch.o(i.LMconnection_Switch_Complete_Success)
 <LI><a href="#[29]">LMconnection_LM_Switch_Role_Complete</a> from lmp_ch.o(i.LMconnection_LM_Switch_Role_Complete) referenced from lmp_ch.o(i.LMconnection_Initialise)
 <LI><a href="#[31]">LMconnection_Switch_Complete_Failure</a> from lmp_ch.o(i.LMconnection_Switch_Complete_Failure) referenced from lmp_ch.o(i.LMconnection_LM_Switch_Role_Complete)
 <LI><a href="#[32]">LMconnection_Switch_Complete_Success</a> from lmp_ch.o(i.LMconnection_Switch_Complete_Success) referenced from lmp_ch.o(i.LMconnection_LM_Switch_Role_Complete)
 <LI><a href="#[6e]">LMdisp_LMP_Accepted</a> from lmp_cmd_disp.o(i.LMdisp_LMP_Accepted) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[9e]">LMdisp_LMP_Accepted_Ext</a> from lmp_cmd_disp.o(i.LMdisp_LMP_Accepted_Ext) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[5d]">LMdisp_LMP_Ignore_Command</a> from lmp_cmd_disp.o(i.LMdisp_LMP_Ignore_Command) referenced from tc_interface.o(i.TC_Write_Features)
 <LI><a href="#[5d]">LMdisp_LMP_Ignore_Command</a> from lmp_cmd_disp.o(i.LMdisp_LMP_Ignore_Command) referenced from tc_interface.o(i.TC_Write_Local_Extended_Features)
 <LI><a href="#[5d]">LMdisp_LMP_Ignore_Command</a> from lmp_cmd_disp.o(i.LMdisp_LMP_Ignore_Command) referenced from tc_interface.o(i.TC_Write_Local_Features)
 <LI><a href="#[6f]">LMdisp_LMP_Not_Accepted</a> from lmp_cmd_disp.o(i.LMdisp_LMP_Not_Accepted) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[9f]">LMdisp_LMP_Not_Accepted_Ext</a> from lmp_cmd_disp.o(i.LMdisp_LMP_Not_Accepted_Ext) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[5c]">LMdisp_LMP_Unsupported_Command</a> from lmp_cmd_disp.o(i.LMdisp_LMP_Unsupported_Command) referenced 32 times from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[5c]">LMdisp_LMP_Unsupported_Command</a> from lmp_cmd_disp.o(i.LMdisp_LMP_Unsupported_Command) referenced from tc_interface.o(i.TC_Write_Features)
 <LI><a href="#[5c]">LMdisp_LMP_Unsupported_Command</a> from lmp_cmd_disp.o(i.LMdisp_LMP_Unsupported_Command) referenced from tc_interface.o(i.TC_Write_Local_Features)
 <LI><a href="#[34]">LMinq_Inquiry_Complete</a> from lmp_inquiry.o(i.LMinq_Inquiry_Complete) referenced from lmp_inquiry.o(i.LMinq_Initialise)
 <LI><a href="#[36]">LMinq_Inquiry_Complete_Success</a> from lmp_inquiry.o(i.LMinq_Inquiry_Complete_Success) referenced from lmp_inquiry.o(i.LMinq_Inquiry_Complete)
 <LI><a href="#[35]">LMinq_Inquiry_Result</a> from lmp_inquiry.o(i.LMinq_Inquiry_Result) referenced from lmp_inquiry.o(i.LMinq_Initialise)
 <LI><a href="#[37]">LMinq_Inquiry_Result_Handler</a> from lmp_inquiry.o(i.LMinq_Inquiry_Result_Handler) referenced from lmp_inquiry.o(i.LMinq_Inquiry_Result)
 <LI><a href="#[38]">LMinq_Period_Interval_Timeout</a> from lmp_inquiry.o(i.LMinq_Period_Interval_Timeout) referenced from lmp_inquiry.o(i.LMinq_Period_Interval_Timeout)
 <LI><a href="#[38]">LMinq_Period_Interval_Timeout</a> from lmp_inquiry.o(i.LMinq_Period_Interval_Timeout) referenced from lmp_inquiry.o(i.LMinq_Periodic_Inquiry)
 <LI><a href="#[70]">LMlc_LMP_Clock_Offset_Req</a> from lmp_link_control_protocol.o(i.LMlc_LMP_Clock_Offset_Req) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[71]">LMlc_LMP_Clock_Offset_Res</a> from lmp_link_control_protocol.o(i.LMlc_LMP_Clock_Offset_Res) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[92]">LMlc_LMP_Slot_Offset</a> from lmp_link_control_protocol.o(i.LMlc_LMP_Slot_Offset) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[94]">LMlc_LMP_Test_Activate</a> from lmp_link_control_protocol.o(i.LMlc_LMP_Test_Activate) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[95]">LMlc_LMP_Test_Control</a> from lmp_link_control_protocol.o(i.LMlc_LMP_Test_Control) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[5a]">LMlc_LMP_Timing_Accuracy_Req</a> from lmp_link_control_protocol.o(i.LMlc_LMP_Timing_Accuracy_Req) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[5a]">LMlc_LMP_Timing_Accuracy_Req</a> from lmp_link_control_protocol.o(i.LMlc_LMP_Timing_Accuracy_Req) referenced from tc_interface.o(i.TC_Write_Features)
 <LI><a href="#[5a]">LMlc_LMP_Timing_Accuracy_Req</a> from lmp_link_control_protocol.o(i.LMlc_LMP_Timing_Accuracy_Req) referenced from tc_interface.o(i.TC_Write_Local_Features)
 <LI><a href="#[5b]">LMlc_LMP_Timing_Accuracy_Res</a> from lmp_link_control_protocol.o(i.LMlc_LMP_Timing_Accuracy_Res) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[5b]">LMlc_LMP_Timing_Accuracy_Res</a> from lmp_link_control_protocol.o(i.LMlc_LMP_Timing_Accuracy_Res) referenced from tc_interface.o(i.TC_Write_Features)
 <LI><a href="#[5b]">LMlc_LMP_Timing_Accuracy_Res</a> from lmp_link_control_protocol.o(i.LMlc_LMP_Timing_Accuracy_Res) referenced from tc_interface.o(i.TC_Write_Local_Features)
 <LI><a href="#[40]">LMpol_Ack_Last_Tx_Packet</a> from lmp_link_policy.o(i.LMpol_Ack_Last_Tx_Packet) referenced from lmp_link_policy.o(i.LMpol_Initialise)
 <LI><a href="#[3a]">LMpol_Device_Activity</a> from lmp_link_policy.o(i.LMpol_Device_Activity) referenced from lmp_link_policy.o(i.LMpol_Initialise)
 <LI><a href="#[39]">LMpol_Flush_Execute</a> from lmp_link_policy.o(i.LMpol_Flush_Execute) referenced from lmp_link_policy.o(i.LMpol_Ack_Last_Tx_Packet)
 <LI><a href="#[39]">LMpol_Flush_Execute</a> from lmp_link_policy.o(i.LMpol_Flush_Execute) referenced from lmp_link_policy.o(i.LMpol_Get_Next_Slave_Rx_Activity)
 <LI><a href="#[39]">LMpol_Flush_Execute</a> from lmp_link_policy.o(i.LMpol_Flush_Execute) referenced from lmp_link_policy.o(i._LMpol_Get_Link_Tx_Activity)
 <LI><a href="#[ae]">LMpol_Flush_Timeout</a> from lmp_link_policy.o(i.LMpol_Flush_Timeout) referenced from lmp_link_policy.o(fastcall)
 <LI><a href="#[3b]">LMpol_Get_Next_Master_Tx_Activity</a> from lmp_link_policy.o(fastcall) referenced from lmp_link_policy.o(i.LMpol_Initialise)
 <LI><a href="#[3d]">LMpol_Get_Next_SCO_Tx_Activity</a> from lmp_link_policy.o(i.LMpol_Get_Next_SCO_Tx_Activity) referenced from lmp_link_policy.o(i.LMpol_Initialise)
 <LI><a href="#[3f]">LMpol_Get_Next_Slave_Rx_Activity</a> from lmp_link_policy.o(i.LMpol_Get_Next_Slave_Rx_Activity) referenced from lmp_link_policy.o(i.LMpol_Initialise)
 <LI><a href="#[3e]">LMpol_Get_Next_Slave_Tx_Activity</a> from lmp_link_policy.o(i.LMpol_Get_Next_Slave_Tx_Activity) referenced from lmp_link_policy.o(i.LMpol_Initialise)
 <LI><a href="#[3c]">LMpol_Is_SCO_Next_Activity</a> from lmp_link_policy.o(i.LMpol_Is_SCO_Next_Activity) referenced from lmp_link_policy.o(i.LMpol_Initialise)
 <LI><a href="#[47]">LMpolicy_Access_Window_Complete</a> from lmp_link_policy_protocol.o(i.LMpolicy_Access_Window_Complete) referenced from lmp_link_policy_protocol.o(i.LMpolicy_Initialise)
 <LI><a href="#[44]">LMpolicy_Enter_Park_Mode_Complete</a> from lmp_link_policy_protocol.o(i.LMpolicy_Enter_Park_Mode_Complete) referenced from lmp_link_policy_protocol.o(i.LMpolicy_Initialise)
 <LI><a href="#[41]">LMpolicy_Enter_Park_Mode_Complete_Handler</a> from lmp_link_policy_protocol.o(i.LMpolicy_Enter_Park_Mode_Complete_Handler) referenced from lmp_link_policy_protocol.o(i.LMpolicy_Enter_Park_Mode_Complete)
 <LI><a href="#[45]">LMpolicy_Exit_Park_Mode_Complete</a> from lmp_link_policy_protocol.o(i.LMpolicy_Exit_Park_Mode_Complete) referenced from lmp_link_policy_protocol.o(i.LMpolicy_Initialise)
 <LI><a href="#[42]">LMpolicy_Exit_Park_Mode_Complete_Handler</a> from lmp_link_policy_protocol.o(i.LMpolicy_Exit_Park_Mode_Complete_Handler) referenced from lmp_link_policy_protocol.o(i.LMpolicy_Exit_Park_Mode_Complete)
 <LI><a href="#[83]">LMpolicy_LMP_Modify_Beacon</a> from lmp_link_policy_protocol.o(i.LMpolicy_LMP_Modify_Beacon) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[1a]">LMpolicy_LMP_Park_Accepted_Ack</a> from lmp_link_policy_protocol.o(i.LMpolicy_LMP_Park_Accepted_Ack) referenced from lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
 <LI><a href="#[81]">LMpolicy_LMP_Park_Req</a> from lmp_link_policy_protocol.o(i.LMpolicy_LMP_Park_Req) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[82]">LMpolicy_LMP_Set_Broadcast_Scan_Window</a> from lmp_link_policy_protocol.o(i.LMpolicy_LMP_Set_Broadcast_Scan_Window) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[7f]">LMpolicy_LMP_Sniff_Req</a> from lmp_link_policy_protocol.o(i.LMpolicy_LMP_Sniff_Req) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[1c]">LMpolicy_LMP_Sniff_Req_Accepted_Ack</a> from lmp_link_policy_protocol.o(i.LMpolicy_LMP_Sniff_Req_Accepted_Ack) referenced from lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
 <LI><a href="#[4a]">LMpolicy_LMP_Sniff_Req_Accepted_Ack_Handler</a> from lmp_link_policy_protocol.o(i.LMpolicy_LMP_Sniff_Req_Accepted_Ack_Handler) referenced from lmp_link_policy_protocol.o(i.LMpolicy_LMP_Sniff_Req_Accepted_Ack)
 <LI><a href="#[19]">LMpolicy_LMP_Supervision_Timeout_Ack</a> from lmp_link_qos.o(i.LMpolicy_LMP_Supervision_Timeout_Ack) referenced from lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
 <LI><a href="#[84]">LMpolicy_LMP_Unpark_Bd_Addr_Req</a> from lmp_link_policy_protocol.o(i.LMpolicy_LMP_Unpark_Bd_Addr_Req) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[85]">LMpolicy_LMP_Unpark_Pm_Addr_Req</a> from lmp_link_policy_protocol.o(i.LMpolicy_LMP_Unpark_Pm_Addr_Req) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[1b]">LMpolicy_LMP_Unpark_Pmaddr_Accepted_Ack</a> from lmp_link_policy_protocol.o(i.LMpolicy_LMP_Unpark_Pmaddr_Accepted_Ack) referenced from lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
 <LI><a href="#[4b]">LMpolicy_LMP_Unpark_Pmaddr_Accepted_Ack_Hanlder</a> from lmp_link_policy_protocol.o(i.LMpolicy_LMP_Unpark_Pmaddr_Accepted_Ack_Hanlder) referenced from lmp_link_policy_protocol.o(i.LMpolicy_LMP_Unpark_Pmaddr_Accepted_Ack)
 <LI><a href="#[80]">LMpolicy_LMP_Unsniff_Req</a> from lmp_link_policy_protocol.o(i.LMpolicy_LMP_Unsniff_Req) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[1d]">LMpolicy_LMP_Unsniff_Req_Accepted_Ack</a> from lmp_link_policy_protocol.o(i.LMpolicy_LMP_Unsniff_Req_Accepted_Ack) referenced from lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
 <LI><a href="#[4c]">LMpolicy_LMP_Unsniff_Req_Accepted_Ack_Handler</a> from lmp_link_policy_protocol.o(i.LMpolicy_LMP_Unsniff_Req_Accepted_Ack_Handler) referenced from lmp_link_policy_protocol.o(i.LMpolicy_LMP_Unsniff_Req_Accepted_Ack)
 <LI><a href="#[46]">LMpolicy_Slave_Init_Unpark</a> from lmp_link_policy_protocol.o(i.LMpolicy_Slave_Init_Unpark) referenced from lmp_link_policy_protocol.o(i.LMpolicy_Initialise)
 <LI><a href="#[4d]">LMpolicy_Slave_Init_Unpark_Handler</a> from lmp_link_policy_protocol.o(i.LMpolicy_Slave_Init_Unpark_Handler) referenced from lmp_link_policy_protocol.o(i.LMpolicy_Slave_Init_Unpark)
 <LI><a href="#[43]">LMpolicy_Unpark_Timeout</a> from lmp_link_policy_protocol.o(i.LMpolicy_Unpark_Timeout) referenced from lmp_link_policy_protocol.o(i.LMpolicy_Exit_Park_Mode_Complete_Handler)
 <LI><a href="#[63]">LMqos_Channel_Quality_Timeout</a> from lmp_link_qos.o(i.LMqos_Channel_Quality_Timeout) referenced from lmp_ch.o(i._Send_HC_Connection_Complete_Event_ACL)
 <LI><a href="#[59]">LMqos_LMP_Auto_Rate</a> from lmp_link_qos.o(i.LMqos_LMP_Auto_Rate) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[59]">LMqos_LMP_Auto_Rate</a> from lmp_link_qos.o(i.LMqos_LMP_Auto_Rate) referenced from tc_interface.o(i.TC_Write_Features)
 <LI><a href="#[59]">LMqos_LMP_Auto_Rate</a> from lmp_link_qos.o(i.LMqos_LMP_Auto_Rate) referenced from tc_interface.o(i.TC_Write_Local_Extended_Features)
 <LI><a href="#[59]">LMqos_LMP_Auto_Rate</a> from lmp_link_qos.o(i.LMqos_LMP_Auto_Rate) referenced from tc_interface.o(i.TC_Write_Local_Features)
 <LI><a href="#[8d]">LMqos_LMP_Max_Slot</a> from lmp_link_qos.o(i.LMqos_LMP_Max_Slot) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[8e]">LMqos_LMP_Max_Slot_Req</a> from lmp_link_qos.o(i.LMqos_LMP_Max_Slot_Req) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[86]">LMqos_LMP_Preferred_Rate</a> from lmp_link_qos.o(i.LMqos_LMP_Preferred_Rate) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[8b]">LMqos_LMP_Quality_of_Service</a> from lmp_link_qos.o(i.LMqos_LMP_Quality_of_Service) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[8c]">LMqos_LMP_Quality_of_Service_Req</a> from lmp_link_qos.o(i.LMqos_LMP_Quality_of_Service_Req) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[93]">LMqos_LMP_Supervision_Timeout</a> from lmp_link_qos.o(i.LMqos_LMP_Supervision_Timeout) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[50]">LMscan_Inquiry_Scan_Complete</a> from lmp_scan.o(i.LMscan_Inquiry_Scan_Complete) referenced from lmp_scan.o(i.LMscan_Initialise)
 <LI><a href="#[52]">LMscan_Inquiry_Scan_Start</a> from lmp_scan.o(i.LMscan_Inquiry_Scan_Start) referenced from lmp_scan.o(i.LMscan_Initialise)
 <LI><a href="#[4f]">LMscan_Page_Scan_Complete</a> from lmp_scan.o(i.LMscan_Page_Scan_Complete) referenced from lmp_scan.o(i.LMscan_Initialise)
 <LI><a href="#[4e]">LMscan_Page_Scan_Incoming</a> from lmp_scan.o(i.LMscan_Page_Scan_Incoming) referenced from lmp_scan.o(i.LMscan_Initialise)
 <LI><a href="#[51]">LMscan_Page_Scan_Start</a> from lmp_scan.o(i.LMscan_Page_Scan_Start) referenced from lmp_scan.o(i.LMscan_Initialise)
 <LI><a href="#[17]">LMsec_core_Enable_Rx_Encryption</a> from lmp_sec_core.o(i.LMsec_core_Enable_Rx_Encryption) referenced from lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
 <LI><a href="#[2f]">LMsec_core_Encryption_Key_Refresh</a> from lmp_sec_core.o(i.LMsec_core_Encryption_Key_Refresh) referenced from lmp_ch.o(i.LMconnection_LM_Page_Complete_NO_ERROR)
 <LI><a href="#[2f]">LMsec_core_Encryption_Key_Refresh</a> from lmp_sec_core.o(i.LMsec_core_Encryption_Key_Refresh) referenced from lmp_ch.o(i.LMconnection_Switch_Complete_Success)
 <LI><a href="#[53]">LMsec_core_Retry_Auth_Challenge</a> from lmp_sec_core.o(i.LMsec_core_Retry_Auth_Challenge) referenced from lmp_sec_core.o(i.LMsec_core_Auth_Challenge)
 <LI><a href="#[54]">LMsec_core_TimeoutHandler</a> from lmp_sec_core.o(i.LMsec_core_TimeoutHandler) referenced from lmp_sec_core.o(i.LMsec_core_Auth_Complete)
 <LI><a href="#[54]">LMsec_core_TimeoutHandler</a> from lmp_sec_core.o(i.LMsec_core_TimeoutHandler) referenced from lmp_sec_core.o(i.LMsec_core_Init_Authentication)
 <LI><a href="#[54]">LMsec_core_TimeoutHandler</a> from lmp_sec_core.o(i.LMsec_core_TimeoutHandler) referenced from lmp_sec_core.o(i.LMsec_core_Init_Encryption)
 <LI><a href="#[54]">LMsec_core_TimeoutHandler</a> from lmp_sec_core.o(i.LMsec_core_TimeoutHandler) referenced from lmp_sec_peer.o(i.LMsec_peer_LMP_Accepted)
 <LI><a href="#[54]">LMsec_core_TimeoutHandler</a> from lmp_sec_core.o(i.LMsec_core_TimeoutHandler) referenced from lmp_sec_peer.o(i.LMsec_peer_LMP_Comb_Key)
 <LI><a href="#[54]">LMsec_core_TimeoutHandler</a> from lmp_sec_core.o(i.LMsec_core_TimeoutHandler) referenced from lmp_sec_peer.o(i.LMsec_peer_LMP_Encryption_Mode_Req)
 <LI><a href="#[54]">LMsec_core_TimeoutHandler</a> from lmp_sec_core.o(i.LMsec_core_TimeoutHandler) referenced from lmp_sec_peer.o(i.LMsec_peer_LMP_In_Rand)
 <LI><a href="#[54]">LMsec_core_TimeoutHandler</a> from lmp_sec_core.o(i.LMsec_core_TimeoutHandler) referenced from lmp_sec_peer.o(i.LMsec_peer_LMP_Temp_Rand)
 <LI><a href="#[54]">LMsec_core_TimeoutHandler</a> from lmp_sec_core.o(i.LMsec_core_TimeoutHandler) referenced from lmp_sec_peer.o(i.LMsec_peer_LMP_Use_Semi_Permanent_Key)
 <LI><a href="#[54]">LMsec_core_TimeoutHandler</a> from lmp_sec_core.o(i.LMsec_core_TimeoutHandler) referenced from lmp_sec_upper.o(i.LMsec_upper_LM_Authentication_Requested)
 <LI><a href="#[54]">LMsec_core_TimeoutHandler</a> from lmp_sec_core.o(i.LMsec_core_TimeoutHandler) referenced from lmp_sec_upper.o(i.LMsec_upper_LM_Change_Connection_Link_Key)
 <LI><a href="#[54]">LMsec_core_TimeoutHandler</a> from lmp_sec_core.o(i.LMsec_core_TimeoutHandler) referenced from lmp_sec_upper.o(i.LMsec_upper_LM_Master_Link_Key)
 <LI><a href="#[54]">LMsec_core_TimeoutHandler</a> from lmp_sec_core.o(i.LMsec_core_TimeoutHandler) referenced from lmp_sec_upper.o(i.LMsec_upper_LM_Set_Connection_Encryption)
 <LI><a href="#[76]">LMsec_peer_LMP_Au_Rand</a> from lmp_sec_peer.o(i.LMsec_peer_LMP_Au_Rand) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[74]">LMsec_peer_LMP_Comb_Key</a> from lmp_sec_peer.o(i.LMsec_peer_LMP_Comb_Key) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[96]">LMsec_peer_LMP_Encryption_Key_Size_Mask_Req</a> from lmp_sec_peer.o(i.LMsec_peer_LMP_Encryption_Key_Size_Mask_Req) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[97]">LMsec_peer_LMP_Encryption_Key_Size_Mask_Res</a> from lmp_sec_peer.o(i.LMsec_peer_LMP_Encryption_Key_Size_Mask_Res) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[7b]">LMsec_peer_LMP_Encryption_Key_Size_Req</a> from lmp_sec_peer.o(i.LMsec_peer_LMP_Encryption_Key_Size_Req) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[7a]">LMsec_peer_LMP_Encryption_Mode_Req</a> from lmp_sec_peer.o(i.LMsec_peer_LMP_Encryption_Mode_Req) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[73]">LMsec_peer_LMP_In_Rand</a> from lmp_sec_peer.o(i.LMsec_peer_LMP_In_Rand) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[a4]">LMsec_peer_LMP_Pause_Encryption_Req</a> from lmp_sec_peer.o(i.LMsec_peer_LMP_Pause_Encryption_Req) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[a5]">LMsec_peer_LMP_Resume_Encryption_Req</a> from lmp_sec_peer.o(i.LMsec_peer_LMP_Resume_Encryption_Req) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[77]">LMsec_peer_LMP_Sres</a> from lmp_sec_peer.o(i.LMsec_peer_LMP_Sres) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[7c]">LMsec_peer_LMP_Start_Encryption_Req</a> from lmp_sec_peer.o(i.LMsec_peer_LMP_Start_Encryption_Req) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[20]">LMsec_peer_LMP_Start_Encryption_Req_Accepted_Ack</a> from lmp_sec_peer.o(i.LMsec_peer_LMP_Start_Encryption_Req_Accepted_Ack) referenced from lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
 <LI><a href="#[7d]">LMsec_peer_LMP_Stop_Encryption_Req</a> from lmp_sec_peer.o(i.LMsec_peer_LMP_Stop_Encryption_Req) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[1f]">LMsec_peer_LMP_Stop_Encryption_Req_Accepted_Ack</a> from lmp_sec_peer.o(i.LMsec_peer_LMP_Stop_Encryption_Req_Accepted_Ack) referenced from lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
 <LI><a href="#[79]">LMsec_peer_LMP_Temp_Key</a> from lmp_sec_peer.o(i.LMsec_peer_LMP_Temp_Key) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[78]">LMsec_peer_LMP_Temp_Rand</a> from lmp_sec_peer.o(i.LMsec_peer_LMP_Temp_Rand) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[75]">LMsec_peer_LMP_Unit_Key</a> from lmp_sec_peer.o(i.LMsec_peer_LMP_Unit_Key) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[90]">LMsec_peer_LMP_Use_Semi_Permanent_Key</a> from lmp_sec_peer.o(i.LMsec_peer_LMP_Use_Semi_Permanent_Key) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[56]">LMsec_upper_LM_Link_Key_Request_Timeout</a> from lmp_sec_upper.o(i.LMsec_upper_LM_Link_Key_Request_Timeout) referenced from lmp_sec_upper.o(i.LMsec_upper_Send_HCI_Event)
 <LI><a href="#[57]">LMsec_upper_LM_Pin_Code_Request_Timeout</a> from lmp_sec_upper.o(i.LMsec_upper_LM_Pin_Code_Request_Timeout) referenced from lmp_sec_upper.o(i.LMsec_upper_Send_HCI_Event)
 <LI><a href="#[a6]">LMspp_LMP_IO_Capability_Request</a> from lmp_ssp.o(i.LMspp_LMP_IO_Capability_Request) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[a7]">LMspp_LMP_IO_Capability_Response</a> from lmp_ssp.o(i.LMspp_LMP_IO_Capability_Response) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[55]">LMssp_HCI_Timeout</a> from lmp_ssp.o(i.LMssp_HCI_Timeout) referenced from lmp_sec_upper.o(i.LMsec_upper_LM_Link_Key_Request_Negative_Reply)
 <LI><a href="#[55]">LMssp_HCI_Timeout</a> from lmp_ssp.o(i.LMssp_HCI_Timeout) referenced from lmp_ssp.o(i.LMspp_LMP_IO_Capability_Request)
 <LI><a href="#[55]">LMssp_HCI_Timeout</a> from lmp_ssp.o(i.LMssp_HCI_Timeout) referenced from lmp_ssp.o(i.LMssp_LMP_Accepted)
 <LI><a href="#[55]">LMssp_HCI_Timeout</a> from lmp_ssp.o(i.LMssp_HCI_Timeout) referenced from lmp_ssp.o(i.LMssp_LMP_Encapsulated_Payload)
 <LI><a href="#[55]">LMssp_HCI_Timeout</a> from lmp_ssp.o(i.LMssp_HCI_Timeout) referenced from lmp_ssp.o(i.LMssp_LMP_Simple_Pairing_Number)
 <LI><a href="#[9d]">LMssp_LMP_DHkey_Check</a> from lmp_ssp.o(i.LMssp_LMP_DHkey_Check) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[99]">LMssp_LMP_Encapsulated_Header</a> from lmp_ssp.o(i.LMssp_LMP_Encapsulated_Header) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[9a]">LMssp_LMP_Encapsulated_Payload</a> from lmp_ssp.o(i.LMssp_LMP_Encapsulated_Payload) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[ab]">LMssp_LMP_Keypress_Notification</a> from lmp_ssp.o(i.LMssp_LMP_Keypress_Notification) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[a8]">LMssp_LMP_Numeric_Comparison_Failure</a> from lmp_ssp.o(i.LMssp_LMP_Numeric_Comparison_Failure) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[aa]">LMssp_LMP_OOB_Failed</a> from lmp_ssp.o(i.LMssp_LMP_OOB_Failed) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[a9]">LMssp_LMP_Passkey_Entry_Failed</a> from lmp_ssp.o(i.LMssp_LMP_Passkey_Entry_Failed) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[9b]">LMssp_LMP_Simple_Pairing_Confirm</a> from lmp_ssp.o(i.LMssp_LMP_Simple_Pairing_Confirm) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[9c]">LMssp_LMP_Simple_Pairing_Number</a> from lmp_ssp.o(i.LMssp_LMP_Simple_Pairing_Number) referenced from lmp_cmd_disp.o(.constdata)
 <LI><a href="#[c]">SYS_Vector_Init_Block</a> from sys_boot.o(SYS_Boot) referenced from sys_boot.o(SYS_Boot)
 <LI><a href="#[4]">SYSboot_Startup</a> from sys_boot.o(SYS_Boot) referenced from sys_boot.o(SYS_Boot)
 <LI><a href="#[a]">SYSirq_FIQ_Handler</a> from sys_irq.o(fastcall) referenced from sys_boot.o(SYS_Boot)
 <LI><a href="#[9]">SYSirq_IRQ_Handler</a> from sys_irq.o(i.SYSirq_IRQ_Handler) referenced from sys_boot.o(SYS_Boot)
 <LI><a href="#[58]">TRAhcit_Register_UART_Driver</a> from driver_uart.o(i.TRAhcit_Register_UART_Driver) referenced from main.o(i.SYS_Initialise)
 <LI><a href="#[b4]">TRAhcit_UART_Initialise</a> from tra_uart.o(i.TRAhcit_UART_Initialise) referenced from tra_hcit.o(.data)
 <LI><a href="#[b5]">TRAhcit_UART_Shutdown</a> from tra_uart.o(i.TRAhcit_UART_Shutdown) referenced from tra_hcit.o(.data)
 <LI><a href="#[61]">TRAhcit_UART_Tx_PDU</a> from tra_uart.o(i.TRAhcit_UART_Tx_PDU) referenced from tra_uart.o(i.TRAhcit_UART_Tx_PDU)
 <LI><a href="#[5e]">UART_Interrupt_Handler</a> from driver_uart.o(i.UART_Interrupt_Handler) referenced from driver_uart.o(i.TRAhcit_Register_UART_Driver)
 <LI><a href="#[62]">USLCchac_InqScan_Rand_Wait</a> from uslc_chan_ctrl.o(i.USLCchac_InqScan_Rand_Wait) referenced from uslc_chan_ctrl.o(i.USLCchac_Initialise)
 <LI><a href="#[ad]">USLCr2p_State_OS_RECONNECTING_</a> from uslc_return_to_piconet.o(fastcall) referenced from uslc_return_to_piconet.o(.constdata)
 <LI><a href="#[ac]">USLCr2p_State_OS_START_</a> from uslc_return_to_piconet.o(i.USLCr2p_State_OS_START_) referenced from uslc_return_to_piconet.o(.constdata)
 <LI><a href="#[1e]">USLCtm_Testmode_Change_Settings</a> from uslc_testmode.o(i.USLCtm_Testmode_Change_Settings) referenced from lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
 <LI><a href="#[8]">_Abort_Handler</a> from sys_boot.o(SYS_Boot) referenced from sys_boot.o(SYS_Boot)
 <LI><a href="#[64]">_BTtst_HCI_Callback_On_Data_Remote_Loopback</a> from bt_test.o(i._BTtst_HCI_Callback_On_Data_Remote_Loopback) referenced from bt_test.o(.constdata)
 <LI><a href="#[68]">_Dispatch_HC_BB_Command</a> from hc_cmd_disp.o(i._Dispatch_HC_BB_Command) referenced from hc_cmd_disp.o(.constdata)
 <LI><a href="#[69]">_Dispatch_Info_Command</a> from hc_cmd_disp.o(i._Dispatch_Info_Command) referenced from hc_cmd_disp.o(.constdata)
 <LI><a href="#[65]">_Dispatch_Invalid_OGF_Command</a> from hc_cmd_disp.o(i._Dispatch_Invalid_OGF_Command) referenced from hc_cmd_disp.o(.constdata)
 <LI><a href="#[66]">_Dispatch_Link_Control_Command</a> from hc_cmd_disp.o(i._Dispatch_Link_Control_Command) referenced from hc_cmd_disp.o(.constdata)
 <LI><a href="#[67]">_Dispatch_Link_Policy_Command</a> from hc_cmd_disp.o(i._Dispatch_Link_Policy_Command) referenced from hc_cmd_disp.o(.constdata)
 <LI><a href="#[6a]">_Dispatch_Local_Status_Command</a> from hc_cmd_disp.o(i._Dispatch_Local_Status_Command) referenced from hc_cmd_disp.o(.constdata)
 <LI><a href="#[6b]">_Dispatch_Test_Command</a> from hc_cmd_disp.o(i._Dispatch_Test_Command) referenced from hc_cmd_disp.o(.constdata)
 <LI><a href="#[14]">_LM_Encode_Extended_PDU</a> from lmp_encode_pdu.o(i._LM_Encode_Extended_PDU) referenced from lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
 <LI><a href="#[13]">_LM_Encode_Normal_PDU</a> from lmp_encode_pdu.o(i._LM_Encode_Normal_PDU) referenced from lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
 <LI><a href="#[48]">_LMpolicy_Enter_Park_Mode</a> from lmp_link_policy_protocol.o(i._LMpolicy_Enter_Park_Mode) referenced from lmp_link_policy_protocol.o(i.LMpolicy_LMP_Accepted)
 <LI><a href="#[48]">_LMpolicy_Enter_Park_Mode</a> from lmp_link_policy_protocol.o(i._LMpolicy_Enter_Park_Mode) referenced from lmp_link_policy_protocol.o(i.LMpolicy_LMP_Park_Accepted_Ack)
 <LI><a href="#[49]">_LMpolicy_LMP_Park_Accepted_Ack_Timeout</a> from lmp_link_policy_protocol.o(i._LMpolicy_LMP_Park_Accepted_Ack_Timeout) referenced from lmp_link_policy_protocol.o(i.LMpolicy_LMP_Park_Req)
 <LI><a href="#[b3]">_LSLChop_Execute_HSE_Connection_23</a> from lslc_hop.o(i._LSLChop_Execute_HSE_Connection_23) referenced from lslc_hop.o(fastcall)
 <LI><a href="#[af]">_LSLChop_Execute_HSE_Connection_79</a> from lslc_hop.o(i._LSLChop_Execute_HSE_Connection_79) referenced from lslc_hop.o(fastcall)
 <LI><a href="#[b2]">_LSLChop_Execute_HSE_Connection_Hardware</a> from lslc_hop.o(i._LSLChop_Execute_HSE_Connection_Hardware) referenced from lslc_hop.o(fastcall)
 <LI><a href="#[b1]">_LSLChop_Execute_HSE_Reduced</a> from lslc_hop.o(i._LSLChop_Execute_HSE_Reduced) referenced from lslc_hop.o(fastcall)
 <LI><a href="#[b0]">_LSLChop_Execute_HSE_Single_Connection</a> from lslc_hop.o(i._LSLChop_Execute_HSE_Single_Connection) referenced from lslc_hop.o(fastcall)
 <LI><a href="#[7]">_Prefetch_Abort_Handler</a> from sys_boot.o(SYS_Boot) referenced from sys_boot.o(SYS_Boot)
 <LI><a href="#[6]">_SWI_Handler</a> from sys_boot.o(SYS_Boot) referenced from sys_boot.o(SYS_Boot)
 <LI><a href="#[5]">_Undefined_Handler</a> from sys_boot.o(SYS_Boot) referenced from sys_boot.o(SYS_Boot)
 <LI><a href="#[f]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[e]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[d]">_snputc</a> from _snputc.o(.text) referenced from c89vsnprintf.o(.text)
 <LI><a href="#[b]">main</a> from main.o(fastcall) referenced from __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[b]">main</a> from main.o(fastcall) referenced from sys_boot.o(SYS_Boot)
 <LI><a href="#[60]">uart_buff_send</a> from driver_uart.o(i.uart_buff_send) referenced from driver_uart.o(i.TRAhcit_Register_UART_Driver)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c]"></a>SYS_Vector_Init_Block</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_boot.o(SYS_Boot))
<BR>[Address Reference Count : 1]<UL><LI> sys_boot.o(SYS_Boot)
</UL>
<P><STRONG><a name="[4]"></a>SYSboot_Startup</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_boot.o(SYS_Boot))
<BR>[Address Reference Count : 1]<UL><LI> sys_boot.o(SYS_Boot)
</UL>
<P><STRONG><a name="[b7]"></a>SYSboot_Warm_Startup</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_boot.o(SYS_Boot), UNUSED, KEPT)

<P><STRONG><a name="[b8]"></a>_SYSboot_Power_Down</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_boot.o(SYS_Boot), UNUSED, KEPT)

<P><STRONG><a name="[b9]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_boot.o(SYS_Boot))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b6]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[197]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[199]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[57c]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[19a]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[57d]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[19b]"></a>_printf_n</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount (via Veneer)
</UL>

<P><STRONG><a name="[1e4]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via BLX)
</UL>

<P><STRONG><a name="[19d]"></a>_printf_p</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr (via Veneer)
</UL>

<P><STRONG><a name="[19f]"></a>_printf_f</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1a1]"></a>_printf_e</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1a2]"></a>_printf_g</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1a3]"></a>_printf_a</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex (Weak Reference)
</UL>

<P><STRONG><a name="[57e]"></a>_printf_ll</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[1a5]"></a>_printf_i</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[1a7]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[1a8]"></a>_printf_u</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[1a9]"></a>_printf_o</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct (via Veneer)
</UL>

<P><STRONG><a name="[1ab]"></a>_printf_x</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex (via Veneer)
</UL>

<P><STRONG><a name="[1ad]"></a>_printf_lli</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[1af]"></a>_printf_lld</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[1b0]"></a>_printf_llu</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[1b1]"></a>_printf_llo</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct (via Veneer)
</UL>

<P><STRONG><a name="[1b3]"></a>_printf_llx</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex (via Veneer)
</UL>

<P><STRONG><a name="[57f]"></a>_printf_l</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[1b5]"></a>_printf_c</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char (via Veneer)
</UL>

<P><STRONG><a name="[1b7]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string (via Veneer)
</UL>

<P><STRONG><a name="[1b9]"></a>_printf_lc</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar (via Veneer)
</UL>

<P><STRONG><a name="[1bb]"></a>_printf_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring (via Veneer)
</UL>

<P><STRONG><a name="[580]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[1c5]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via BLX)
</UL>

<P><STRONG><a name="[581]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[582]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1bd]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via BLX)
</UL>

<P><STRONG><a name="[583]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[584]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[585]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[586]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1bf]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype (via BLX)
</UL>

<P><STRONG><a name="[587]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[588]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1c0]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric (via BLX)
</UL>

<P><STRONG><a name="[589]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[58a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[58b]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[58c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[58d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[58e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[58f]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[590]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[591]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[592]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[593]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[594]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[595]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1c9]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via BLX)
</UL>

<P><STRONG><a name="[596]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[597]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[598]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[599]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[59a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[59b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[198]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[59c]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1c2]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1c4]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[59d]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[1c6]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[59e]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1f5]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BLX)
</UL>

<P><STRONG><a name="[1c8]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via BLX)
</UL>

<P><STRONG><a name="[59f]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[1ca]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via BLX)
</UL>

<P><STRONG><a name="[1cc]"></a>__c89vsnprintf</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, c89vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bprintf
</UL>

<P><STRONG><a name="[db]"></a>memcmp</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCommandData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATCommand
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Loop
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Extended_Inquiry_Response_Command (via BLX)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Send (via BLX)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Send (via BLX)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_WriteLocalName (via BLX)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_SwitchRole (via BLX)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_PinCodeReply (via BLX)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Connect (via BLX)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Connect (via BLX)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCommandData (via BLX)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATCommand (via BLX)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_data (via BLX)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_data (via BLX)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Loop (via BLX)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env_config (via BLX)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_lmecc_pointq (via BLX)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lmecc_pointq (via BLX)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUih (via BLX)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameDisc (via BLX)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_DisconnectionRsp (via BLX)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Handler (via BLX)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events (via BLX)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_UserConfirmationReply (via BLX)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_IoCapabilityReply (via BLX)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_AcceptConnection (via BLX)
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Read_Scan_Activity (via BLX)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Set_Local_EIR (via BLX)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceSearchAttributeReq (via BLX)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceAttributeReq (via BLX)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Write_Bd_Addr (via BLX)
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Set_Bd_Addr (via BLX)
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Extended_Features (via BLX)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TC_Control_Testmode_Standalone (via BLX)
</UL>

<P><STRONG><a name="[1cf]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[5a0]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCommandData (via BLX)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher (via BLX)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command (via BLX)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyBigHex (via BLX)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexModP (via BLX)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[5a1]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[5a2]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[5a3]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Host_Initialise (via BLX)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Packets (via BLX)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events (via BLX)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Set_Local_EIR (via BLX)
</UL>

<P><STRONG><a name="[1d1]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[5a4]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLinkNum (via BLX)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBtLinkInfo (via BLX)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBtLinkInfo (via BLX)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_PinCodeReply (via BLX)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCommandData (via BLX)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATCommand (via BLX)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readLinkNum (via BLX)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Loop (via BLX)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBigNumber (via BLX)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexModP (via BLX)
</UL>

<P><STRONG><a name="[5a5]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[5a6]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_uread4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_UihHeader (via BLX)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Send (via BLX)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Send (via BLX)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event (via BLX)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_GetService (via BLX)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Host_Initialise (via BLX)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Loop (via BLX)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdpdb_Get_Database (via BLX)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUih (via BLX)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUa (via BLX)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameSabm (via BLX)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameDm (via BLX)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameDisc (via BLX)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_MsgHeader (via BLX)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_CtlHeader (via BLX)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Util_GetService (via BLX)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Util_GetContext (via BLX)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Service (via BLX)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Context_From_Hci (via BLX)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_DisconnectionReq (via BLX)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Handler (via BLX)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Util_Handshake (via BLX)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Util_GetService (via BLX)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events (via BLX)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_UART_Shutdown (via BLX)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher (via BLX)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_UART_Tx_PDU (via BLX)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceSearchReq (via BLX)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceSearchAttributeReq (via BLX)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceAttributeReq (via BLX)
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Restore_BT_Clock (via BLX)
</UL>

<P><STRONG><a name="[5a7]"></a>__rt_uread4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>__aeabi_uwrite4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdpdb_Doreg (via BLX)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_ConnectionReq (via BLX)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Reset (via BLX)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Host_Initialise (via BLX)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Loop (via BLX)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUih (via BLX)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Packets (via BLX)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Handler (via BLX)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Reset (via BLX)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Cancel (via BLX)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher (via BLX)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Request (via BLX)
</UL>

<P><STRONG><a name="[5a8]"></a>__rt_uwrite4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[5a9]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>__aeabi_idivmod</STRONG> (ARM, 380 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Channel_Quality_Timeout (via BLX)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Derive_Park_Parameters (via BLX)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via BLX)
</UL>

<P><STRONG><a name="[1d3]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via BLX)
</UL>

<P><STRONG><a name="[1d5]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt (via Veneer)
</UL>

<P><STRONG><a name="[1d7]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[1d8]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[1d9]"></a>_printf_truncate_signed</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1da]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1d6]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[1a6]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via BLX)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u (via Veneer)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d (via Veneer)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i (via Veneer)
</UL>

<P><STRONG><a name="[19c]"></a>_printf_charcount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n (via Veneer)
</UL>

<P><STRONG><a name="[1cd]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[1ce]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[d]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> c89vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[1de]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[1ae]"></a>_printf_longlong_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu (via Veneer)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld (via Veneer)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli (via Veneer)
</UL>

<P><STRONG><a name="[1e1]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[1aa]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o (via Veneer)
</UL>

<P><STRONG><a name="[1b2]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo (via Veneer)
</UL>

<P><STRONG><a name="[1e2]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[1ac]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x (via Veneer)
</UL>

<P><STRONG><a name="[1b4]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx (via Veneer)
</UL>

<P><STRONG><a name="[19e]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p (via Veneer)
</UL>

<P><STRONG><a name="[1dd]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via BLX)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1d4]"></a>__aeabi_errno_addr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via BLX)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno (via BLX)
</UL>

<P><STRONG><a name="[5aa]"></a>__errno$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[5ab]"></a>__rt_errno_addr$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>_ll_udiv10</STRONG> (ARM, 152 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via BLX)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via BLX)
</UL>

<P><STRONG><a name="[1dc]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[5ac]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify (via BLX)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via BLX)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via BLX)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec (via Veneer)
</UL>

<P><STRONG><a name="[1ed]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[1b6]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c (via Veneer)
</UL>

<P><STRONG><a name="[1b8]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s (via Veneer)
</UL>

<P><STRONG><a name="[1ef]"></a>_printf_lcs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[1ba]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc (via Veneer)
</UL>

<P><STRONG><a name="[1bc]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls (via Veneer)
</UL>

<P><STRONG><a name="[1df]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[1db]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via BLX)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via BLX)
</UL>

<P><STRONG><a name="[5ad]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[5ae]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1f1]"></a>__rt_ctype_table</STRONG> (ARM, 20 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb (via BLX)
</UL>

<P><STRONG><a name="[1be]"></a>__rt_locale</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common (via BLX)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via BLX)
</UL>

<P><STRONG><a name="[1ec]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1e6]"></a>_btod_etento</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via BLX)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via BLX)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1c7]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via BLX)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[573]"></a>strcmp</STRONG> (ARM, 240 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1cb]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via BLX)
</UL>

<P><STRONG><a name="[5af]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[5b0]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[5b1]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[135]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Initial (via BLX)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Start (via BLX)
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmod_calibration (via BLX)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Calibrate_ (via BLX)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher (via BLX)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Piconet_Clock_Ex (via BLX)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prepare_Command_Complete_Event_Read_Clock_Payload (via BLX)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Timing_Equation_Satisfied (via BLX)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Timer_On_Timing_Equation (via BLX)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Piconet_Reset_Delta_Slots (via BLX)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Get_PER (via BLX)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Get_BER (via BLX)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Simple_Pairing_Number (via BLX)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Encapsulated_Payload (via BLX)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Accepted (via BLX)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Quality_of_Service_Req (via BLX)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Quality_of_Service (via BLX)
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Master_Derive_D_Sniff (via BLX)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Exit_Park_Mode_Complete_Handler (via BLX)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_Get_Search_Window_Frames (via BLX)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Beacon_Tx (via BLX)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Get_Interval_Rand (via BLX)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Result_Handler (via BLX)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_prepareTx (via BLX)
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Update_Master_AFH_Piconet (via BLX)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLChop_Execute_HSE_Reduced (via BLX)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLChop_Execute_HSE_Connection_79 (via BLX)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLChop_Execute_HSE_Connection_23 (via BLX)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Get_Next_Frequency (via BLX)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_Get_Frequency_Channel (via BLX)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Keyed_Hash (via BLX)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Update_Link_Flow_Spec (via BLX)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Get_Communication_Interval (via BLX)
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Check_Link_QoS (via BLX)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Check_Link_Flow_Specification (via BLX)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Update_Link_QoS (via BLX)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Emergency_Poll_Interval (via BLX)
</UL>

<P><STRONG><a name="[5b2]"></a>__semihosting_library_function</STRONG> (ARM, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>_btod_d2e</STRONG> (ARM, 56 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via BLX)
</UL>

<P><STRONG><a name="[1fb]"></a>_d2e_denorm_low</STRONG> (ARM, 84 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[1fa]"></a>_d2e_norm_op1</STRONG> (ARM, 104 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[1fc]"></a>__btod_div_common</STRONG> (ARM, 712 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1fd]"></a>_e2e</STRONG> (ARM, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1e8]"></a>_btod_ediv</STRONG> (ARM, 48 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via BLX)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via BLX)
</UL>

<P><STRONG><a name="[1e9]"></a>_btod_emul</STRONG> (ARM, 48 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via BLX)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via BLX)
</UL>

<P><STRONG><a name="[1fe]"></a>__btod_mult_common</STRONG> (ARM, 612 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[4a8]"></a>ARM_Enter_Light_mode</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sys_irq.o(i.ARM_Enter_Light_mode))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Sleep_System (via BLX)
</UL>

<P><STRONG><a name="[1ff]"></a>Add2SelfBigHex</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lmp_ecc.o(i.Add2SelfBigHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Add2SelfBigHex
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBigNumberLength
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHexSign
</UL>

<P><STRONG><a name="[201]"></a>AddBigHex</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lmp_ecc.o(i.AddBigHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AddBigHex
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBigNumberLength
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHexMod
</UL>

<P><STRONG><a name="[202]"></a>AddP</STRONG> (Thumb, 32 bytes, Stack size 48 bytes, lmp_ecc.o(i.AddP))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddP &rArr; SubtractBigHex
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyBigHex
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHex
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHexMod
</UL>

<P><STRONG><a name="[205]"></a>AddPdiv2</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, lmp_ecc.o(i.AddPdiv2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AddPdiv2 &rArr; SubtractBigHex
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBigNumberLength
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGreaterThan
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyBigHex
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHex
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigHexInversion
</UL>

<P><STRONG><a name="[f2]"></a>BT_Initialise</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, bt_init.o(i.BT_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = BT_Initialise &rArr; LC_Initialise &rArr; DL_Initialise_All &rArr; DL_Initialise_Link &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Initialise
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Reset
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Initialise
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Initialise
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Initialise
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSinit_Initialise
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSmmap_Map_BlueStream
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Initialise
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Seed_Rand
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Initialise
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Initialise
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWlc_Initialise
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Initialise
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Initialise
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Initialise
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Initialise
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Initialise
</UL>

<P><STRONG><a name="[217]"></a>BT_init_After_set_BDADDR</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bt_init.o(i.BT_init_After_set_BDADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = BT_init_After_set_BDADDR &rArr; LC_Initialise &rArr; DL_Initialise_All &rArr; DL_Initialise_Link &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Initialise
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Reset
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Initialise
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSinit_Initialise
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Initialise
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Initialise
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWlc_Initialise
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Initialise
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Local_Bd_Addr
</UL>

<P><STRONG><a name="[2e5]"></a>BTaddr_Build_Sync_Word</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, bt_addr_sync.o(i.BTaddr_Build_Sync_Word))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BTaddr_Build_Sync_Word
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSconfig_Initialise
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Initialise
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Inquiry_Request
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Create_Connection
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Request
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Local_Bd_Addr
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TC_Control_Testmode_Standalone
</UL>

<P><STRONG><a name="[ed]"></a>BTms_Is_Available_Sleep_System</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bt_mini_sched.o(i.BTms_Is_Available_Sleep_System))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BTms_Is_Available_Sleep_System &rArr; LMtmr_Timer_Expired &rArr; BTtimer_Is_Expired &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Timer_Expired
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[219]"></a>BTms_Request_HC_Reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bt_mini_sched.o(i.BTms_Request_HC_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = BTms_Request_HC_Reset &rArr; USLCsleep_Cancel &rArr; SYSpwr_Handle_Early_Wakeup &rArr; USLCchac_Wakeup &rArr; USLCsleep_Wakeup &rArr; USLCsleep_State_Dispatcher &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Cancel
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Is_Sleep_Request_Pending
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Get_Active_Procedure
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[21c]"></a>BTq_Enhanced_Flush</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, tra_queue.o(i.BTq_Enhanced_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BTq_Enhanced_Flush
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags (via BLX)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags (via BLX)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Get_Data_Queue_Ref
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Deallocate_Header
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Flush_Auto_Link_Buffer
</UL>

<P><STRONG><a name="[54a]"></a>BTq_Get_L2CAP_Out_Heap_Ref</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tra_queue.o(i.BTq_Get_L2CAP_Out_Heap_Ref))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Testmode_Request
</UL>

<P><STRONG><a name="[2d1]"></a>BTq_Get_Queue_Number_Of_Entries</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tra_queue.o(i.BTq_Get_Queue_Number_Of_Entries))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prevent_HCI_Event_Queue_from_Overfill
</UL>

<P><STRONG><a name="[2d3]"></a>BTq_Get_Queue_Number_Of_Processed_Chunks</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tra_queue.o(i.BTq_Get_Queue_Number_Of_Processed_Chunks))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Handle_Host_To_Host_Controller_Flow_Control
</UL>

<P><STRONG><a name="[21d]"></a>BTq_Get_Total_Number_Of_Processed_Chunks</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, tra_queue.o(i.BTq_Get_Total_Number_Of_Processed_Chunks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BTq_Get_Total_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Get_Data_Queue_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Handle_Host_To_Host_Controller_Flow_Control
</UL>

<P><STRONG><a name="[21e]"></a>BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tra_queue.o(i.BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTtst_HCI_Callback_On_Data_Remote_Loopback
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtst_Handle_Loopback_HCI_Data
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reset
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Get_Next_Master_Tx_Activity
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Release_All_Data_Queue_Packets
</UL>

<P><STRONG><a name="[207]"></a>BTq_Initialise</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tra_queue.o(i.BTq_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = BTq_Initialise &rArr; _BTq_Initialise_All_Data_Queues &rArr; BTq_Initialise_Data_Queue_Type
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Initialise_Variable_Chunk_Queue
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Initialise_All_Data_Queues
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[221]"></a>BTq_Initialise_Data_Queue_Type</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, tra_queue.o(i.BTq_Initialise_Data_Queue_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BTq_Initialise_Data_Queue_Type
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Get_Data_Queue_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Initialise_All_Data_Queues
</UL>

<P><STRONG><a name="[16a]"></a>BTq_Is_Queue_Not_Full</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, tra_queue.o(i.BTq_Is_Queue_Not_Full))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BTq_Is_Queue_Not_Full
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Get_Data_Queue_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtst_Handle_Loopback_HCI_Data
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_PacketHeader
</UL>

<P><STRONG><a name="[222]"></a>BTq_Reset</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, tra_queue.o(i.BTq_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BTq_Reset &rArr; BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Initialise_Variable_Chunk_Queue
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Initialise_Data_Queue
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Deallocate_Header
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Not_Accepted
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Clear_Link_If_Parked
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Release_All_Data_Queue_Packets
</UL>

<P><STRONG><a name="[224]"></a>BTtimer_Get_Native_Clock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bt_timer.o(i.BTtimer_Get_Native_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BTtimer_Get_Native_Clock &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinq_Extract_FHS
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_RecordAuthFailure
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AgeRepeatAttemptsList
</UL>

<P><STRONG><a name="[145]"></a>BTtimer_Is_Expired</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bt_timer.o(i.BTtimer_Is_Expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BTtimer_Is_Expired &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Timer_Expired
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Handle_Expired_Timers
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Service_Park_Links
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Handle_Host_To_Host_Controller_Flow_Control
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Get_Interval_To_Next_Scan
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinq_Generate_ID
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Park
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Page
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Inquiry
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Inquiry_Scan
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepare_next_slave_frame_activity
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_check_slave_activity_start_next_frame
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Allowed
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Get_Emergency_Poll_Activity
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_OS_RECONNECTING_
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpage_Generate_ID
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Update_Master_AFH_Piconet
</UL>

<P><STRONG><a name="[3da]"></a>BTtimer_Is_Expired_For_Time_Instant</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bt_timer.o(i.BTtimer_Is_Expired_For_Time_Instant))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Park_Activity
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Beacon_Tx
</UL>

<P><STRONG><a name="[3d5]"></a>BTtimer_Piconet_Reset_Slots</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bt_timer.o(i.BTtimer_Piconet_Reset_Slots))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Tx_Activity
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Device_Activity
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Slave_Sniff_Activity
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Check_If_End_Of_Access_Window
</UL>

<P><STRONG><a name="[538]"></a>BTtimer_Piconet_Set_Slots</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bt_timer.o(i.BTtimer_Piconet_Set_Slots))
<BR><BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Park
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Check_If_End_Of_Access_Window
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Unpark_Request
</UL>

<P><STRONG><a name="[539]"></a>BTtimer_Piconet_if_Expired</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bt_timer.o(i.BTtimer_Piconet_if_Expired))
<BR><BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Park
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Check_If_End_Of_Access_Window
</UL>

<P><STRONG><a name="[225]"></a>BTtimer_Set_Ticks</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bt_timer.o(i.BTtimer_Set_Ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BTtimer_Set_Ticks &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Inquiry_Scan
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpageScan_OS_START
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinqScan_OS_START
</UL>

<P><STRONG><a name="[226]"></a>BTtmt_Get_BER</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bt_tester.o(i.BTtmt_Get_BER))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = BTtmt_Get_BER &rArr; BTtmt_Sqrt &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Sqrt
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Raw_RSSI_PER_BER
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_BER
</UL>

<P><STRONG><a name="[155]"></a>BTtmt_Get_Next_Master_Tx_Activity</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, bt_tester.o(i.BTtmt_Get_Next_Master_Tx_Activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = BTtmt_Get_Next_Master_Tx_Activity &rArr; USLCtm_Test_Transmitter &rArr; LSLCpkt_Generate_ACL &rArr; LSLCpkt_Generate_POLL &rArr; _LSLCpkt_Prepare_Piconet_Channel_Access &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Initialise
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Testmode_Exit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Test_Transmitter
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_POLL
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Initialise
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Set_Host_To_Host_Controller_Flow_Control_Thresholds
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Prepare_Tx
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Prepare_Next_Master_Frame_Activity
</UL>

<P><STRONG><a name="[22d]"></a>BTtmt_Get_PER</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bt_tester.o(i.BTtmt_Get_PER))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = BTtmt_Get_PER &rArr; BTtmt_Sqrt &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Sqrt
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Raw_RSSI_PER_BER
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_PER
</UL>

<P><STRONG><a name="[208]"></a>BTtmt_Initialise</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bt_tester.o(i.BTtmt_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_LMP_Send_Test_Control
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_LMP_Send_Test_Activate
</UL>

<P><STRONG><a name="[4fd]"></a>BTtmt_Is_PER_BER_Available</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bt_tester.o(i.BTtmt_Is_PER_BER_Available))
<BR><BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Raw_RSSI_PER_BER
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_PER
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_BER
</UL>

<P><STRONG><a name="[22e]"></a>BTtmt_LMP_Accepted</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bt_tester.o(i.BTtmt_LMP_Accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BTtmt_LMP_Accepted &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Accepted_Common
</UL>

<P><STRONG><a name="[231]"></a>BTtmt_LMP_Not_Accepted</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bt_tester.o(i.BTtmt_LMP_Not_Accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BTtmt_LMP_Not_Accepted &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Not_Accepted_Common
</UL>

<P><STRONG><a name="[232]"></a>BTtmt_LMP_Send_Test_Activate</STRONG> (Thumb, 54 bytes, Stack size 64 bytes, bt_tester.o(i.BTtmt_LMP_Send_Test_Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = BTtmt_LMP_Send_Test_Activate &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Handle
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Initialise
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Activate_Remote_DUT
</UL>

<P><STRONG><a name="[235]"></a>BTtmt_LMP_Send_Test_Control</STRONG> (Thumb, 230 bytes, Stack size 96 bytes, bt_tester.o(i.BTtmt_LMP_Send_Test_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = BTtmt_LMP_Send_Test_Control &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Handle
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Initialise
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Testmode_Request
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Reinitialise
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Build_Test_Packet_Payload
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Write_QoS
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_Change_Default_Pkt_Type
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TC_Control_Testmode_In_Slave
</UL>

<P><STRONG><a name="[188]"></a>BTtmt_Record_Rx_Packet_Error</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bt_tester.o(i.BTtmt_Record_Rx_Packet_Error))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Process_Rx_Header
</UL>

<P><STRONG><a name="[227]"></a>BTtmt_Sqrt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bt_tester.o(i.BTtmt_Sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BTtmt_Sqrt &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt (via BLX)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via BLX)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via BLX)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Get_PER
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Get_BER
</UL>

<P><STRONG><a name="[17c]"></a>BTtmt_Verify_Tester_After_Rx</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, bt_tester.o(i.BTtmt_Verify_Tester_After_Rx))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Extract_Packet
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Extract_ACL_Payload
</UL>

<P><STRONG><a name="[172]"></a>BTtmt_Verify_Tester_Before_Tx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bt_tester.o(i.BTtmt_Verify_Tester_Before_Tx))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_ACL_Payload
</UL>

<P><STRONG><a name="[e4]"></a>BTtst_Handle_Loopback_HCI_Data</STRONG> (Thumb, 218 bytes, Stack size 88 bytes, bt_test.o(i.BTtst_Handle_Loopback_HCI_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = BTtst_Handle_Loopback_HCI_Data &rArr; BTq_Ack_Last_Dequeued &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Is_Queue_Not_Full
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Dequeue_Next_Data_By_Length
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[242]"></a>BTtst_Write_Loopback_Mode</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, bt_test.o(i.BTtst_Write_Loopback_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = BTtst_Write_Loopback_Mode &rArr; _BTtst_Enter_Local_Loopback &rArr; LMaclctr_Alloc_Link &rArr; LC_Alloc_Link &rArr; DL_Alloc_Link &rArr; DL_Initialise_Link &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Free_Link
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Handle
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTtst_Enter_Local_Loopback
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Test_Command
</UL>

<P><STRONG><a name="[4a6]"></a>Check_Inquiry_Is_Busy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uslc_inquiry.o(i.Check_Inquiry_Is_Busy))
<BR><BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Is_Available_Sleep_System
</UL>

<P><STRONG><a name="[2e2]"></a>DL_Alloc_Am_Addr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dl_dev_impl.o(i.DL_Alloc_Am_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DL_Alloc_Am_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Create_Connection
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Alloc_AM_ADDR
</UL>

<P><STRONG><a name="[245]"></a>DL_Alloc_Link</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dl_dev_impl.o(i.DL_Alloc_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = DL_Alloc_Link &rArr; DL_Initialise_Link &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Initialise_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Alloc_Link
</UL>

<P><STRONG><a name="[247]"></a>DL_Assign_Piconet_Index</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dl_dev_impl.o(i.DL_Assign_Piconet_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Reset_New_Connection
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Request
</UL>

<P><STRONG><a name="[24a]"></a>DL_Free_Am_Addr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dl_dev_impl.o(i.DL_Free_Am_Addr))
<BR><BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Clear_Link_If_Parked
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Unpark_Timeout
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Unpark_Rollback
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Park
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Free_Link
</UL>

<P><STRONG><a name="[248]"></a>DL_Free_Link</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dl_dev_impl.o(i.DL_Free_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DL_Free_Link
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Free_Am_Addr
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Free_Piconet_Index
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSconfig_Get_Device_Links_Location
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Free_Link
</UL>

<P><STRONG><a name="[24b]"></a>DL_Free_Piconet_Index</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dl_dev_impl.o(i.DL_Free_Piconet_Index))
<BR><BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Reset_New_Connection
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Free_Link
</UL>

<P><STRONG><a name="[13e]"></a>DL_Get_Device_Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bt_tester.o(i.DL_Get_Device_Ref))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Free_Link
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_CB_Enable_L2CAP_Traffic
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Piconet_Clock_Ex
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Testmode_Request
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Get_Next_Master_Tx_Activity
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Stop_Encryption_Req
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Start_Encryption_Req
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Not_Accepted
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Accepted
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Accepted
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LMP_Test_Activate
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LMP_Channel_Classification_Req
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LMP_Channel_Classification
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Channel_Quality_Timeout
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Stop_Classification_Reporting
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Start_Classification_Reporting
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Deactivate_AFH
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Set_PTT_ACL
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Read_Local_Slot_Offset
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Create_Connection
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Disconnect
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Setup_Complete
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Detach
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Disconnect_Acl
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Wakeup
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Tx_Activity
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Rx_Activity
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Park_Activity
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Device_Activity
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Ack_Last_Tx_Packet
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Tx_Activity
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Slave_Sniff_Activity
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Link_Tx_Activity
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_PeerData_Tx_Stop_Callback
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Enable_Rx_Encryption
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Park_Request
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_LMP_Park_Accepted_Ack_Timeout
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Testmode_Change_Settings
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_isNextRxTxACLActive
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Get_Emergency_Poll_Activity
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Request
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_Request
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Unpark_Request
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Park_Request
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Access_Window_Request
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Request
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Write_Remote_Slot_Offset
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Write_Device_Jitter
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Write_Device_Drift
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Read_Clock_Offset
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Report_Slave_Channel_Classification
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LMP_Set_AFH_Ack
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LMP_Channel_Classification_Ack
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Is_AFH_Change_Pending
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Update_Slave_AFH_If_Required
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Is_Classification_Reporting
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_SyncWord
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Radio_Power
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Raw_RSSI_PER_BER
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Raw_RSSI
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Radio_Power
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TC_Control_Testmode_Standalone
</UL>

<P><STRONG><a name="[42a]"></a>DL_Get_Local_Device_Index</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lmp_sec_peer.o(i.DL_Get_Local_Device_Index))
<BR><BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Accepted
</UL>

<P><STRONG><a name="[125]"></a>DL_Get_Local_Device_Ref</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lslc_slot.o(i.DL_Get_Local_Device_Ref))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Initialise
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Free_Link
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Process_Rx
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Early_Prepare_Frequency_FHS_Response_ID
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Local_Piconet_Request
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Change_To_Local_Piconet
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM2
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Inquiry_Scan
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Cancel
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_FHS
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Force_Context
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Beacon_Tx
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Tx_Activity
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Master_Broadcast_Tx
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Inquiry_Request
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Prepare_Next_Master_Frame_Activity
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Prepare_Next_Slave_Frame_Activity
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Get_Emergency_Poll_Activity
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpageScan_OS_START
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_FHS_Ex
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Assign_Frequency_Kernel
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_Update_Ctrl_State_
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_FHS
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinqScan_OS_START
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Initialise
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_Request
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Request
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Read_Local_Device_Jitter
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Read_Local_Device_Drift
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCpkt_Prepare_Piconet_Channel_Access
</UL>

<P><STRONG><a name="[17f]"></a>DL_Inc_Rx_ACL_Data_Packets_Nacked</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lslc_access.o(i.DL_Inc_Rx_ACL_Data_Packets_Nacked))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Process_Rx_CRC
</UL>

<P><STRONG><a name="[24c]"></a>DL_Initialise_All</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dl_dev_impl.o(i.DL_Initialise_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = DL_Initialise_All &rArr; DL_Initialise_Link &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Initialise_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Initialise
</UL>

<P><STRONG><a name="[24e]"></a>DL_Park</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dl_dev_impl.o(i.DL_Park))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DL_Park
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Free_Am_Addr
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSconfig_Get_Device_Links_Location
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Park
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Park
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Park_Request
</UL>

<P><STRONG><a name="[24d]"></a>DL_Reset_New_Connection</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dl_dev_impl.o(i.DL_Reset_New_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Assign_Piconet_Index
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Free_Piconet_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Unpark
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Initialise_Link
</UL>

<P><STRONG><a name="[17d]"></a>DL_Toggle_Rx_LT_Expected_Seqn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lslc_access.o(i.DL_Toggle_Rx_LT_Expected_Seqn))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Extract_ACL_Payload
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Process_Rx_CRC
</UL>

<P><STRONG><a name="[186]"></a>DL_Toggle_Rx_LT_Seqn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lslc_access.o(i.DL_Toggle_Rx_LT_Seqn))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Process_Rx_Header
</UL>

<P><STRONG><a name="[55f]"></a>DL_Toggle_Tx_LT_Seqn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lmp_link_policy.o(i.DL_Toggle_Tx_LT_Seqn))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Master_Broadcast_Tx
</UL>

<P><STRONG><a name="[24f]"></a>DL_Unpark</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, dl_dev_impl.o(i.DL_Unpark))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = DL_Unpark &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Reset_New_Connection
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSconfig_Get_Device_Links_Location
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Park
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Unpark_Request
</UL>

<P><STRONG><a name="[537]"></a>DL_Unpark_Commit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dl_dev_impl.o(i.DL_Unpark_Commit))
<BR><BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Park
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Park
</UL>

<P><STRONG><a name="[250]"></a>DL_Unpark_Rollback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dl_dev_impl.o(i.DL_Unpark_Rollback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DL_Unpark_Rollback
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Free_Am_Addr
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSconfig_Get_Device_Links_Location
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Park
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Park
</UL>

<P><STRONG><a name="[140]"></a>DL_Use_Local_Tx_Descriptor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dl_dev_impl.o(i.DL_Use_Local_Tx_Descriptor))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Test_Transmitter
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Beacon_Tx
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Tx_Activity
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Loopback_Testmode_Payload
</UL>

<P><STRONG><a name="[251]"></a>DeviceBtj_Adapter_GetService</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, devicebtj_handler.o(i.DeviceBtj_Adapter_GetService))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DeviceBtj_Adapter_GetService
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Utils_DevMemAddr_ChkSame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events
</UL>

<P><STRONG><a name="[d7]"></a>DeviceBtj_Adapter_Write</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, devicebtj_handler.o(i.DeviceBtj_Adapter_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_UART_Rx_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Extended_Inquiry_Response_Command
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Send
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_ConnectionReq
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_WriteLocalName
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_SwitchRole
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_PinCodeReply
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Disconnect
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Connect
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_AuthenticationRequestedCommand
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Loop
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUih
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUa
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameSabm
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameDm
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameDisc
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_InfoRsp
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_DisconnectionRsp
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_ConnectionRsp
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_ConfigurationRsp
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_ConfigurationReq
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_DisconnectionReq
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Handler
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Util_Handshake
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events_Complete
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Link_Policy_Settings
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_UserConfirmationReply
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_SetConnectionEncryptionCommand
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_IoCapabilityReply
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_AcceptConnection
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceSearchReq
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceSearchAttributeReq
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceAttributeReq
</UL>

<P><STRONG><a name="[254]"></a>DeviceBtj_Connect</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, devicebtj_handler.o(i.DeviceBtj_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = DeviceBtj_Connect &rArr; DeviceL2c_Send_ConnectionReq &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_ConnectionReq
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Connect
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Utils_DevMemAddr_ChkSame
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_control
</UL>

<P><STRONG><a name="[29c]"></a>DeviceBtj_Endians_Bedword_ptr2val</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, devicebtj_endians.o(i.DeviceBtj_Endians_Bedword_ptr2val))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeviceBtj_Endians_Bedword_ptr2val
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdpdb_Parse_DataElement_Head
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceAttributeReq
</UL>

<P><STRONG><a name="[2a2]"></a>DeviceBtj_Endians_Bedword_val2ptr</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, devicebtj_endians.o(i.DeviceBtj_Endians_Bedword_val2ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DeviceBtj_Endians_Bedword_val2ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceSearchReq
</UL>

<P><STRONG><a name="[29f]"></a>DeviceBtj_Endians_Beword_ptr2val</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devicebtj_endians.o(i.DeviceBtj_Endians_Beword_ptr2val))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeviceBtj_Endians_Beword_ptr2val
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdpdb_Parse_MatchUuid
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdpdb_Parse_DataElement_Head
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceSearchReq
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceSearchAttributeReq
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceAttributeReq
</UL>

<P><STRONG><a name="[2a0]"></a>DeviceBtj_Endians_Beword_val2ptr</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, devicebtj_endians.o(i.DeviceBtj_Endians_Beword_val2ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DeviceBtj_Endians_Beword_val2ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceSearchReq
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceSearchAttributeReq
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceAttributeReq
</UL>

<P><STRONG><a name="[298]"></a>DeviceBtj_Endians_Beword_val2val</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, devicebtj_endians.o(i.DeviceBtj_Endians_Beword_val2val))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeviceBtj_Endians_Beword_val2val
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Handler
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceSearchReq
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceSearchAttributeReq
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceAttributeReq
</UL>

<P><STRONG><a name="[296]"></a>DeviceBtj_Endians_Leword_ptr2val</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devicebtj_endians.o(i.DeviceBtj_Endians_Leword_ptr2val))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeviceBtj_Endians_Leword_ptr2val
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUih
</UL>

<P><STRONG><a name="[295]"></a>DeviceBtj_Endians_Leword_val2ptr</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, devicebtj_endians.o(i.DeviceBtj_Endians_Leword_val2ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DeviceBtj_Endians_Leword_val2ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_UihHeader
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUih
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUa
</UL>

<P><STRONG><a name="[257]"></a>DeviceBtj_Event</STRONG> (Thumb, 846 bytes, Stack size 64 bytes, devicebtj_handler.o(i.DeviceBtj_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLinkNum
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBtLinkInfo
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_buff_send
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBtLinkInfo
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bprintf
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Extended_Inquiry_Response_Command
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Stop
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdpdb_Doreg
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Reset
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Reset
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_WriteLocalName
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_PinCodeReply
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Connect
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_HCI_command
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_ind
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ind
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readLinkNum
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_data
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUih
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUa
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameSabm
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameDisc
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Apps_Cfm
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Handler
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events_Complete
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceSearchAttributeReq
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceAttributeReq
</UL>

<P><STRONG><a name="[252]"></a>DeviceBtj_Utils_DevMemAddr_ChkSame</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, devicebtj_utils.o(i.DeviceBtj_Utils_DevMemAddr_ChkSame))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Connect
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_GetService
</UL>

<P><STRONG><a name="[297]"></a>DeviceBtj_Utils_Min</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, devicebtj_utils.o(i.DeviceBtj_Utils_Min))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUih
</UL>

<P><STRONG><a name="[28b]"></a>DeviceFcs_Cal</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, devicebtj_fcs.o(i.DeviceFcs_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeviceFcs_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_UihHeader
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_MsgHeader
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_CtlHeader
</UL>

<P><STRONG><a name="[28d]"></a>DeviceFcs_Chk</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, devicebtj_fcs.o(i.DeviceFcs_Chk))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DeviceFcs_Chk
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Handler
</UL>

<P><STRONG><a name="[26a]"></a>DeviceHci_AcceptConnection</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, devicebtj_stack_hci_cmd.o(i.DeviceHci_AcceptConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = DeviceHci_AcceptConnection &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events
</UL>

<P><STRONG><a name="[26b]"></a>DeviceHci_AuthenticationRequestedCommand</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, devicebtj_stack_hci_cmd.o(i.DeviceHci_AuthenticationRequestedCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = DeviceHci_AuthenticationRequestedCommand &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_control
</UL>

<P><STRONG><a name="[26c]"></a>DeviceHci_Callback</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, devicebtj_stack_hci_evt.o(i.DeviceHci_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = DeviceHci_Callback &rArr; DeviceL2c_Handler &rArr; DeviceSdp_Handler &rArr; DeviceSdp_Recv_ServiceSearchAttributeReq &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Handler
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_HCI_Rx
</UL>

<P><STRONG><a name="[27b]"></a>DeviceHci_Common</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, devicebtj_stack_hci_cmd.o(i.DeviceHci_Common))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DeviceHci_Common
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_UihHeader
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_ConnectionReq
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Send
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_MsgHeader
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_CtlHeader
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_InfoRsp
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_DisconnectionRsp
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_ConnectionRsp
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_ConfigurationRsp
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_ConfigurationReq
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_DisconnectionReq
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Handler
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Util_Handshake
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceSearchReq
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceSearchAttributeReq
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceAttributeReq
</UL>

<P><STRONG><a name="[256]"></a>DeviceHci_Connect</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, devicebtj_stack_hci_cmd.o(i.DeviceHci_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = DeviceHci_Connect &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Connect
</UL>

<P><STRONG><a name="[26f]"></a>DeviceHci_Disconnect</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, devicebtj_stack_hci_cmd.o(i.DeviceHci_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = DeviceHci_Disconnect &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ind
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Packets
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events
</UL>

<P><STRONG><a name="[26e]"></a>DeviceHci_Events</STRONG> (Thumb, 884 bytes, Stack size 56 bytes, devicebtj_stack_hci_evt.o(i.DeviceHci_Events))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = DeviceHci_Events &rArr; DeviceHci_Events_Complete &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Reset
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_ConnectionReq
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Reset
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_SwitchRole
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Disconnect
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_GetService
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Reset
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events_Complete
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Link_Policy_Settings
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_UserConfirmationReply
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_SetConnectionEncryptionCommand
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_IoCapabilityReply
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_AcceptConnection
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via BLX)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Callback
</UL>

<P><STRONG><a name="[274]"></a>DeviceHci_Events_Complete</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, devicebtj_stack_hci_evt.o(i.DeviceHci_Events_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = DeviceHci_Events_Complete &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events
</UL>

<P><STRONG><a name="[276]"></a>DeviceHci_IoCapabilityReply</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, devicebtj_stack_hci_cmd.o(i.DeviceHci_IoCapabilityReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = DeviceHci_IoCapabilityReply &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events
</UL>

<P><STRONG><a name="[265]"></a>DeviceHci_PinCodeReply</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, devicebtj_stack_hci_cmd.o(i.DeviceHci_PinCodeReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = DeviceHci_PinCodeReply &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via BLX)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
</UL>

<P><STRONG><a name="[277]"></a>DeviceHci_SetConnectionEncryptionCommand</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, devicebtj_stack_hci_cmd.o(i.DeviceHci_SetConnectionEncryptionCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = DeviceHci_SetConnectionEncryptionCommand &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events
</UL>

<P><STRONG><a name="[275]"></a>DeviceHci_SwitchRole</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, devicebtj_stack_hci_cmd.o(i.DeviceHci_SwitchRole))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = DeviceHci_SwitchRole &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_control
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events
</UL>

<P><STRONG><a name="[270]"></a>DeviceHci_UserConfirmationReply</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, devicebtj_stack_hci_cmd.o(i.DeviceHci_UserConfirmationReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = DeviceHci_UserConfirmationReply &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events
</UL>

<P><STRONG><a name="[259]"></a>DeviceHci_WriteLocalName</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, devicebtj_stack_hci_cmd.o(i.DeviceHci_WriteLocalName))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = DeviceHci_WriteLocalName &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
</UL>

<P><STRONG><a name="[278]"></a>DeviceHid_Handler</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, devicebtj_stack_hid.o(i.DeviceHid_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = DeviceHid_Handler &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_ConnectionReq
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_DisconnectionReq
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Util_Handshake
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Util_GetService
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Common
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via BLX)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_DisconnectionRsp
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Packets
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Open
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Handler
</UL>

<P><STRONG><a name="[267]"></a>DeviceHid_Reset</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, devicebtj_stack_hid.o(i.DeviceHid_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DeviceHid_Reset &rArr; DeviceHid_Util_GetService
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Util_GetService
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events
</UL>

<P><STRONG><a name="[d3]"></a>DeviceHid_Send</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, devicebtj_stack_hid.o(i.DeviceHid_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = DeviceHid_Send &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Common
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Loop
</UL>

<P><STRONG><a name="[26d]"></a>DeviceL2c_Handler</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, devicebtj_stack_l2c.o(i.DeviceL2c_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = DeviceL2c_Handler &rArr; DeviceSdp_Handler &rArr; DeviceSdp_Recv_ServiceSearchAttributeReq &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Handler
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Handler
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Packets
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Context_From_Scid
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Callback
</UL>

<P><STRONG><a name="[27f]"></a>DeviceL2c_Packets</STRONG> (Thumb, 850 bytes, Stack size 40 bytes, devicebtj_stack_l2c.o(i.DeviceL2c_Packets))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = DeviceL2c_Packets &rArr; DeviceL2c_Send_ConfigurationRsp &rArr; DeviceL2c_Open &rArr; DeviceHid_Handler &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Disconnect
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Service
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_InfoRsp
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_DisconnectionRsp
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_ConnectionRsp
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_ConfigurationRsp
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_ConfigurationReq
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Open
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Context_From_Scid
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Context_From_Hci
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Reset
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via BLX)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Handler
</UL>

<P><STRONG><a name="[272]"></a>DeviceL2c_Reset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, devicebtj_stack_l2c.o(i.DeviceL2c_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeviceL2c_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Packets
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events
</UL>

<P><STRONG><a name="[284]"></a>DeviceL2c_Send_ConfigurationReq</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, devicebtj_stack_l2c.o(i.DeviceL2c_Send_ConfigurationReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = DeviceL2c_Send_ConfigurationReq &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Common
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Packets
</UL>

<P><STRONG><a name="[286]"></a>DeviceL2c_Send_ConfigurationRsp</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, devicebtj_stack_l2c.o(i.DeviceL2c_Send_ConfigurationRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = DeviceL2c_Send_ConfigurationRsp &rArr; DeviceL2c_Open &rArr; DeviceHid_Handler &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Open
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Common
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Packets
</UL>

<P><STRONG><a name="[255]"></a>DeviceL2c_Send_ConnectionReq</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, devicebtj_stack_l2c.o(i.DeviceL2c_Send_ConnectionReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = DeviceL2c_Send_ConnectionReq &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Common
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Connect
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Handler
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events
</UL>

<P><STRONG><a name="[283]"></a>DeviceL2c_Send_ConnectionRsp</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, devicebtj_stack_l2c.o(i.DeviceL2c_Send_ConnectionRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = DeviceL2c_Send_ConnectionRsp &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Common
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Packets
</UL>

<P><STRONG><a name="[27a]"></a>DeviceL2c_Send_DisconnectionReq</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, devicebtj_stack_l2c.o(i.DeviceL2c_Send_DisconnectionReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = DeviceL2c_Send_DisconnectionReq &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Common
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUa
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Handler
</UL>

<P><STRONG><a name="[287]"></a>DeviceL2c_Send_DisconnectionRsp</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, devicebtj_stack_l2c.o(i.DeviceL2c_Send_DisconnectionRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = DeviceL2c_Send_DisconnectionRsp &rArr; DeviceHid_Handler &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Handler
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Common
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Packets
</UL>

<P><STRONG><a name="[288]"></a>DeviceL2c_Send_InfoRsp</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, devicebtj_stack_l2c.o(i.DeviceL2c_Send_InfoRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = DeviceL2c_Send_InfoRsp &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Common
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Packets
</UL>

<P><STRONG><a name="[285]"></a>DeviceL2c_Service</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, devicebtj_stack_l2c.o(i.DeviceL2c_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DeviceL2c_Service
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Packets
</UL>

<P><STRONG><a name="[289]"></a>DeviceRfc_Apps_Cfm</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, devicebtj_stack_rfc.o(i.DeviceRfc_Apps_Cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = DeviceRfc_Apps_Cfm &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUa
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameDm
</UL>

<P><STRONG><a name="[28a]"></a>DeviceRfc_CtlHeader</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, devicebtj_stack_rfc.o(i.DeviceRfc_CtlHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DeviceRfc_CtlHeader &rArr; DeviceHci_Common
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceFcs_Cal
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Common
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUih
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUa
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameSabm
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameDm
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameDisc
</UL>

<P><STRONG><a name="[281]"></a>DeviceRfc_Handler</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, devicebtj_stack_rfc.o(i.DeviceRfc_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = DeviceRfc_Handler &rArr; DeviceRfc_Recv_FrameUa &rArr; DeviceRfc_Apps_Cfm &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceFcs_Chk
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUih
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUa
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameSabm
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameDm
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameDisc
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Handler
</UL>

<P><STRONG><a name="[292]"></a>DeviceRfc_MsgHeader</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, devicebtj_stack_rfc.o(i.DeviceRfc_MsgHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DeviceRfc_MsgHeader &rArr; DeviceHci_Common
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceFcs_Cal
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Common
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUih
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUa
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameSabm
</UL>

<P><STRONG><a name="[290]"></a>DeviceRfc_Recv_FrameDisc</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, devicebtj_stack_rfc.o(i.DeviceRfc_Recv_FrameDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = DeviceRfc_Recv_FrameDisc &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Reset
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_CtlHeader
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Util_GetContext
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Handler
</UL>

<P><STRONG><a name="[28f]"></a>DeviceRfc_Recv_FrameDm</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, devicebtj_stack_rfc.o(i.DeviceRfc_Recv_FrameDm))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = DeviceRfc_Recv_FrameDm &rArr; DeviceRfc_Apps_Cfm &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_CtlHeader
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Apps_Cfm
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Util_GetContext
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Handler
</UL>

<P><STRONG><a name="[28c]"></a>DeviceRfc_Recv_FrameSabm</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, devicebtj_stack_rfc.o(i.DeviceRfc_Recv_FrameSabm))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = DeviceRfc_Recv_FrameSabm &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_MsgHeader
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_CtlHeader
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Util_GetService
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Handler
</UL>

<P><STRONG><a name="[28e]"></a>DeviceRfc_Recv_FrameUa</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, devicebtj_stack_rfc.o(i.DeviceRfc_Recv_FrameUa))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = DeviceRfc_Recv_FrameUa &rArr; DeviceRfc_Apps_Cfm &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Reset
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Endians_Leword_val2ptr
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_MsgHeader
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_CtlHeader
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Apps_Cfm
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Util_GetContext
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_DisconnectionReq
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Handler
</UL>

<P><STRONG><a name="[291]"></a>DeviceRfc_Recv_FrameUih</STRONG> (Thumb, 932 bytes, Stack size 48 bytes, devicebtj_stack_rfc.o(i.DeviceRfc_Recv_FrameUih))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = DeviceRfc_Recv_FrameUih &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_UihHeader
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Utils_Min
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Endians_Leword_val2ptr
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Endians_Leword_ptr2val
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_MsgHeader
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_CtlHeader
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Util_GetService
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Util_GetContext
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via BLX)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Handler
</UL>

<P><STRONG><a name="[268]"></a>DeviceRfc_Reset</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, devicebtj_stack_rfc.o(i.DeviceRfc_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUa
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameDisc
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events
</UL>

<P><STRONG><a name="[d9]"></a>DeviceRfc_Send</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, devicebtj_stack_rfc.o(i.DeviceRfc_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = DeviceRfc_Send &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_UihHeader
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Loop
</UL>

<P><STRONG><a name="[d6]"></a>DeviceRfc_UihHeader</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, devicebtj_stack_rfc.o(i.DeviceRfc_UihHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DeviceRfc_UihHeader &rArr; DeviceHci_Common
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceFcs_Cal
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Endians_Leword_val2ptr
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Common
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Send
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Loop
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUih
</UL>

<P><STRONG><a name="[280]"></a>DeviceSdp_Handler</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, devicebtj_stack_sdp.o(i.DeviceSdp_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = DeviceSdp_Handler &rArr; DeviceSdp_Recv_ServiceSearchAttributeReq &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceSearchReq
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceSearchAttributeReq
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceAttributeReq
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Endians_Beword_val2val
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Handler
</UL>

<P><STRONG><a name="[29b]"></a>DeviceSdp_Recv_ServiceAttributeReq</STRONG> (Thumb, 972 bytes, Stack size 128 bytes, devicebtj_stack_sdp.o(i.DeviceSdp_Recv_ServiceAttributeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = DeviceSdp_Recv_ServiceAttributeReq &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdpdb_Get_Database
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Common
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdpdb_Parse_DataElement_Head
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Endians_Beword_val2val
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Endians_Beword_val2ptr
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Endians_Beword_ptr2val
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Endians_Bedword_ptr2val
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Handler
</UL>

<P><STRONG><a name="[299]"></a>DeviceSdp_Recv_ServiceSearchAttributeReq</STRONG> (Thumb, 1128 bytes, Stack size 128 bytes, devicebtj_stack_sdp.o(i.DeviceSdp_Recv_ServiceSearchAttributeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = DeviceSdp_Recv_ServiceSearchAttributeReq &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Common
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdpdb_Parse_MatchUuid
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdpdb_Parse_DataElement_Head
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Endians_Beword_val2val
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Endians_Beword_val2ptr
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Endians_Beword_ptr2val
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Handler
</UL>

<P><STRONG><a name="[29a]"></a>DeviceSdp_Recv_ServiceSearchReq</STRONG> (Thumb, 328 bytes, Stack size 80 bytes, devicebtj_stack_sdp.o(i.DeviceSdp_Recv_ServiceSearchReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = DeviceSdp_Recv_ServiceSearchReq &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Common
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdpdb_Parse_MatchUuid
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdpdb_Parse_DataElement_Head
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Endians_Beword_val2val
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Endians_Beword_val2ptr
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Endians_Beword_ptr2val
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Endians_Bedword_val2ptr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Handler
</UL>

<P><STRONG><a name="[269]"></a>DeviceSdpdb_Doreg</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, devicebtj_stack_sdpdb.o(i.DeviceSdpdb_Doreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DeviceSdpdb_Doreg
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Host_Initialise
</UL>

<P><STRONG><a name="[29d]"></a>DeviceSdpdb_Get_Database</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, devicebtj_stack_sdpdb.o(i.DeviceSdpdb_Get_Database))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DeviceSdpdb_Get_Database
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceAttributeReq
</UL>

<P><STRONG><a name="[29e]"></a>DeviceSdpdb_Parse_DataElement_Head</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, devicebtj_stack_sdpdb_parser.o(i.DeviceSdpdb_Parse_DataElement_Head))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DeviceSdpdb_Parse_DataElement_Head &rArr; DeviceBtj_Endians_Beword_ptr2val
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Endians_Beword_ptr2val
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Endians_Bedword_ptr2val
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdpdb_Parse_MatchUuid
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceSearchReq
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceSearchAttributeReq
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceAttributeReq
</UL>

<P><STRONG><a name="[2a1]"></a>DeviceSdpdb_Parse_MatchUuid</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, devicebtj_stack_sdpdb_parser.o(i.DeviceSdpdb_Parse_MatchUuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DeviceSdpdb_Parse_MatchUuid &rArr; DeviceSdpdb_Parse_DataElement_Head &rArr; DeviceBtj_Endians_Beword_ptr2val
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdpdb_Parse_DataElement_Head
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Endians_Beword_ptr2val
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceSearchReq
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdp_Recv_ServiceSearchAttributeReq
</UL>

<P><STRONG><a name="[2a3]"></a>Device_HCI_Rx</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, devicebtj_handler.o(i.Device_HCI_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = Device_HCI_Rx &rArr; DeviceHci_Callback &rArr; DeviceL2c_Handler &rArr; DeviceSdp_Handler &rArr; DeviceSdp_Recv_ServiceSearchAttributeReq &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_UART_Transmit
</UL>

<P><STRONG><a name="[491]"></a>Driver_wdt_disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, driver_wdt.o(i.Driver_wdt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Initialise
</UL>

<P><STRONG><a name="[56e]"></a>Driver_wdt_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, driver_wdt.o(i.Driver_wdt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATCommand
</UL>

<P><STRONG><a name="[2a4]"></a>ECC_Point_Multiplication</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lmp_ecc.o(i.ECC_Point_Multiplication))
<BR><BR>[Stack]<UL><LI>Max Depth = 1588<LI>Call Chain = ECC_Point_Multiplication &rArr; ECC_Point_Multiplication_uint8 &rArr; LMecc_CB_ECC_Point_Multiplication_Complete &rArr; LMssp_CallBack_DH_Key_Complete &rArr; _LMssp_Send_LMP_DH_Key_Check &rArr; LMssp_Calculate_DHKEY_Check &rArr; F3 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lmecc_pointq_status
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBigNumber
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyBigHex
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Point_Copy
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_Point_Multiplication_uint8
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMecc_Generate_ECC_Key
</UL>

<P><STRONG><a name="[2a8]"></a>ECC_Point_Multiplication_uint8</STRONG> (Thumb, 212 bytes, Stack size 176 bytes, lmp_ecc.o(i.ECC_Point_Multiplication_uint8))
<BR><BR>[Stack]<UL><LI>Max Depth = 1564<LI>Call Chain = ECC_Point_Multiplication_uint8 &rArr; LMecc_CB_ECC_Point_Multiplication_Complete &rArr; LMssp_CallBack_DH_Key_Complete &rArr; _LMssp_Send_LMP_DH_Key_Check &rArr; LMssp_Calculate_DHKEY_Check &rArr; F3 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CPU_PLL_clk
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_lmecc_pointq
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lmecc_pointq
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMecc_CB_ECC_Point_Multiplication_Complete
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Point_Copy
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Point_Addition
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_Point_Multiplication_uint8_non_blocking
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_Point_Multiplication
</UL>

<P><STRONG><a name="[10]"></a>ECC_Point_Multiplication_uint8_non_blocking</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lmp_ecc.o(i.ECC_Point_Multiplication_uint8_non_blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 1572<LI>Call Chain = ECC_Point_Multiplication_uint8_non_blocking &rArr; ECC_Point_Multiplication_uint8 &rArr; LMecc_CB_ECC_Point_Multiplication_Complete &rArr; LMssp_CallBack_DH_Key_Complete &rArr; _LMssp_Send_LMP_DH_Key_Check &rArr; LMssp_Calculate_DHKEY_Check &rArr; F3 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_Point_Multiplication_uint8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_ecc.o(i.ECC_Point_Multiplication_uint8)
</UL>
<P><STRONG><a name="[49b]"></a>Enable_ICU_Intr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, driver_icu.o(i.Enable_ICU_Intr))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Initialise
</UL>

<P><STRONG><a name="[2ad]"></a>Enter_Deep_sleep</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, sys_power.o(i.Enter_Deep_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Enter_Deep_sleep &rArr; flash_set_line_mode &rArr; clr_flash_qwfr
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_clk
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CPU_Speed_16M
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Halt_System
</UL>

<P><STRONG><a name="[2b0]"></a>F1</STRONG> (Thumb, 72 bytes, Stack size 120 bytes, lmp_ssp_engine.o(i.F1))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028<LI>Call Chain = F1 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashConcat
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Passkey_Request_Reply
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_Remote_OOB_Data_Request_Reply
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_Read_Local_OOB_Data
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Simple_Pairing_Number
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Simple_Pairing_Confirm
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Encapsulated_Payload
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Accepted
</UL>

<P><STRONG><a name="[2b3]"></a>F2</STRONG> (Thumb, 108 bytes, Stack size 184 bytes, lmp_ssp_engine.o(i.F2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1092<LI>Call Chain = F2 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashConcat
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Calculate_Link_Key
</UL>

<P><STRONG><a name="[2b4]"></a>F3</STRONG> (Thumb, 124 bytes, Stack size 280 bytes, lmp_ssp_engine.o(i.F3))
<BR><BR>[Stack]<UL><LI>Max Depth = 1188<LI>Call Chain = F3 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashConcat
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Calculate_DHKEY_Check
</UL>

<P><STRONG><a name="[2f3]"></a>FHS_Set_Device_Class</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lc_interface.o(i.FHS_Set_Device_Class))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Initialise
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Write_Local_Device_Class
</UL>

<P><STRONG><a name="[2b5]"></a>G</STRONG> (Thumb, 144 bytes, Stack size 264 bytes, lmp_ssp_engine.o(i.G))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = G &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashConcat
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA_256
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Simple_Pairing_Number
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Accepted
</UL>

<P><STRONG><a name="[2a9]"></a>GF_Point_Addition</STRONG> (Thumb, 244 bytes, Stack size 240 bytes, lmp_ecc.o(i.GF_Point_Addition))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = GF_Point_Addition &rArr; bigHexInversion &rArr; specialModP &rArr; SubtractFromSelfBigHexSign &rArr; SubtractBigHex
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigHexInversion
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHexUint32
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHexMod
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexModP
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexByUint32
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Point_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_Point_Multiplication_uint8
</UL>

<P><STRONG><a name="[2a5]"></a>GF_Point_Copy</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lmp_ecc.o(i.GF_Point_Copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GF_Point_Copy &rArr; copyBigHex &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyBigHex
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Point_Addition
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_Point_Multiplication_uint8
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_Point_Multiplication
</UL>

<P><STRONG><a name="[2bc]"></a>GPIO_Initial</STRONG> (Thumb, 138 bytes, Stack size 4 bytes, driver_gpio.o(i.GPIO_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Initial &rArr; GPIO_config
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_output
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_config
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Initialise
</UL>

<P><STRONG><a name="[2bd]"></a>GPIO_config</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, driver_gpio.o(i.GPIO_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_config
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Initial
</UL>

<P><STRONG><a name="[2be]"></a>GPIO_output</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, driver_gpio.o(i.GPIO_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_output
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Initial
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ISR1
</UL>

<P><STRONG><a name="[38f]"></a>Get_exist_Acl_Num</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lmp_acl_container.o(i.Get_exist_Acl_Num))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Sleep_System
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Start
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Host_Connection_Req
</UL>

<P><STRONG><a name="[5f]"></a>HCIT_UART_Shutdown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, driver_uart.o(i.HCIT_UART_Shutdown))
<BR>[Address Reference Count : 1]<UL><LI> driver_uart.o(i.TRAhcit_Register_UART_Driver)
</UL>
<P><STRONG><a name="[551]"></a>HCIparam_Get_Bd_Addr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hc_cmd_disp.o(i.HCIparam_Get_Bd_Addr))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Policy_Command
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[55b]"></a>HCIparam_Get_Lap</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc_cmd_disp.o(i.HCIparam_Get_Lap))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[4d2]"></a>HCIparam_Get_Uint16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc_cmd_disp.o(i.HCIparam_Get_Uint16))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Policy_Command
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[550]"></a>HCIparam_Get_Uint24</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc_cmd_disp.o(i.HCIparam_Get_Uint24))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[4af]"></a>HCIparam_Get_Uint32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hc_cmd_disp.o(i.HCIparam_Get_Uint32))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Policy_Command
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_SyncWord
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Beken_Hardware_Test
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tc_Beken_Debug_UART_Access_Register
</UL>

<P><STRONG><a name="[e8]"></a>HC_Command_Dispatcher</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, hc_cmd_disp.o(i.HC_Command_Dispatcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = HC_Command_Dispatcher &rArr; TCI_Dispatch_Prop_Command &rArr; TC_Perform_Test_Control &rArr; _TC_Control_Testmode_In_Slave &rArr; BTtmt_LMP_Send_Test_Control &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Dequeue_Next
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Loopback_Command_Event
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Status_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[f3]"></a>HCeg_Command_Complete_Event</STRONG> (Thumb, 970 bytes, Stack size 24 bytes, hc_event_gen.o(i.HCeg_Command_Complete_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = HCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint24
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prevent_HCI_Event_Queue_from_Overfill
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prepare_Command_Complete_Event_Read_Clock_Payload
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Bd_Addr_In_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Pin_Code_Request_Reply
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Pin_Code_Request_Negative_Reply
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Link_Key_Request_Reply
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Link_Key_Request_Negative_Reply
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Test_Command
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Local_Status_Command
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Policy_Command
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Info_Command
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Read_Remote_Name_Cancel_Command_Complete_Event
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Create_Connection_Cancel_Command_Complete_Event
</UL>

<P><STRONG><a name="[2c1]"></a>HCeg_Command_Status_Event</STRONG> (Thumb, 38 bytes, Stack size 72 bytes, hc_event_gen.o(i.HCeg_Command_Status_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HCeg_Command_Status_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prevent_HCI_Event_Queue_from_Overfill
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC_Command_Dispatcher
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Master_Link_Key
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Change_Connection_Link_Key
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Authentication_Requested
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_HCI_Enhanced_Flush
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Policy_Command
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[26]"></a>HCeg_Generate_Event</STRONG> (Thumb, 890 bytes, Stack size 24 bytes, hc_event_gen.o(i.HCeg_Generate_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Handle
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Set_Uint32
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Set_Uint16
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_CB_Enable_L2CAP_Traffic
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint32
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Is_Event_Masked_On
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Inquiry_Result_Event
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Bd_Addr_In_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtst_Write_Loopback_Mode
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTtst_Enter_Local_Loopback
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Scan_All_Links_For_Pending_Flushes
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Get_Rx_Buf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prevent_HCI_Event_Queue_from_Overfill
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Link_Key_Request_Negative_Reply
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Send_HC_Packet_Type_Changed_Event
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_HCI_Enhanced_Flush
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Status_Event
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Simple_Pairing_Number
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Keypress_Notification
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Encapsulated_Payload
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Accepted
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMspp_LMP_IO_Capability_Response
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMspp_LMP_IO_Capability_Request
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Accepted
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Supervision_Timeout
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Flush_Link_Buffer
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Flush_Auto_Link_Buffer
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Flush_L2CAP_Packet
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Result_Handler
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_Send_HCI_Event
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Mode_Change_Event
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_QoS_Setup_Complete_Event
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Max_Slots_Change_Event
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Flow_Spec_Complete_Event
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Start_Encryption_Req_Accepted_Ack
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_Simple_Pairing_Complete_Event
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TC_Control_Testmode_Standalone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_config.o(i.LMconfig_Initialise)
</UL>
<P><STRONG><a name="[ff]"></a>HCeg_Hardware_Error_Event</STRONG> (Thumb, 38 bytes, Stack size 64 bytes, hc_event_gen.o(i.HCeg_Hardware_Error_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prevent_HCI_Event_Queue_from_Overfill
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_UART_Rx_Char
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Handle_Expired_Timers
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Get_Rx_Buf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_Dispatcher
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Page
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepareRx
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Process_Rx
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Assign_Piconet_Index
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_Request
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_Assign_AFH_Kernel
</UL>

<P><STRONG><a name="[213]"></a>HCeg_Initialise</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc_event_gen.o(i.HCeg_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_init_After_set_BDADDR
</UL>

<P><STRONG><a name="[2c9]"></a>HCeg_Inquiry_Result_Event</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, hc_event_gen.o(i.HCeg_Inquiry_Result_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Get_Stored_Extended_Inquiry_Response
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint24
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prevent_HCI_Event_Queue_from_Overfill
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Bd_Addr_In_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
</UL>

<P><STRONG><a name="[2c8]"></a>HCeg_Is_Event_Masked_On</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hc_event_gen.o(i.HCeg_Is_Event_Masked_On))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Handle_Incoming_LM_Connection_Request
</UL>

<P><STRONG><a name="[2bf]"></a>HCeg_Loopback_Command_Event</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hc_event_gen.o(i.HCeg_Loopback_Command_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HCeg_Loopback_Command_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC_Command_Dispatcher
</UL>

<P><STRONG><a name="[2ce]"></a>HCeg_Number_Of_Completed_Packets_Event</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, hc_event_gen.o(i.HCeg_Number_Of_Completed_Packets_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HCeg_Number_Of_Completed_Packets_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prevent_HCI_Event_Queue_from_Overfill
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Handle_Host_To_Host_Controller_Flow_Control
</UL>

<P><STRONG><a name="[2c7]"></a>HCeg_Prepare_Command_Complete_Event_Read_Clock_Payload</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, hc_event_gen.o(i.HCeg_Prepare_Command_Complete_Event_Read_Clock_Payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = HCeg_Prepare_Command_Complete_Event_Read_Clock_Payload &rArr; LC_Get_Piconet_Clock_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_ACL_Handle
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Wait_For_us
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Piconet_Clock_Ex
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint32
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
</UL>

<P><STRONG><a name="[2c2]"></a>HCeg_Prevent_HCI_Event_Queue_from_Overfill</STRONG> (Thumb, 38 bytes, Stack size 64 bytes, hc_event_gen.o(i.HCeg_Prevent_HCI_Event_Queue_from_Overfill))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Get_Queue_Number_Of_Entries
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Number_Of_Completed_Packets_Event
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Inquiry_Result_Event
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Status_Event
</UL>

<P><STRONG><a name="[54f]"></a>HCeg_Set_Event_Mask</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hc_event_gen.o(i.HCeg_Set_Event_Mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCeg_Set_Event_Mask
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[2d2]"></a>HCfc_Get_Next_HC_to_Host_Data_Descriptor</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hc_flow_control.o(i.HCfc_Get_Next_HC_to_Host_Data_Descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCfc_Get_Next_HC_to_Host_Data_Descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Dequeue_Next_Data_By_Length
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Dispatch_Pending_Data
</UL>

<P><STRONG><a name="[e5]"></a>HCfc_Handle_Host_To_Host_Controller_Flow_Control</STRONG> (Thumb, 260 bytes, Stack size 72 bytes, hc_flow_control.o(i.HCfc_Handle_Host_To_Host_Controller_Flow_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HCfc_Handle_Host_To_Host_Controller_Flow_Control &rArr; HCeg_Number_Of_Completed_Packets_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Get_Total_Number_Of_Processed_Chunks
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Get_Queue_Number_Of_Processed_Chunks
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reduce_Queue_Number_Of_Processed_Chunks
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Number_Of_Completed_Packets_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[559]"></a>HCfc_Host_Buffer_Size</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hc_flow_control.o(i.HCfc_Host_Buffer_Size))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[2d4]"></a>HCfc_Host_Number_Of_Completed_Packets</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, hc_flow_control.o(i.HCfc_Host_Number_Of_Completed_Packets))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HCfc_Host_Number_Of_Completed_Packets &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Handle
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[214]"></a>HCfc_Initialise</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hc_flow_control.o(i.HCfc_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HCfc_Initialise &rArr; BTtimer_Set_Slots &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Get_Next_Master_Tx_Activity
</UL>

<P><STRONG><a name="[2d5]"></a>HCfc_Release_All_Data_Queue_Packets</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hc_flow_control.o(i.HCfc_Release_All_Data_Queue_Packets))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HCfc_Release_All_Data_Queue_Packets &rArr; BTq_Reset &rArr; BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Disconnect_Acl
</UL>

<P><STRONG><a name="[558]"></a>HCfc_Set_Host_Controller_To_Host_Flow_Control</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hc_flow_control.o(i.HCfc_Set_Host_Controller_To_Host_Flow_Control))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[22a]"></a>HCfc_Set_Host_To_Host_Controller_Flow_Control_Thresholds</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hc_flow_control.o(i.HCfc_Set_Host_To_Host_Controller_Flow_Control_Thresholds))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HCfc_Set_Host_To_Host_Controller_Flow_Control_Thresholds &rArr; BTtimer_Set_Slots &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Get_Next_Master_Tx_Activity
</UL>

<P><STRONG><a name="[2b2]"></a>HMAC</STRONG> (Thumb, 146 bytes, Stack size 484 bytes, lmp_ssp_engine.o(i.HMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 908<LI>Call Chain = HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashConcat
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA_256
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F3
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F2
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F1
</UL>

<P><STRONG><a name="[148]"></a>HW_Get_Bt_Clk_Avoid_Race</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uslc_return_to_piconet.o(i.HW_Get_Bt_Clk_Avoid_Race))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_OS_START_
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_OS_RECONNECTING_
</UL>

<P><STRONG><a name="[133]"></a>HW_Get_Native_Clk_Avoid_Race</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lmp_scan.o(i.HW_Get_Native_Clk_Avoid_Race))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Wait_For_us
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Get_Rx_Buf
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Interval_To_Next_Wakeup
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Get_Interval_To_Periodic_Inq
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Page_Scan_Start
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Inquiry_Scan_Start
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Get_Interval_To_Next_Scan
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Ticks
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Get_Native_Clock
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Activate_AFH
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Switch_Req
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Connection_PDU
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Enter_Park_Mode
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Extract_Sniff_Parameters
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Sniff_Activation_On_Next_Frame
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Reset_Flush_Timeout
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Beacon_Tx
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Adjust_Wakeup_Slot_Time
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Set_Flush_Timeout
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Link_Tx_Activity
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Flush_L2CAP_Packet
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Period_Interval_Timeout
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Complete_Success
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Restore_BT_Clock
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Update_Master_AFH_Piconet
</UL>

<P><STRONG><a name="[120]"></a>HW_get_rx_type</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lslc_slot.o(i.HW_get_rx_type))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM2
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKD_RX_HDR
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Device_Activity
</UL>

<P><STRONG><a name="[542]"></a>HW_get_sleep_status</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uslc_sleep.o(i.HW_get_sleep_status))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
</UL>

<P><STRONG><a name="[4a0]"></a>HW_set_aux_tim_intr_mask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys_power.o(i.HW_set_aux_tim_intr_mask))
<BR><BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Handle_Early_Wakeup
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Halt_System
</UL>

<P><STRONG><a name="[4a7]"></a>HW_set_aux_timer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys_power.o(i.HW_set_aux_timer))
<BR><BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Setup_Sleep_Timer
</UL>

<P><STRONG><a name="[535]"></a>HW_set_bd_addr</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, uslc_page.o(i.HW_set_bd_addr))
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Page
</UL>

<P><STRONG><a name="[c4]"></a>HW_set_rx_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_radio.o(i.HW_set_rx_mode))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Service
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
</UL>

<P><STRONG><a name="[52c]"></a>HW_set_slave</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uslc_master_slave_switch.o(i.HW_set_slave))
<BR><BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
</UL>

<P><STRONG><a name="[c5]"></a>HW_set_use_lf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_radio.o(i.HW_set_use_lf))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Service
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
</UL>

<P><STRONG><a name="[2e8]"></a>HWcodec_Decrease_Volume</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_codec.o(i.HWcodec_Decrease_Volume))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Decrease_Volume
</UL>

<P><STRONG><a name="[2f2]"></a>HWcodec_Increase_Volume</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_codec.o(i.HWcodec_Increase_Volume))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Increase_Volume
</UL>

<P><STRONG><a name="[20f]"></a>HWdelay_Initialise</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_delay.o(i.HWdelay_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = HWdelay_Initialise &rArr; HWdelay_Calibrate_
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Calibrate_
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWradio_Go_To_Idle_State
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_init_After_set_BDADDR
</UL>

<P><STRONG><a name="[2d9]"></a>HWjal_Set_Rst_Code</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hw_lc.o(i.HWjal_Set_Rst_Code))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWlc_Reset
</UL>

<P><STRONG><a name="[20b]"></a>HWlc_Initialise</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, hw_lc.o(i.HWlc_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HWlc_Initialise &rArr; _HWlc_Clear_Jalapeno_Registers
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWlc_Reset
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWlc_Clear_Jalapeno_Registers
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_init_After_set_BDADDR
</UL>

<P><STRONG><a name="[2d7]"></a>HWlc_Reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hw_lc.o(i.HWlc_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HWlc_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWjal_Set_Rst_Code
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWlc_Initialise
</UL>

<P><STRONG><a name="[2f0]"></a>HWradio_Convert_Tx_Power_Level_Units_to_Tx_Power</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_Convert_Tx_Power_Level_Units_to_Tx_Power))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Inquiry_Response_Tx_Power
</UL>

<P><STRONG><a name="[316]"></a>HWradio_Convert_Tx_Power_to_Tx_Power_Level_Units</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_Convert_Tx_Power_to_Tx_Power_Level_Units))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Set_Inquiry_Tx_Power
</UL>

<P><STRONG><a name="[544]"></a>HWradio_Enter_Low_Power_Mode_Request</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_Enter_Low_Power_Mode_Request))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
</UL>

<P><STRONG><a name="[546]"></a>HWradio_Exit_Low_Power_Mode_Request</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_Exit_Low_Power_Mode_Request))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
</UL>

<P><STRONG><a name="[545]"></a>HWradio_Get_Radio_Driver_Status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_Get_Radio_Driver_Status))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
</UL>

<P><STRONG><a name="[2da]"></a>HWradio_Init_Tx_Power_Level</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hw_radio.o(i.HWradio_Init_Tx_Power_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HWradio_Init_Tx_Power_Level
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_BK3000_TX_POWER
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWradio_Go_To_Idle_State
</UL>

<P><STRONG><a name="[20e]"></a>HWradio_Initialise</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hw_radio.o(i.HWradio_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = HWradio_Initialise &rArr; _HWradio_Go_To_Idle_State &rArr; HWdelay_Initialise &rArr; HWdelay_Calibrate_
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWradio_Go_To_Idle_State
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWhab_Init_RF
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_init_After_set_BDADDR
</UL>

<P><STRONG><a name="[475]"></a>HWradio_Read_Background_RSSI</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_Read_Background_RSSI))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_No_Rx_Packet
</UL>

<P><STRONG><a name="[18c]"></a>HWradio_Read_RSSI</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_Read_RSSI))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Process_RSSI
</UL>

<P><STRONG><a name="[20c]"></a>HWradio_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_init_After_set_BDADDR
</UL>

<P><STRONG><a name="[113]"></a>HWradio_RxComplete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_RxComplete))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM3
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKD_RX_HDR
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKD
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_NO_PKT_RCVD
</UL>

<P><STRONG><a name="[128]"></a>HWradio_Setup_Radio_For_Next_Half_Slot</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_Setup_Radio_For_Next_Half_Slot))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM3
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM2
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM1
</UL>

<P><STRONG><a name="[176]"></a>HWradio_Update_Rx_Gain_If_Reqd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_Update_Rx_Gain_If_Reqd))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Enable_Receiver
</UL>

<P><STRONG><a name="[2dd]"></a>ICU_Initial</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, driver_icu.o(i.ICU_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ICU_Initial &rArr; Set_CPU_PLL_clk
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CPU_PLL_clk
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Initialise
</UL>

<P><STRONG><a name="[492]"></a>Initial_config</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, config.o(i.Initial_config))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Initialise
</UL>

<P><STRONG><a name="[2de]"></a>LC_Access_Window_Request</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lc_interface.o(i.LC_Access_Window_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LC_Access_Window_Request &rArr; USLCparkSlave_Access_Window_Request &rArr; USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Access_Window_Request
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Access_Window_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Park_Activity
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Beacon_Tx
</UL>

<P><STRONG><a name="[2e1]"></a>LC_Alloc_AM_ADDR</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Alloc_AM_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LC_Alloc_AM_ADDR &rArr; DL_Alloc_Am_Addr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Alloc_Am_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Execute_Unpark_Request
</UL>

<P><STRONG><a name="[2e3]"></a>LC_Alloc_Link</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Alloc_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LC_Alloc_Link &rArr; DL_Alloc_Link &rArr; DL_Initialise_Link &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Alloc_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Alloc_Link
</UL>

<P><STRONG><a name="[2e4]"></a>LC_Create_Connection</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, lc_interface.o(i.LC_Create_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = LC_Create_Connection &rArr; USLCpage_Request &rArr; LSLCfreq_Assign_Frequency_Kernel &rArr; LSLCafh_Assign_AFH_Kernel &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTaddr_Build_Sync_Word
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Request
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Alloc_Am_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMconnection_Create_ACL_Connection
</UL>

<P><STRONG><a name="[2e7]"></a>LC_Decrease_Volume</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Decrease_Volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LC_Decrease_Volume
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWcodec_Decrease_Volume
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Decrease_Local_Volume
</UL>

<P><STRONG><a name="[2e9]"></a>LC_Force_Context</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Force_Context))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LC_Force_Context
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_get_device_state
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Set_Device_State
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Disconnect_Acl
</UL>

<P><STRONG><a name="[2eb]"></a>LC_Free_Link</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lc_interface.o(i.LC_Free_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LC_Free_Link &rArr; LSLCcls_Initialise &rArr; LSLCcls_Record_Device_Channel_Map &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Get_Active_Procedure
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Set_Saved_Device_State
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Set_Device_State
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Local_Piconet_Request
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCcls_Initialise
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Free_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Free_Link
</UL>

<P><STRONG><a name="[16d]"></a>LC_Get_Device_FHS_Ref</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lc_interface.o(i.LC_Get_Device_FHS_Ref))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Write_Scan_Activity
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Page_Scan_Start
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Page
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_FHS_Payload_Ex
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpage_Setup_DL_to_CAC
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_FHS
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Cancel
</UL>

<P><STRONG><a name="[2ef]"></a>LC_Get_Inquiry_Response_Tx_Power</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Get_Inquiry_Response_Tx_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LC_Get_Inquiry_Response_Tx_Power
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Convert_Tx_Power_Level_Units_to_Tx_Power
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[55a]"></a>LC_Get_Local_EIR</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lc_interface.o(i.LC_Get_Local_EIR))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[45e]"></a>LC_Get_Local_EIR_Length</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lc_interface.o(i.LC_Get_Local_EIR_Length))
<BR><BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_EIR_Payload
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_FHS
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinqScan_Generate_FHS
</UL>

<P><STRONG><a name="[480]"></a>LC_Get_Local_EIR_Packet_Type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lc_interface.o(i.LC_Get_Local_EIR_Packet_Type))
<BR><BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_EIR
</UL>

<P><STRONG><a name="[45f]"></a>LC_Get_Local_EIR_Payload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lc_interface.o(i.LC_Get_Local_EIR_Payload))
<BR><BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_EIR_Payload
</UL>

<P><STRONG><a name="[2d0]"></a>LC_Get_Piconet_Clock_Ex</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, lc_interface.o(i.LC_Get_Piconet_Clock_Ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LC_Get_Piconet_Clock_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Get_Active_Procedure
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Wait_For_us
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Interval_To_Next_Wakeup
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prepare_Command_Complete_Event_Read_Clock_Payload
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Modify_Beacon
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Switch_Req
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Connection_PDU
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Enter_Park_Mode
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Extract_Sniff_Parameters
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Derive_Sniff_Parameters
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Derive_Park_Parameters
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_Get_Search_Window_Frames
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Tx_Activity
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Park_Activity
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Device_Activity
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Adjust_Wakeup_Slot_Time
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Slave_Sniff_Activity
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Enter_Sniff_Mode
</UL>

<P><STRONG><a name="[2f1]"></a>LC_Increase_Volume</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Increase_Volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LC_Increase_Volume
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWcodec_Increase_Volume
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Increase_Local_Volume
</UL>

<P><STRONG><a name="[216]"></a>LC_Initialise</STRONG> (Thumb, 474 bytes, Stack size 32 bytes, lc_interface.o(i.LC_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = LC_Initialise &rArr; DL_Initialise_All &rArr; DL_Initialise_Link &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTaddr_Build_Sync_Word
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Initialise
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Initialise
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Build_Frequency_Table
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Initialise
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Initialise
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCstat_Setup_Packet_Log
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Initialise
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCcls_Initialise
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCclk_Initialise
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_Initialise
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Initialise
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Initialise_All
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHS_Set_Device_Class
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_init_After_set_BDADDR
</UL>

<P><STRONG><a name="[2fc]"></a>LC_Inquiry_Cancel</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Inquiry_Cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LC_Inquiry_Cancel
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Inquiry_Cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Cancel
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Exit_Periodic_Inquiry_Mode
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Result_Handler
</UL>

<P><STRONG><a name="[2fe]"></a>LC_Inquiry_Request</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lc_interface.o(i.LC_Inquiry_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LC_Inquiry_Request &rArr; USLCinq_Inquiry_Request &rArr; LSLChop_Build_Frequency_Table &rArr; _LSLChop_Execute_HSE_Non_Connection
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Inquiry_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Start
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Period_Interval_Timeout
</UL>

<P><STRONG><a name="[300]"></a>LC_Inquiry_Scan_Cancel</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Inquiry_Scan_Cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LC_Inquiry_Scan_Cancel &rArr; USLCinqScan_Cancel &rArr; USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Write_Scan_Enable
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTtst_Enter_Local_Loopback
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Write_Scan_Activity
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LMP_Test_Activate
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Beacon_Tx
</UL>

<P><STRONG><a name="[301]"></a>LC_Inquiry_Scan_Request</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Inquiry_Scan_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LC_Inquiry_Scan_Request &rArr; USLCinqScan_Request &rArr; USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Inquiry_Scan_Start
</UL>

<P><STRONG><a name="[303]"></a>LC_Is_Sleep_Possible</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Is_Sleep_Possible))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LC_Is_Sleep_Possible &rArr; USLCchac_Is_Sleep_Possible
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Is_Sleep_Possible
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Sleep
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Sleep
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Complete_Success
</UL>

<P><STRONG><a name="[12]"></a>LC_Null_Callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lc_interface.o(i.LC_Null_Callback))
<BR>[Address Reference Count : 1]<UL><LI> lc_interface.o(i.LC_Reset_All_Callbacks)
</UL>
<P><STRONG><a name="[305]"></a>LC_Page_Cancel</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Page_Cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LC_Page_Cancel &rArr; USLCpage_Cancel
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Read_Remote_Name_Cancel
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Cancel
</UL>

<P><STRONG><a name="[307]"></a>LC_Page_Scan_Cancel</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Page_Scan_Cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LC_Page_Scan_Cancel
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Write_Scan_Enable
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTtst_Enter_Local_Loopback
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Write_Scan_Activity
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LMP_Test_Activate
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Beacon_Tx
</UL>

<P><STRONG><a name="[309]"></a>LC_Page_Scan_Request</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Page_Scan_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = LC_Page_Scan_Request &rArr; USLCpageScan_Request &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Page_Scan_Start
</UL>

<P><STRONG><a name="[30b]"></a>LC_Park_Request</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lc_interface.o(i.LC_Park_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LC_Park_Request &rArr; USLCparkSlave_Park_Request &rArr; USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Park_Request
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Park_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Enter_Park_Mode
</UL>

<P><STRONG><a name="[30e]"></a>LC_Read_Clock_Offset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Read_Clock_Offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LC_Read_Clock_Offset
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LM_Clock_Offset_Req
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LMP_Clock_Offset_Req
</UL>

<P><STRONG><a name="[554]"></a>LC_Read_Local_Device_Class</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lc_interface.o(i.LC_Read_Local_Device_Class))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[30f]"></a>LC_Read_Local_Device_Drift</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Read_Local_Device_Drift))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LC_Read_Local_Device_Drift
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LMP_Timing_Accuracy_Req
</UL>

<P><STRONG><a name="[310]"></a>LC_Read_Local_Device_Jitter</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Read_Local_Device_Jitter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LC_Read_Local_Device_Jitter
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LMP_Timing_Accuracy_Req
</UL>

<P><STRONG><a name="[311]"></a>LC_Read_Local_Slot_Offset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Read_Local_Slot_Offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LC_Read_Local_Slot_Offset
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Connection_PDU
</UL>

<P><STRONG><a name="[387]"></a>LC_Register_Event_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lc_interface.o(i.LC_Register_Event_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Initialise
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Initialise
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Initialise
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Initialise
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Initialise
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Initialise
</UL>

<P><STRONG><a name="[185]"></a>LC_Report_Device_Activity</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lc_interface.o(i.LC_Report_Device_Activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LC_Report_Device_Activity
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Process_Rx_Header
</UL>

<P><STRONG><a name="[330]"></a>LC_Reset_All_Callbacks</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lc_interface.o(i.LC_Reset_All_Callbacks))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Initialise
</UL>

<P><STRONG><a name="[312]"></a>LC_Restore_Piconet</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Restore_Piconet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LC_Restore_Piconet
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Local_Piconet_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Inquiry_Scan
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Cancel
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Accepted
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Disconnect_Acl
</UL>

<P><STRONG><a name="[313]"></a>LC_Role_Switch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Role_Switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LC_Role_Switch &rArr; USLCmss_Request &rArr; USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Switch_Timeout
</UL>

<P><STRONG><a name="[315]"></a>LC_Set_Inquiry_Tx_Power</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Set_Inquiry_Tx_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LC_Set_Inquiry_Tx_Power
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Convert_Tx_Power_to_Tx_Power_Level_Units
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[317]"></a>LC_Set_Local_EIR</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lc_interface.o(i.LC_Set_Local_EIR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LC_Set_Local_EIR
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via BLX)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[318]"></a>LC_Set_PTT_ACL</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Set_PTT_ACL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LC_Set_PTT_ACL
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Testmode_Request
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Test_Transmitter
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Packet_Type_Table_Req_Accepted_Ack
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Testmode_Change_Settings
</UL>

<P><STRONG><a name="[319]"></a>LC_Sleep</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lc_interface.o(i.LC_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = LC_Sleep &rArr; USLCsleep_Request &rArr; USLCsleep_State_Dispatcher &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Get_Active_Procedure
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Sleep
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Sleep
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Complete_Success
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Standby_Low_Power_Timeout
</UL>

<P><STRONG><a name="[31b]"></a>LC_Unpark_Commit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Unpark_Commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LC_Unpark_Commit
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Get_Active_Procedure
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Unpark_Commit
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Unpark_Commit
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Accepted
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Exit_Park_Mode_Complete_Handler
</UL>

<P><STRONG><a name="[31e]"></a>LC_Unpark_Request</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lc_interface.o(i.LC_Unpark_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LC_Unpark_Request &rArr; USLCparkMaster_Unpark_Request &rArr; DL_Unpark &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Unpark_Request
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Unpark_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Park_Activity
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Beacon_Tx
</UL>

<P><STRONG><a name="[321]"></a>LC_Unpark_Rollback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Unpark_Rollback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LC_Unpark_Rollback
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Get_Active_Procedure
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Unpark_Rollback
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Unpark_Rollback
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Exit_Park_Mode_Complete_Handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Unpark_Timeout
</UL>

<P><STRONG><a name="[324]"></a>LC_Wakeup</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lc_interface.o(i.LC_Wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = LC_Wakeup &rArr; USLCr2p_Request &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_Get_Search_Window_Frames
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Return_From_Sniff
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Park_Activity
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Slave_Sniff_Activity
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TC_Control_Testmode_Standalone
</UL>

<P><STRONG><a name="[326]"></a>LC_Write_Device_Drift</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Write_Device_Drift))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LC_Write_Device_Drift
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LMP_Timing_Accuracy_Res
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LMP_Not_Accepted
</UL>

<P><STRONG><a name="[327]"></a>LC_Write_Device_Jitter</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Write_Device_Jitter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LC_Write_Device_Jitter
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LMP_Timing_Accuracy_Res
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LMP_Not_Accepted
</UL>

<P><STRONG><a name="[328]"></a>LC_Write_Local_Device_Class</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Write_Local_Device_Class))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LC_Write_Local_Device_Class
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHS_Set_Device_Class
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[329]"></a>LC_Write_Remote_Slot_Offset</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Write_Remote_Slot_Offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LC_Write_Remote_Slot_Offset
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LMP_Slot_Offset
</UL>

<P><STRONG><a name="[32a]"></a>LMPafh_Request_Classification_Reporting</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lmp_afh.o(i.LMPafh_Request_Classification_Reporting))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = LMPafh_Request_Classification_Reporting &rArr; LM_Encode_LMP_PDU_Fully_Encoded &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU_Fully_Encoded
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSconfig_Is_Feature_Supported
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Activate_AFH
</UL>

<P><STRONG><a name="[32d]"></a>LM_Encode_LMP_Accepted_PDU</STRONG> (Thumb, 30 bytes, Stack size 64 bytes, lmp_encode_pdu.o(i.LM_Encode_LMP_Accepted_PDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LM_Encode_LMP_Accepted_PDU &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Accept
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Sniff_Req
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Park_Req
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LMP_Test_Control
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LMP_Test_Activate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Switch_Req
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Not_Accepted
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Handle_Incoming_LM_Connection_Request
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Success
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Failure
</UL>

<P><STRONG><a name="[32e]"></a>LM_Encode_LMP_Not_Accepted_Ext_PDU</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, lmp_encode_pdu.o(i.LM_Encode_LMP_Not_Accepted_Ext_PDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LM_Encode_LMP_Not_Accepted_Ext_PDU &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Command_Dispatcher
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMspp_LMP_IO_Capability_Response
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMspp_LMP_IO_Capability_Request
</UL>

<P><STRONG><a name="[32f]"></a>LM_Encode_LMP_Not_Accepted_PDU</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, lmp_encode_pdu.o(i.LM_Encode_LMP_Not_Accepted_PDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LM_Encode_LMP_Not_Accepted_PDU &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Command_Dispatcher
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Reject
</UL>

<P><STRONG><a name="[234]"></a>LM_Encode_LMP_PDU</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, lmp_encode_pdu.o(i.LM_Encode_LMP_PDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_IO_Capability_Request_Negative_Reply
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Write_Supervision_Timeout
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_QOS_Setup
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Flow_Specification
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Exit_Sniff_Mode
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LM_Clock_Offset_Req
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Read_Remote_Version
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_LMP_Send_Test_Control
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_LMP_Send_Test_Activate
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Quality_of_Service_Req
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Max_Slot_Req
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Unsniff_Req
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LMP_Timing_Accuracy_Req
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LMP_Clock_Offset_Req
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LMP_Version_Req
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_Not_Accepted_Ext_PDU
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Encryption_Key_Size_Mask_Req
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Send_LMP_Preferred_Rate
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Auto_Rate
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LM_Timing_Accuracy_Req
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU_Fully_Encoded
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_Not_Accepted_PDU
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_Accepted_PDU
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Send_LMP_Detach
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Name_Req
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Name_Req
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Connection_PDU
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Execute_Park_Request
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Exit_Park_Mode_Complete_Handler
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Adjust_Peer_Packet_Type
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Message
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Set_Broadcast_Scan_Window
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Execute_Unpark_Request
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Sniff_Req
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Not_Accepted
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Encryption_Key_Size_Mask_Res
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Accepted
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Max_Slot_Req
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Send_Encryption_Key_Size_Mask_Req
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Not_Accepted
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Accepted
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMspp_Send_LMP_Encapsulated_Payload
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_LMP_DH_Key_Check
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMspp_Send_LMP_Encapsulated_Header
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Simple_Pairing_Number
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Simple_Pairing_Confirm
</UL>

<P><STRONG><a name="[32c]"></a>LM_Encode_LMP_PDU_Fully_Encoded</STRONG> (Thumb, 20 bytes, Stack size 64 bytes, lmp_encode_pdu.o(i.LM_Encode_LMP_PDU_Fully_Encoded))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LM_Encode_LMP_PDU_Fully_Encoded &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_Keypress_Notification
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Passkey_Request_Negative_Reply
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Confirmation_Request_Negative_Reply
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_IO_Capability_Request_Reply
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Pause_Encryption_Req
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Features_Res_Ext
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Features_Req_Ext
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Report_Slave_Channel_Classification
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMPafh_Request_Classification_Reporting
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Update_Slave_AFH_If_Required
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Resume_Encryption_Req
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_LMP_OOB_Failed
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_LMP_IO_Capability_Response
</UL>

<P><STRONG><a name="[22]"></a>LM_Encode_Msg_Timeout</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lmp_encode_pdu.o(i.LM_Encode_Msg_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = LM_Encode_Msg_Timeout &rArr; LMdisp_LMP_Not_Accepted_Ext &rArr; LMdisp_LMP_Not_Accepted_Common &rArr; LMconnection_LMP_Not_Accepted &rArr; LMsec_peer_Resume_Encryption &rArr; _Start_Encryption &rArr; _Generate_Encryption_Key &rArr; LM_SecEng_Generate_Key_E3 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Not_Accepted_Ext
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Not_Accepted
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Disconnect_Acl
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lmp_ch.o(i.LMconnection_LM_Incoming_Link_Inf)
<LI> lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
</UL>
<P><STRONG><a name="[212]"></a>LM_Initialise</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lmp_init.o(i.LM_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = LM_Initialise &rArr; LMconfig_Initialise &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Initialise
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Initialise
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Initialise
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Initialise
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Initialise
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Initialise
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Initialise
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Initialise
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMkeydb_Initialise
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Initialise
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMfltr_Initialise
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Initialise
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Reset_All_Callbacks
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_Initialise
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_init_After_set_BDADDR
</UL>

<P><STRONG><a name="[33e]"></a>LM_SecEng_Authenticate_E1</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, lmp_sec_engine.o(i.LM_SecEng_Authenticate_E1))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = LM_SecEng_Authenticate_E1 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Keyed_Hash
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Array_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Response
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Challenge
</UL>

<P><STRONG><a name="[341]"></a>LM_SecEng_Generate_Kc_Prime</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, lmp_sec_engine.o(i.LM_SecEng_Generate_Kc_Prime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LM_SecEng_Generate_Kc_Prime &rArr; _Mod2_Multiply_Kc
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Mod2_Reduce_Kc
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Mod2_Multiply_Kc
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Array_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Generate_Encryption_Key
</UL>

<P><STRONG><a name="[344]"></a>LM_SecEng_Generate_Key_E21</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, lmp_sec_engine.o(i.LM_SecEng_Generate_Key_E21))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = LM_SecEng_Generate_Key_E21 &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Safer_Plus_Encrypt
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Array_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Create_New_Unit_Key
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_CombKey_Setup
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Complete_CombKey_Setup
</UL>

<P><STRONG><a name="[346]"></a>LM_SecEng_Generate_Key_E22</STRONG> (Thumb, 146 bytes, Stack size 80 bytes, lmp_sec_engine.o(i.LM_SecEng_Generate_Key_E22))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = LM_SecEng_Generate_Key_E22 &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Safer_Plus_Encrypt
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Array_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Pin_Code_Request_Reply
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Master_Link_Key
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Temp_Rand
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_In_Rand
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Accepted
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Change_To_Temporary_Key
</UL>

<P><STRONG><a name="[347]"></a>LM_SecEng_Generate_Key_E3</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lmp_sec_engine.o(i.LM_SecEng_Generate_Key_E3))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = LM_SecEng_Generate_Key_E3 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Keyed_Hash
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Generate_Encryption_Key
</UL>

<P><STRONG><a name="[396]"></a>LMacl_Get_Current_Key_Persistance</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lmp_acl_connection.o(i.LMacl_Get_Current_Key_Persistance))
<BR><BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Set_Connection_Encryption
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Master_Link_Key
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Change_Connection_Link_Key
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Start_Encryption_Req
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Sres
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Encryption_Mode_Req
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Encryption_Key_Size_Req
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Au_Rand
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Accepted
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Switch_Req
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_Send_HCI_Event
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Set_Encryption
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Response
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Challenge
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Start_Encryption
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Generate_Encryption_Key
</UL>

<P><STRONG><a name="[426]"></a>LMacl_Get_Previous_Key_Persistance</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lmp_acl_connection.o(i.LMacl_Get_Previous_Key_Persistance))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_TimeoutHandler
</UL>

<P><STRONG><a name="[348]"></a>LMacl_Initialise</STRONG> (Thumb, 622 bytes, Stack size 20 bytes, lmp_acl_connection.o(i.LMacl_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LMacl_Initialise
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Set_Key_Persistance
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Alloc_Link
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Initialise
</UL>

<P><STRONG><a name="[349]"></a>LMacl_Set_Key_Persistance</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lmp_acl_connection.o(i.LMacl_Set_Key_Persistance))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Initialise
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Use_Semi_Permanent_Key
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Temp_Key
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Accepted
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_TimeoutHandler
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Change_To_Temporary_Key
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Change_To_Semi_Permanent_Key
</UL>

<P><STRONG><a name="[34a]"></a>LMacl_Write_Bd_Addr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lmp_acl_connection.o(i.LMacl_Write_Bd_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMacl_Write_Bd_Addr
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Incoming_Link_Inf
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMconnection_Create_ACL_Connection
</UL>

<P><STRONG><a name="[34b]"></a>LMacl_Write_CombKey_Part</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lmp_acl_connection.o(i.LMacl_Write_CombKey_Part))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LMacl_Write_CombKey_Part &rArr; LMutils_Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_CombKey_Setup
</UL>

<P><STRONG><a name="[34c]"></a>LMaclctr_Alloc_Link</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lmp_acl_container.o(i.LMaclctr_Alloc_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = LMaclctr_Alloc_Link &rArr; LC_Alloc_Link &rArr; DL_Alloc_Link &rArr; DL_Initialise_Link &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Initialise
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Alloc_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTtst_Enter_Local_Loopback
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Write_Scan_Activity
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Page_Scan_Start
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMconnection_Create_ACL_Connection
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TC_Control_Testmode_Standalone
</UL>

<P><STRONG><a name="[2cf]"></a>LMaclctr_Find_ACL_Handle</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lmp_acl_container.o(i.LMaclctr_Find_ACL_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LMaclctr_Find_ACL_Handle &rArr; LMaclctr_Find_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prepare_Command_Complete_Event_Read_Clock_Payload
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Local_Status_Command
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Policy_Command
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[3f8]"></a>LMaclctr_Find_ARADDR</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lmp_acl_container.o(i.LMaclctr_Find_ARADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMaclctr_Find_ARADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Slave_Init_Unpark
</UL>

<P><STRONG><a name="[34d]"></a>LMaclctr_Find_Bd_Addr</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lmp_acl_container.o(i.LMaclctr_Find_Bd_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LMaclctr_Find_Bd_Addr &rArr; LMutils_Bd_Addr_Match
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Bd_Addr_Match
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Peer_Bd_Addr
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Pin_Code_Request_Reply
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Pin_Code_Request_Negative_Reply
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Link_Key_Request_Reply
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Link_Key_Request_Negative_Reply
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMkeydb_LM_Delete_Stored_Link_Key
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Read_Remote_Name
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Reject
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Cancel
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Accept
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMconnection_Validate_ACL_Admission
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_SyncWord
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Radio_Power
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Radio_Power
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TC_Control_Testmode_Standalone
</UL>

<P><STRONG><a name="[13c]"></a>LMaclctr_Find_Device_Index</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lmp_acl_container.o(i.LMaclctr_Find_Device_Index))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Dispatch_Pending_Data
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Command_Dispatcher
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Incoming_Link_Inf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Switch_Role_Complete
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Packet_Type_Table_Req_Accepted_Ack
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Detach_Ack
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Enter_Park_Mode_Complete_Handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Sniff_Activation_On_Next_Frame
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Tx_Activity
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Rx_Activity
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Device_Activity
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Adjust_Wakeup_Slot_Time
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Ack_Last_Tx_Packet
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Tx_Activity
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_PeerData_Tx_Stop_Callback
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_PeerData_Tx_Go_Callback
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Enable_Rx_Encryption
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Unsniff_Req_Accepted_Ack
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Unpark_Pmaddr_Accepted_Ack
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Sniff_Req_Accepted_Ack
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Park_Accepted_Ack
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Enter_Sniff_Mode
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Get_Emergency_Poll_Activity
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LMP_Set_AFH_Ack
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LMP_Channel_Classification_Ack
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Is_Assessment_State
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Check_Link_Flow_Specification
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Stop_Encryption_Req_Accepted_Ack
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Start_Encryption_Req_Accepted_Ack
</UL>

<P><STRONG><a name="[233]"></a>LMaclctr_Find_Handle</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lmp_acl_container.o(i.LMaclctr_Find_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMaclctr_Find_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtst_Write_Loopback_Mode
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Get_Rx_Buf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_ACL_Handle
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Validate_Change_Packet_Type
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Change_Validated_Packet_Type
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMkeydb_LM_Delete_Stored_Link_Key
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Disconnect_Req
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Host_Number_Of_Completed_Packets
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_LMP_Send_Test_Control
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_LMP_Send_Test_Activate
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Beacon_Tx
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Send_Encryption_Key_Size_Mask_Req
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Remote_Timing_Information
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Raw_RSSI
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Increase_Remote_Power
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Decrease_Remote_Power
</UL>

<P><STRONG><a name="[34f]"></a>LMaclctr_Find_Peer_Bd_Addr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lmp_acl_container.o(i.LMaclctr_Find_Peer_Bd_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LMaclctr_Find_Peer_Bd_Addr &rArr; LMaclctr_Find_Bd_Addr &rArr; LMutils_Bd_Addr_Match
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Bd_Addr_Match
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Bd_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Policy_Command
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[244]"></a>LMaclctr_Free_Link</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, lmp_acl_container.o(i.LMaclctr_Free_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LMaclctr_Free_Link &rArr; LC_Free_Link &rArr; LSLCcls_Initialise &rArr; LSLCcls_Record_Device_Channel_Map &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Clean_On_Detach
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Free_Link
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Write_Scan_Enable
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtst_Write_Loopback_Mode
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Write_Scan_Activity
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Page_Scan_Complete
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Read_Remote_Name_Cancel
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Cancel
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Page_Complete_ERROR
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Disconnect_Acl
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMconnection_Create_ACL_Connection
</UL>

<P><STRONG><a name="[331]"></a>LMaclctr_Initialise</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lmp_acl_container.o(i.LMaclctr_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LMaclctr_Initialise &rArr; LMacl_Initialise
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Initialise
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Initialise
</UL>

<P><STRONG><a name="[352]"></a>LMafh_Activate_AFH</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lmp_afh.o(i.LMafh_Activate_AFH))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = LMafh_Activate_AFH &rArr; LMafh_Update_Master_AFH_Piconet &rArr; LMafh_Update_Slave_AFH_If_Required &rArr; LM_Encode_LMP_PDU_Fully_Encoded &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Update_Master_AFH_Piconet
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMPafh_Request_Classification_Reporting
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMafh_Set_AFH_Instant
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Update_Slave_AFH_If_Required
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Event
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Accepted
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Success
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Failure
</UL>

<P><STRONG><a name="[355]"></a>LMafh_Deactivate_AFH</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lmp_afh.o(i.LMafh_Deactivate_AFH))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LMafh_Deactivate_AFH
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCcls_Initialise_Slave_Channel_Classification
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Disconnect_Acl
</UL>

<P><STRONG><a name="[33d]"></a>LMafh_Initialise</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lmp_afh.o(i.LMafh_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LMafh_Initialise &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memset8
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy8
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Initialise_Classification
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Initialise
</UL>

<P><STRONG><a name="[359]"></a>LMafh_Initialise_Classification</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lmp_afh.o(i.LMafh_Initialise_Classification))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMafh_Initialise_Classification
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memset8
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Initialise
</UL>

<P><STRONG><a name="[35a]"></a>LMafh_Is_AFH_Change_Pending</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lmp_afh.o(i.LMafh_Is_AFH_Change_Pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMafh_Is_AFH_Change_Pending
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_Get_Frequency_Channel
</UL>

<P><STRONG><a name="[35b]"></a>LMafh_Is_Classification_Reporting</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lmp_afh.o(i.LMafh_Is_Classification_Reporting))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMafh_Is_Classification_Reporting
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Is_Assessment_State
</UL>

<P><STRONG><a name="[a3]"></a>LMafh_LMP_Channel_Classification</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lmp_afh.o(i.LMafh_LMP_Channel_Classification))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LMafh_LMP_Channel_Classification &rArr; LSLCcls_Record_Slave_Channel_Classification &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCcls_Record_Slave_Channel_Classification
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[15]"></a>LMafh_LMP_Channel_Classification_Ack</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lmp_afh.o(i.LMafh_LMP_Channel_Classification_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LMafh_LMP_Channel_Classification_Ack &rArr; LMtmr_Reset_Timer &rArr; LMtmr_Enlist_Timer
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Reset_Timer
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
</UL>
<P><STRONG><a name="[a2]"></a>LMafh_LMP_Channel_Classification_Req</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lmp_afh.o(i.LMafh_LMP_Channel_Classification_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = LMafh_LMP_Channel_Classification_Req &rArr; LMafh_Start_Classification_Reporting &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Stop_Classification_Reporting
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Start_Classification_Reporting
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCcls_Record_Device_Channel_Map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>LMafh_LMP_Set_AFH</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lmp_afh.o(i.LMafh_LMP_Set_AFH))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LMafh_LMP_Set_AFH &rArr; LSLCafh_set_AFH &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSconfig_Is_Feature_Supported
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_set_AFH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[18]"></a>LMafh_LMP_Set_AFH_Ack</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lmp_afh.o(i.LMafh_LMP_Set_AFH_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMafh_LMP_Set_AFH_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Enable_L2CAP_Traffic
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_Process_Baseband_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_Get_Frequency_Channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
</UL>
<P><STRONG><a name="[470]"></a>LMafh_LM_Read_AFH_Channel_Assessment_Mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmp_afh.o(i.LMafh_LM_Read_AFH_Channel_Assessment_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Handle_Assessments
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_Rx_RSSI_Channel
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_Rx_HEC_Event_Channel
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_Rx_CRC_Event_Channel
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_No_Rx_Packet
</UL>

<P><STRONG><a name="[363]"></a>LMafh_LM_Set_AFH_Channel_Classification</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lmp_afh.o(i.LMafh_LM_Set_AFH_Channel_Classification))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LMafh_LM_Set_AFH_Channel_Classification &rArr; LSLCafh_Count_1_Bits
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_Count_1_Bits
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[365]"></a>LMafh_LM_Write_AFH_Channel_Assessment_Mode</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lmp_afh.o(i.LMafh_LM_Write_AFH_Channel_Assessment_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LMafh_LM_Write_AFH_Channel_Assessment_Mode &rArr; LSLCcls_Record_Device_Channel_Map &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSconfig_Is_Feature_Supported
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCcls_Record_Device_Channel_Map
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Initialise_Device_Channel_Assessment
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[24]"></a>LMafh_Report_Slave_Channel_Classification</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lmp_afh.o(i.LMafh_Report_Slave_Channel_Classification))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = LMafh_Report_Slave_Channel_Classification &rArr; LM_Encode_LMP_PDU_Fully_Encoded &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Reset_Timer
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU_Fully_Encoded
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCcls_Build_Channel_Classification
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_afh.o(i.LMafh_Start_Classification_Reporting)
</UL>
<P><STRONG><a name="[4e4]"></a>LMafh_Set_AFH_Control_Byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmp_afh.o(i.LMafh_Set_AFH_Control_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[46b]"></a>LMafh_Set_Device_Channel_Map_Update_Notification</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lmp_afh.o(i.LMafh_Set_Device_Channel_Map_Update_Notification))
<BR><BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Device_Update_Notification
</UL>

<P><STRONG><a name="[46a]"></a>LMafh_Set_Request_Channel_Classification</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lmp_afh.o(i.LMafh_Set_Request_Channel_Classification))
<BR><BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Device_Update_Notification
</UL>

<P><STRONG><a name="[35e]"></a>LMafh_Start_Classification_Reporting</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lmp_afh.o(i.LMafh_Start_Classification_Reporting))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LMafh_Start_Classification_Reporting &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Reset_Timer
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LMP_Channel_Classification_Req
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Failure
</UL>

<P><STRONG><a name="[35f]"></a>LMafh_Stop_Classification_Reporting</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lmp_afh.o(i.LMafh_Stop_Classification_Reporting))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LMafh_Stop_Classification_Reporting &rArr; LMtmr_Clear_Timer &rArr; LMtmr_Delist_Timer
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LMP_Channel_Classification_Req
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Switch_Timeout
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Disconnect_Acl
</UL>

<P><STRONG><a name="[23]"></a>LMafh_Update_Master_AFH_Piconet</STRONG> (Thumb, 388 bytes, Stack size 72 bytes, lmp_afh.o(i.LMafh_Update_Master_AFH_Piconet))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = LMafh_Update_Master_AFH_Piconet &rArr; LMafh_Update_Slave_AFH_If_Required &rArr; LM_Encode_LMP_PDU_Fully_Encoded &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_get_device_state
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Reset_Timer
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCcls_Build_Channel_Map
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_set_AFH
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMafh_Get_AFH_Instant
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMafh_Set_AFH_Instant
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Update_Slave_AFH_If_Required
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Activate_AFH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_afh.o(i.LMafh_Initialise)
</UL>
<P><STRONG><a name="[11]"></a>LMch_CB_Enable_L2CAP_Traffic</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lmp_ch.o(i.LMch_CB_Enable_L2CAP_Traffic))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMch_CB_Enable_L2CAP_Traffic
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc_event_gen.o(i.HCeg_Generate_Event)
</UL>
<P><STRONG><a name="[36b]"></a>LMch_Disable_L2CAP_Traffic</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lmp_ch.o(i.LMch_Disable_L2CAP_Traffic))
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Pause_Encryption_Req
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_HCI_Flush
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Switch_Role
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Pause_Encryption_Req
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Encryption_Mode_Req
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Park_Req
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Accepted
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_Encryption
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Disconnect
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Switch_Req
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Setup_Complete
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Detach
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Execute_Park_Request
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Rx_Activity
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Flush_Link_Buffer
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Flush_Auto_Link_Buffer
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Ack_Last_Tx_Packet
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Link_Tx_Activity
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Flush_L2CAP_Packet
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Set_Encryption
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Update_Slave_AFH_If_Required
</UL>

<P><STRONG><a name="[361]"></a>LMch_Enable_L2CAP_Traffic</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lmp_ch.o(i.LMch_Enable_L2CAP_Traffic))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Scan_All_Links_For_Pending_Flushes
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Not_Accepted
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Accepted
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Park_Req
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Not_Accepted
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Accepted
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Event
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Switch_Role_Complete
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Packet_Type_Table_Req_Accepted_Ack
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Not_Accepted
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Unpark_Pmaddr_Accepted_Ack_Hanlder
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Flush_Link_Buffer
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Flush_Auto_Link_Buffer
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Flush_L2CAP_Packet
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_TimeoutHandler
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Set_Encryption_Complete
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Mode_Change_Event
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LMP_Set_AFH_Ack
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Update_Slave_AFH_If_Required
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Start_Encryption_Req_Accepted_Ack
</UL>

<P><STRONG><a name="[55c]"></a>LMch_Send_LMP_Packet_Type_Table_Req</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lmp_ch.o(i.LMch_Send_LMP_Packet_Type_Table_Req))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[237]"></a>LMconfig_Change_Default_Pkt_Type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmp_config.o(i.LMconfig_Change_Default_Pkt_Type))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_LMP_Send_Test_Control
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Default_Packet_Type
</UL>

<P><STRONG><a name="[4fe]"></a>LMconfig_Get_Default_Pkt_Type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmp_config.o(i.LMconfig_Get_Default_Pkt_Type))
<BR><BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Default_Packet_Type
</UL>

<P><STRONG><a name="[333]"></a>LMconfig_Initialise</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, lmp_config.o(i.LMconfig_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LMconfig_Initialise &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Initialise
</UL>

<P><STRONG><a name="[3b8]"></a>LMconfig_LMP_Not_Accepted</STRONG> (Thumb, 40 bytes, Stack size 64 bytes, lmp_config.o(i.LMconfig_LMP_Not_Accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LMconfig_LMP_Not_Accepted
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Not_Accepted_Common
</UL>

<P><STRONG><a name="[87]"></a>LMconfig_LMP_Version_Req</STRONG> (Thumb, 38 bytes, Stack size 64 bytes, lmp_config.o(i.LMconfig_LMP_Version_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LMconfig_LMP_Version_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>LMconfig_LMP_Version_Res</STRONG> (Thumb, 58 bytes, Stack size 72 bytes, lmp_config.o(i.LMconfig_LMP_Version_Res))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LMconfig_LMP_Version_Res
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[552]"></a>LMconfig_LM_Change_Local_Name</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lmp_config.o(i.LMconfig_LM_Change_Local_Name))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[350]"></a>LMconfig_LM_Clear_Device_State</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lmp_acl_container.o(i.LMconfig_LM_Clear_Device_State))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Free_Link
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Read_Remote_Name_Cancel
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Cancel
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Not_Accepted
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Accepted
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Clear_Link_If_Parked
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Decr_Links_In_Low_Power
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Switch_Role_Complete
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Page_Complete
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Setup_Complete
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Not_Accepted
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Detach
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Disconnect_Acl
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Remote_Name_Request_Complete_Event
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Read_Remote_Name_Cancel_Command_Complete_Event
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Create_Connection_Cancel_Command_Complete_Event
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Connection_Complete_Event_ACL
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMconnection_Create_ACL_Connection
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Success
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Enter_Park_Mode
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Exit_Park_Mode_Complete_Handler
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Slave_Sniff_Activity
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Master_Sniff_Activity
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Complete_Success
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Unpark_Timeout
</UL>

<P><STRONG><a name="[389]"></a>LMconfig_LM_Connected_As_SCO_Master</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lmp_ch.o(i.LMconfig_LM_Connected_As_SCO_Master))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Accepted
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Connection_PDU
</UL>

<P><STRONG><a name="[36e]"></a>LMconfig_LM_Connected_As_Scatternet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lmp_scan.o(i.LMconfig_LM_Connected_As_Scatternet))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Get_Interval_To_Next_Scan
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Page_Scans_Allowed
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Inquiry_Scans_Allowed
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Return_From_Sniff
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Extract_Sniff_Parameters
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Derive_Sniff_Parameters
</UL>

<P><STRONG><a name="[36d]"></a>LMconfig_LM_Inquiry_Scans_Allowed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lmp_scan.o(i.LMconfig_LM_Inquiry_Scans_Allowed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMconfig_LM_Inquiry_Scans_Allowed
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Connected_As_Scatternet
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Inquiry_Scan_Start
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Get_Interval_To_Next_Scan
</UL>

<P><STRONG><a name="[36f]"></a>LMconfig_LM_Page_Scans_Allowed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lmp_scan.o(i.LMconfig_LM_Page_Scans_Allowed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMconfig_LM_Page_Scans_Allowed
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Connected_As_Scatternet
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Page_Scan_Start
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Get_Interval_To_Next_Scan
</UL>

<P><STRONG><a name="[553]"></a>LMconfig_LM_Read_Local_Name</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lmp_config.o(i.LMconfig_LM_Read_Local_Name))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[370]"></a>LMconfig_LM_Read_Remote_Version</STRONG> (Thumb, 46 bytes, Stack size 64 bytes, lmp_config.o(i.LMconfig_LM_Read_Remote_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LMconfig_LM_Read_Remote_Version &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[371]"></a>LMconfig_LM_Set_Device_State</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lmp_ch.o(i.LMconfig_LM_Set_Device_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LMconfig_LM_Set_Device_State &rArr; LC_Inquiry_Scan_Cancel &rArr; USLCinqScan_Cancel &rArr; USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Page_Scan_Cancel
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Inquiry_Scan_Cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Incoming_Link_Inf
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Start
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Switch_Role
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Read_Remote_Name_Cancel
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Read_Remote_Name
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Cancel
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Accept
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Park_Req
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Switch_Req
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Page_Complete_NO_ERROR
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Switch_Req
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Handle_Incoming_LM_Connection_Request
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMconnection_Create_ACL_Connection
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Success
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Execute_Park_Request
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Slave_Sniff_Activity
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Master_Sniff_Activity
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Period_Interval_Timeout
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Execute_Unpark_Request
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Update_Link_Flow_Spec
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Check_Link_QoS
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Update_Link_QoS
</UL>

<P><STRONG><a name="[25]"></a>LMconfig_LM_Standby_Low_Power_Timeout</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lmp_config.o(i.LMconfig_LM_Standby_Low_Power_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = LMconfig_LM_Standby_Low_Power_Timeout &rArr; LC_Sleep &rArr; USLCsleep_Request &rArr; USLCsleep_State_Dispatcher &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_get_device_state
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Reset_Timer
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Sleep
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Read_Scan_Enable
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Get_Inquiry_Mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_config.o(i.LMconfig_Initialise)
</UL>
<P><STRONG><a name="[33]"></a>LMconnection_Detach_Timeout</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lmp_ch.o(i.LMconnection_Detach_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = LMconnection_Detach_Timeout &rArr; LMconnection_Disconnect_Acl &rArr; LM_Encode_Msg_Timeout &rArr; LMdisp_LMP_Not_Accepted_Ext &rArr; LMdisp_LMP_Not_Accepted_Common &rArr; LMconnection_LMP_Not_Accepted &rArr; LMsec_peer_Resume_Encryption &rArr; _Start_Encryption &rArr; _Generate_Encryption_Key &rArr; LM_SecEng_Generate_Key_E3 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Testmode_Exit
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Disconnect_Acl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_ch.o(i.LMconnection_Send_LMP_Detach)
</UL>
<P><STRONG><a name="[2a]"></a>LMconnection_Disconnect_Acl</STRONG> (Thumb, 482 bytes, Stack size 80 bytes, lmp_ch.o(i.LMconnection_Disconnect_Acl))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = LMconnection_Disconnect_Acl &rArr; LM_Encode_Msg_Timeout &rArr; LMdisp_LMP_Not_Accepted_Ext &rArr; LMdisp_LMP_Not_Accepted_Common &rArr; LMconnection_LMP_Not_Accepted &rArr; LMsec_peer_Resume_Encryption &rArr; _Start_Encryption &rArr; _Generate_Encryption_Key &rArr; LM_SecEng_Generate_Key_E3 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Free_Link
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Clear_Link_If_Parked
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Decr_Links_In_Low_Power
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Stop_Classification_Reporting
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Deactivate_AFH
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_Msg_Timeout
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Restore_Piconet
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Force_Context
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Remote_Name_Request_Complete_Event
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Read_Remote_Name_Cancel_Command_Complete_Event
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Create_Connection_Cancel_Command_Complete_Event
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Connection_Complete_Event_ACL
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Release_All_Data_Queue_Packets
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Disconnect_Inf
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Detach_Timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lmp_ch.o(i.LMconnection_LMP_Detach)
<LI> lmp_ch.o(i.LMconnection_LMP_Detach_Ack)
</UL>
<P><STRONG><a name="[381]"></a>LMconnection_Handle_Incoming_LM_Connection_Request</STRONG> (Thumb, 216 bytes, Stack size 80 bytes, lmp_ch.o(i.LMconnection_Handle_Incoming_LM_Connection_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = LMconnection_Handle_Incoming_LM_Connection_Request &rArr; LMsec_core_Init_Authentication &rArr; LMsec_core_Auth_Challenge &rArr; LM_SecEng_Authenticate_E1 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Is_Event_Masked_On
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_SSP_Enabled_On_Link
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_Authentication
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMfltr_Connection_Filter_Check
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_Accepted_PDU
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Connection_PDU
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Local_Setup_Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Host_Connection_Req
</UL>

<P><STRONG><a name="[33a]"></a>LMconnection_Initialise</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lmp_ch.o(i.LMconnection_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMconnection_Initialise
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Register_Event_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Initialise
</UL>

<P><STRONG><a name="[388]"></a>LMconnection_LMP_Accepted</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lmp_ch.o(i.LMconnection_LMP_Accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = LMconnection_LMP_Accepted &rArr; LMsec_core_Init_Authentication &rArr; LMsec_core_Auth_Challenge &rArr; LM_SecEng_Authenticate_E1 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_SSP_Enabled_On_Link
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_Authentication
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Activate_AFH
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Restore_Piconet
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Connected_As_SCO_Master
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Local_Setup_Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Accepted_Common
</UL>

<P><STRONG><a name="[72]"></a>LMconnection_LMP_Detach</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lmp_ch.o(i.LMconnection_LMP_Detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LMconnection_LMP_Detach &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Testmode_Exit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Disable_L2CAP_Traffic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[16]"></a>LMconnection_LMP_Detach_Ack</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lmp_ch.o(i.LMconnection_LMP_Detach_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LMconnection_LMP_Detach_Ack &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Testmode_Exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
</UL>
<P><STRONG><a name="[89]"></a>LMconnection_LMP_Features_Req</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lmp_ch.o(i.LMconnection_LMP_Features_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = LMconnection_LMP_Features_Req &rArr; LMconnection_Finalise_Connection_Setup &rArr; LMqos_LM_Change_Packet_Type &rArr; LMqos_LM_Change_Validated_Packet_Type &rArr; LMqos_LM_Max_Slot_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Connection_PDU
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Finalise_Connection_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>LMconnection_LMP_Features_Req_Ext</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lmp_ch.o(i.LMconnection_LMP_Features_Req_Ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = LMconnection_LMP_Features_Req_Ext &rArr; _Send_LMP_Features_Res_Ext &rArr; LM_Encode_LMP_PDU_Fully_Encoded &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Features_Res_Ext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>LMconnection_LMP_Features_Res</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, lmp_ch.o(i.LMconnection_LMP_Features_Res))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = LMconnection_LMP_Features_Res &rArr; LMconnection_Finalise_Connection_Setup &rArr; LMqos_LM_Change_Packet_Type &rArr; LMqos_LM_Change_Validated_Packet_Type &rArr; LMqos_LM_Max_Slot_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Read_Remote_Extended_Features
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Name_Req
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Connection_PDU
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Remote_Features_Complete_Event
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Finalise_Connection_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>LMconnection_LMP_Features_Res_Ext</STRONG> (Thumb, 140 bytes, Stack size 80 bytes, lmp_ch.o(i.LMconnection_LMP_Features_Res_Ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = LMconnection_LMP_Features_Res_Ext &rArr; _Send_LMP_Connection_PDU &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Name_Req
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Connection_PDU
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Remote_Extended_Features_Complete_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>LMconnection_LMP_Host_Connection_Req</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lmp_ch.o(i.LMconnection_LMP_Host_Connection_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = LMconnection_LMP_Host_Connection_Req &rArr; LMconnection_Handle_Incoming_LM_Connection_Request &rArr; LMsec_core_Init_Authentication &rArr; LMsec_core_Auth_Challenge &rArr; LM_SecEng_Authenticate_E1 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_exist_Acl_Num
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Handle_Incoming_LM_Connection_Request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>LMconnection_LMP_Name_Req</STRONG> (Thumb, 102 bytes, Stack size 72 bytes, lmp_ch.o(i.LMconnection_LMP_Name_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = LMconnection_LMP_Name_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>LMconnection_LMP_Name_Res</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, lmp_ch.o(i.LMconnection_LMP_Name_Res))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = LMconnection_LMP_Name_Res &rArr; LMconnection_Send_LMP_Detach &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Send_LMP_Detach
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Name_Req
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Remote_Name_Request_Complete_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[391]"></a>LMconnection_LMP_Not_Accepted</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, lmp_ch.o(i.LMconnection_LMP_Not_Accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = LMconnection_LMP_Not_Accepted &rArr; LMsec_peer_Resume_Encryption &rArr; _Start_Encryption &rArr; _Generate_Encryption_Key &rArr; LM_SecEng_Generate_Key_E3 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_SSP_Enabled_On_Link
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Resume_Encryption
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_Authentication
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Update_Allowed_Packets
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_Accepted_PDU
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Role_Change_Event
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Send_LMP_Detach
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Enable_L2CAP_Traffic
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Name_Req
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Remote_Name_Request_Complete_Event
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Remote_Features_Complete_Event
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Remote_Extended_Features_Complete_Event
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Local_Setup_Complete
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Finalise_Connection_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Not_Accepted_Common
</UL>

<P><STRONG><a name="[21]"></a>LMconnection_LMP_Packet_Type_Table_Req_Accepted_Ack</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lmp_ch.o(i.LMconnection_LMP_Packet_Type_Table_Req_Accepted_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LMconnection_LMP_Packet_Type_Table_Req_Accepted_Ack &rArr; LC_Set_PTT_ACL
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Set_PTT_ACL
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Enable_L2CAP_Traffic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
</UL>
<P><STRONG><a name="[8f]"></a>LMconnection_LMP_Setup_Complete</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, lmp_ch.o(i.LMconnection_LMP_Setup_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = LMconnection_LMP_Setup_Complete &rArr; LMconnection_Finalise_Connection_Setup &rArr; LMqos_LM_Change_Packet_Type &rArr; LMqos_LM_Change_Validated_Packet_Type &rArr; LMqos_LM_Max_Slot_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Send_LMP_Detach
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Disable_L2CAP_Traffic
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Connection_PDU
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Finalise_Connection_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>LMconnection_LMP_Switch_Req</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, lmp_ch.o(i.LMconnection_LMP_Switch_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = LMconnection_LMP_Switch_Req &rArr; _Send_LMP_Connection_PDU &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Piconet_Clock_Ex
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint32
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_Accepted_PDU
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Disable_L2CAP_Traffic
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Connection_PDU
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Get_Current_Key_Persistance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[2b]"></a>LMconnection_LMP_Switch_Timeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lmp_ch.o(i.LMconnection_LMP_Switch_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LMconnection_LMP_Switch_Timeout &rArr; LC_Role_Switch &rArr; USLCmss_Request &rArr; USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Stop_Classification_Reporting
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Role_Switch
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lmp_ch.o(i.LMconnection_LMP_Switch_Req)
<LI> lmp_ch.o(i._Send_LMP_Connection_PDU)
</UL>
<P><STRONG><a name="[397]"></a>LMconnection_LM_Auth_Complete</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lmp_ch.o(i.LMconnection_LM_Auth_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = LMconnection_LM_Auth_Complete &rArr; LMconnection_Local_Setup_Complete &rArr; LMconnection_Finalise_Connection_Setup &rArr; LMqos_LM_Change_Packet_Type &rArr; LMqos_LM_Change_Validated_Packet_Type &rArr; LMqos_LM_Max_Slot_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_Encryption
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Send_LMP_Detach
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Local_Setup_Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_TimeoutHandler
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Complete
</UL>

<P><STRONG><a name="[399]"></a>LMconnection_LM_Connection_Accept</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, lmp_ch.o(i.LMconnection_LM_Connection_Accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = LMconnection_LM_Connection_Accept &rArr; LMsec_core_Init_Authentication &rArr; LMsec_core_Auth_Challenge &rArr; LM_SecEng_Authenticate_E1 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Bd_Addr
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_SSP_Enabled_On_Link
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_Authentication
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_Accepted_PDU
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Connection_PDU
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Local_Setup_Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[39a]"></a>LMconnection_LM_Connection_Cancel</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lmp_ch.o(i.LMconnection_LM_Connection_Cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = LMconnection_LM_Connection_Cancel &rArr; LMconnection_Send_LMP_Detach &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Free_Link
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Bd_Addr_Match
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Bd_Addr
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Page_Cancel
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Send_LMP_Detach
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Create_Connection_Cancel_Command_Complete_Event
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Connection_Complete_Event_ACL
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[374]"></a>LMconnection_LM_Connection_Reject</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lmp_ch.o(i.LMconnection_LM_Connection_Reject))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = LMconnection_LM_Connection_Reject &rArr; LM_Encode_LMP_Not_Accepted_PDU &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Bd_Addr
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_Not_Accepted_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Connection_Timeout
</UL>

<P><STRONG><a name="[39b]"></a>LMconnection_LM_Connection_Req</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lmp_ch.o(i.LMconnection_LM_Connection_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LMconnection_LM_Connection_Req &rArr; _LMconnection_Create_ACL_Connection &rArr; LC_Create_Connection &rArr; USLCpage_Request &rArr; LSLCfreq_Assign_Frequency_Kernel &rArr; LSLCafh_Assign_AFH_Kernel &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMconnection_Validate_ACL_Admission
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMconnection_Create_ACL_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[39e]"></a>LMconnection_LM_Disconnect</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lmp_ch.o(i.LMconnection_LM_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = LMconnection_LM_Disconnect &rArr; LMconnection_Send_LMP_Detach &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Send_LMP_Detach
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Disable_L2CAP_Traffic
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Disconnect_Req
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Accepted
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Return_From_Sniff
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Unpark_Pmaddr_Accepted_Ack_Hanlder
</UL>

<P><STRONG><a name="[2c]"></a>LMconnection_LM_Disconnect_Inf</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lmp_ch.o(i.LMconnection_LM_Disconnect_Inf))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = LMconnection_LM_Disconnect_Inf &rArr; LMconnection_Disconnect_Acl &rArr; LM_Encode_Msg_Timeout &rArr; LMdisp_LMP_Not_Accepted_Ext &rArr; LMdisp_LMP_Not_Accepted_Common &rArr; LMconnection_LMP_Not_Accepted &rArr; LMsec_peer_Resume_Encryption &rArr; _Start_Encryption &rArr; _Generate_Encryption_Key &rArr; LM_SecEng_Generate_Key_E3 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Testmode_Exit
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Remove_Link
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Disconnect_Acl
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lmp_ch.o(i.LMconnection_LM_Incoming_Link_Inf)
<LI> lmp_ch.o(i.LMconnection_LM_Page_Complete_NO_ERROR)
</UL>
<P><STRONG><a name="[3a0]"></a>LMconnection_LM_Disconnect_Req</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lmp_ch.o(i.LMconnection_LM_Disconnect_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = LMconnection_LM_Disconnect_Req &rArr; LMconnection_LM_Disconnect &rArr; LMconnection_Send_LMP_Detach &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Handle
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Exit_Sniff_Mode
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Exit_Park_Mode
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Complete
</UL>

<P><STRONG><a name="[3a3]"></a>LMconnection_LM_Encrypt_Complete</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lmp_ch.o(i.LMconnection_LM_Encrypt_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = LMconnection_LM_Encrypt_Complete &rArr; LMconnection_Local_Setup_Complete &rArr; LMconnection_Finalise_Connection_Setup &rArr; LMqos_LM_Change_Packet_Type &rArr; LMqos_LM_Change_Validated_Packet_Type &rArr; LMqos_LM_Max_Slot_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Send_LMP_Detach
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Local_Setup_Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_TimeoutHandler
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Set_Encryption_Complete
</UL>

<P><STRONG><a name="[3a4]"></a>LMconnection_LM_Incoming_Link_Inf</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lmp_ch.o(i.LMconnection_LM_Incoming_Link_Inf))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LMconnection_LM_Incoming_Link_Inf &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Write_Bd_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Page_Scan_Incoming
</UL>

<P><STRONG><a name="[28]"></a>LMconnection_LM_Page_Complete</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lmp_ch.o(i.LMconnection_LM_Page_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LMconnection_LM_Page_Complete &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_ch.o(i.LMconnection_Initialise)
</UL>
<P><STRONG><a name="[2d]"></a>LMconnection_LM_Page_Complete_ERROR</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lmp_ch.o(i.LMconnection_LM_Page_Complete_ERROR))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LMconnection_LM_Page_Complete_ERROR &rArr; _Send_HC_Connection_Complete_Event_ACL &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Free_Link
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Remote_Name_Request_Complete_Event
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Connection_Complete_Event_ACL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_ch.o(i.LMconnection_LM_Page_Complete)
</UL>
<P><STRONG><a name="[2e]"></a>LMconnection_LM_Page_Complete_NO_ERROR</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lmp_ch.o(i.LMconnection_LM_Page_Complete_NO_ERROR))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = LMconnection_LM_Page_Complete_NO_ERROR &rArr; _Send_LMP_Connection_PDU &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Connection_PDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_ch.o(i.LMconnection_LM_Page_Complete)
</UL>
<P><STRONG><a name="[38c]"></a>LMconnection_LM_Read_Remote_Extended_Features</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lmp_ch.o(i.LMconnection_LM_Read_Remote_Extended_Features))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = LMconnection_LM_Read_Remote_Extended_Features &rArr; _Send_LMP_Features_Req_Ext &rArr; LM_Encode_LMP_PDU_Fully_Encoded &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Features_Req_Ext
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Features_Res
</UL>

<P><STRONG><a name="[3a6]"></a>LMconnection_LM_Read_Remote_Name</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lmp_ch.o(i.LMconnection_LM_Read_Remote_Name))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = LMconnection_LM_Read_Remote_Name &rArr; _Send_LMP_Name_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Bd_Addr
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Name_Req
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMconnection_Validate_ACL_Admission
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMconnection_Create_ACL_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[3a7]"></a>LMconnection_LM_Read_Remote_Name_Cancel</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lmp_ch.o(i.LMconnection_LM_Read_Remote_Name_Cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = LMconnection_LM_Read_Remote_Name_Cancel &rArr; LMconnection_Send_LMP_Detach &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Free_Link
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Bd_Addr_Match
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Page_Cancel
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Send_LMP_Detach
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Remote_Name_Request_Complete_Event
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Read_Remote_Name_Cancel_Command_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[3a8]"></a>LMconnection_LM_Read_Remote_Supported_Features</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lmp_ch.o(i.LMconnection_LM_Read_Remote_Supported_Features))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = LMconnection_LM_Read_Remote_Supported_Features &rArr; _Send_LMP_Connection_PDU &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Connection_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[30]"></a>LMconnection_LM_Recent_Contact_Timeout</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lmp_ch.o(i.LMconnection_LM_Recent_Contact_Timeout))
<BR>[Address Reference Count : 2]<UL><LI> lmp_ch.o(i.LMconnection_LM_Page_Complete_NO_ERROR)
<LI> lmp_ch.o(i.LMconnection_Switch_Complete_Success)
</UL>
<P><STRONG><a name="[3a9]"></a>LMconnection_LM_Switch_Req</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lmp_ch.o(i.LMconnection_LM_Switch_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = LMconnection_LM_Switch_Req &rArr; _Send_LMP_Connection_PDU &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Connection_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Accepted
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Stop_Encryption_Req_Accepted_Ack
</UL>

<P><STRONG><a name="[3aa]"></a>LMconnection_LM_Switch_Role</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, lmp_ch.o(i.LMconnection_LM_Switch_Role))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = LMconnection_LM_Switch_Role &rArr; LMsec_peer_Send_LMP_Pause_Encryption_Req &rArr; LM_Encode_LMP_PDU_Fully_Encoded &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Pause_Encryption_Req
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Disable_L2CAP_Traffic
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Connection_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Policy_Command
</UL>

<P><STRONG><a name="[29]"></a>LMconnection_LM_Switch_Role_Complete</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lmp_ch.o(i.LMconnection_LM_Switch_Role_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LMconnection_LM_Switch_Role_Complete &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Enable_L2CAP_Traffic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_ch.o(i.LMconnection_Initialise)
</UL>
<P><STRONG><a name="[390]"></a>LMconnection_Send_LMP_Detach</STRONG> (Thumb, 54 bytes, Stack size 72 bytes, lmp_ch.o(i.LMconnection_Send_LMP_Detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = LMconnection_Send_LMP_Detach &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Read_Remote_Name_Cancel
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Cancel
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Au_Rand
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_Authentication
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Encrypt_Complete
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Disconnect
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Auth_Complete
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Setup_Complete
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Not_Accepted
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Name_Res
</UL>

<P><STRONG><a name="[3ac]"></a>LMconnection_Switch_Complete_Event</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lmp_ch.o(i.LMconnection_Switch_Complete_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = LMconnection_Switch_Complete_Event &rArr; LMafh_Activate_AFH &rArr; LMafh_Update_Master_AFH_Piconet &rArr; LMafh_Update_Slave_AFH_If_Required &rArr; LM_Encode_LMP_PDU_Fully_Encoded &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Activate_AFH
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Role_Change_Event
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Enable_L2CAP_Traffic
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Accepted
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Start_Encryption_Req_Accepted_Ack
</UL>

<P><STRONG><a name="[3f3]"></a>LMdisp_Get_Dispatched_LMP_PDU_Length</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmp_cmd_disp.o(i.LMdisp_Get_Dispatched_LMP_PDU_Length))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Unpark_Pm_Addr_Req
</UL>

<P><STRONG><a name="[6e]"></a>LMdisp_LMP_Accepted</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lmp_cmd_disp.o(i.LMdisp_LMP_Accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 1300 + Unknown Stack Size
<LI>Call Chain = LMdisp_LMP_Accepted &rArr; LMdisp_LMP_Accepted_Common &rArr; LMssp_LMP_Accepted &rArr; _LMssp_Calculate_Link_Key &rArr; F2 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Accepted_Common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[3ad]"></a>LMdisp_LMP_Accepted_Common</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, lmp_cmd_disp.o(i.LMdisp_LMP_Accepted_Common))
<BR><BR>[Stack]<UL><LI>Max Depth = 1292 + Unknown Stack Size
<LI>Call Chain = LMdisp_LMP_Accepted_Common &rArr; LMssp_LMP_Accepted &rArr; _LMssp_Calculate_Link_Key &rArr; F2 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_LMP_Accepted
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Accepted
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Accepted
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Accepted
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Accepted
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Accepted
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Accepted_Ext
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Accepted
</UL>

<P><STRONG><a name="[9e]"></a>LMdisp_LMP_Accepted_Ext</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lmp_cmd_disp.o(i.LMdisp_LMP_Accepted_Ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 1300 + Unknown Stack Size
<LI>Call Chain = LMdisp_LMP_Accepted_Ext &rArr; LMdisp_LMP_Accepted_Common &rArr; LMssp_LMP_Accepted &rArr; _LMssp_Calculate_Link_Key &rArr; F2 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Accepted_Common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>LMdisp_LMP_Command_Dispatcher</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, lmp_cmd_disp.o(i.LMdisp_LMP_Command_Dispatcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = LMdisp_LMP_Command_Dispatcher &rArr; LM_Encode_LMP_Not_Accepted_Ext_PDU &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Dequeue_Next
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_Not_Accepted_Ext_PDU
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMdisp_Clear_Any_Associated_Message_Timer
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_Not_Accepted_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[5d]"></a>LMdisp_LMP_Ignore_Command</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lmp_cmd_disp.o(i.LMdisp_LMP_Ignore_Command))
<BR>[Address Reference Count : 3]<UL><LI> tc_interface.o(i.TC_Write_Features)
<LI> tc_interface.o(i.TC_Write_Local_Extended_Features)
<LI> tc_interface.o(i.TC_Write_Local_Features)
</UL>
<P><STRONG><a name="[6f]"></a>LMdisp_LMP_Not_Accepted</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lmp_cmd_disp.o(i.LMdisp_LMP_Not_Accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = LMdisp_LMP_Not_Accepted &rArr; LMdisp_LMP_Not_Accepted_Common &rArr; LMconnection_LMP_Not_Accepted &rArr; LMsec_peer_Resume_Encryption &rArr; _Start_Encryption &rArr; _Generate_Encryption_Key &rArr; LM_SecEng_Generate_Key_E3 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Not_Accepted_Common
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_Msg_Timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[3b3]"></a>LMdisp_LMP_Not_Accepted_Common</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, lmp_cmd_disp.o(i.LMdisp_LMP_Not_Accepted_Common))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = LMdisp_LMP_Not_Accepted_Common &rArr; LMconnection_LMP_Not_Accepted &rArr; LMsec_peer_Resume_Encryption &rArr; _Start_Encryption &rArr; _Generate_Encryption_Key &rArr; LM_SecEng_Generate_Key_E3 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_LMP_Not_Accepted
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Not_Accepted
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Not_Accepted
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Not_Accepted
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Not_Accepted
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LMP_Not_Accepted
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LMP_Not_Accepted
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Not_Accepted
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Not_Accepted_Ext
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Not_Accepted
</UL>

<P><STRONG><a name="[9f]"></a>LMdisp_LMP_Not_Accepted_Ext</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lmp_cmd_disp.o(i.LMdisp_LMP_Not_Accepted_Ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = LMdisp_LMP_Not_Accepted_Ext &rArr; LMdisp_LMP_Not_Accepted_Common &rArr; LMconnection_LMP_Not_Accepted &rArr; LMsec_peer_Resume_Encryption &rArr; _Start_Encryption &rArr; _Generate_Encryption_Key &rArr; LM_SecEng_Generate_Key_E3 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Not_Accepted_Common
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_Msg_Timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>LMdisp_LMP_Unsupported_Command</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lmp_cmd_disp.o(i.LMdisp_LMP_Unsupported_Command))
<BR>[Address Reference Count : 3]<UL><LI> lmp_cmd_disp.o(.constdata)
<LI> tc_interface.o(i.TC_Write_Features)
<LI> tc_interface.o(i.TC_Write_Local_Features)
</UL>
<P><STRONG><a name="[2ab]"></a>LMecc_CB_ECC_Point_Multiplication_Complete</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lmp_ecc.o(i.LMecc_CB_ECC_Point_Multiplication_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1388<LI>Call Chain = LMecc_CB_ECC_Point_Multiplication_Complete &rArr; LMssp_CallBack_DH_Key_Complete &rArr; _LMssp_Send_LMP_DH_Key_Check &rArr; LMssp_Calculate_DHKEY_Check &rArr; F3 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_CallBack_DH_Key_Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_Point_Multiplication_uint8
</UL>

<P><STRONG><a name="[3bb]"></a>LMecc_Generate_ECC_Key</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, lmp_ecc.o(i.LMecc_Generate_ECC_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 1628<LI>Call Chain = LMecc_Generate_ECC_Key &rArr; ECC_Point_Multiplication &rArr; ECC_Point_Multiplication_uint8 &rArr; LMecc_CB_ECC_Point_Multiplication_Complete &rArr; LMssp_CallBack_DH_Key_Complete &rArr; _LMssp_Send_LMP_DH_Key_Check &rArr; LMssp_Calculate_DHKEY_Check &rArr; F3 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CPU_PLL_clk
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBigNumberLength
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_Point_Multiplication
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Generate_New_Public_Private_Key_Pair
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Init_DHKey_Calculation
</UL>

<P><STRONG><a name="[449]"></a>LMecc_isValidSecretKey</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lmp_ecc.o(i.LMecc_isValidSecretKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMecc_isValidSecretKey
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Generate_New_Public_Private_Key_Pair
</UL>

<P><STRONG><a name="[382]"></a>LMfltr_Connection_Filter_Check</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lmp_con_filter.o(i.LMfltr_Connection_Filter_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LMfltr_Connection_Filter_Check &rArr; LMutils_Bd_Addr_Match
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Bd_Addr_Match
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Handle_Incoming_LM_Connection_Request
</UL>

<P><STRONG><a name="[335]"></a>LMfltr_Initialise</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lmp_con_filter.o(i.LMfltr_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMfltr_Initialise
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMfltr_Inquiry_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Initialise
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMfltr_LM_Set_Filter
</UL>

<P><STRONG><a name="[3bd]"></a>LMfltr_Inquiry_Filter_Check</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lmp_con_filter.o(i.LMfltr_Inquiry_Filter_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LMfltr_Inquiry_Filter_Check &rArr; LMutils_Bd_Addr_Match
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Bd_Addr_Match
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Result_Handler
</UL>

<P><STRONG><a name="[3be]"></a>LMfltr_LM_Set_Filter</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lmp_con_filter.o(i.LMfltr_LM_Set_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LMfltr_LM_Set_Filter &rArr; LMutils_Set_Bd_Addr
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Set_Bd_Addr
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMfltr_Initialise
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMfltr_Inquiry_Init
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMfltr_Get_Next_Free_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[3c1]"></a>LMinq_Exit_Periodic_Inquiry_Mode</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lmp_inquiry.o(i.LMinq_Exit_Periodic_Inquiry_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LMinq_Exit_Periodic_Inquiry_Mode &rArr; LMtmr_Clear_Timer &rArr; LMtmr_Delist_Timer
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Inquiry_Cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[372]"></a>LMinq_Get_Inquiry_Mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmp_inquiry.o(i.LMinq_Get_Inquiry_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Standby_Low_Power_Timeout
</UL>

<P><STRONG><a name="[54d]"></a>LMinq_Get_Inquiry_Result_Mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmp_inquiry.o(i.LMinq_Get_Inquiry_Result_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinq_Extract_FHS
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[3c2]"></a>LMinq_Get_Interval_To_Periodic_Inq</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lmp_inquiry.o(i.LMinq_Get_Interval_To_Periodic_Inq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LMinq_Get_Interval_To_Periodic_Inq &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Sleep
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Sleep
</UL>

<P><STRONG><a name="[33b]"></a>LMinq_Initialise</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lmp_inquiry.o(i.LMinq_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMinq_Initialise
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Register_Event_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Initialise
</UL>

<P><STRONG><a name="[3c3]"></a>LMinq_Inquiry_Cancel</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lmp_inquiry.o(i.LMinq_Inquiry_Cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LMinq_Inquiry_Cancel &rArr; LC_Inquiry_Cancel
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Inquiry_Cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Period_Interval_Timeout
</UL>

<P><STRONG><a name="[34]"></a>LMinq_Inquiry_Complete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lmp_inquiry.o(i.LMinq_Inquiry_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LMinq_Inquiry_Complete &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_inquiry.o(i.LMinq_Initialise)
</UL>
<P><STRONG><a name="[35]"></a>LMinq_Inquiry_Result</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lmp_inquiry.o(i.LMinq_Inquiry_Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LMinq_Inquiry_Result &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_inquiry.o(i.LMinq_Initialise)
</UL>
<P><STRONG><a name="[3c5]"></a>LMinq_Inquiry_Start</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lmp_inquiry.o(i.LMinq_Inquiry_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = LMinq_Inquiry_Start &rArr; LC_Inquiry_Request &rArr; USLCinq_Inquiry_Request &rArr; LSLChop_Build_Frequency_Table &rArr; _LSLChop_Execute_HSE_Non_Connection
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_exist_Acl_Num
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Inquiry_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Periodic_Inquiry
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[3c7]"></a>LMinq_Periodic_Inquiry</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lmp_inquiry.o(i.LMinq_Periodic_Inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = LMinq_Periodic_Inquiry &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Start
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Get_Interval_Rand
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[54e]"></a>LMinq_Set_Inquiry_Result_Mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmp_inquiry.o(i.LMinq_Set_Inquiry_Result_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[338]"></a>LMkeydb_Initialise</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lmp_link_key_db.o(i.LMkeydb_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Initialise
</UL>

<P><STRONG><a name="[3c8]"></a>LMkeydb_LM_Delete_Stored_Link_Key</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, lmp_link_key_db.o(i.LMkeydb_LM_Delete_Stored_Link_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LMkeydb_LM_Delete_Stored_Link_Key &rArr; LMaclctr_Find_Bd_Addr &rArr; LMutils_Bd_Addr_Match
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Handle
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Bd_Addr_Match
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Bd_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[3c9]"></a>LMkeydb_LM_Read_Stored_Link_Key</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lmp_link_key_db.o(i.LMkeydb_LM_Read_Stored_Link_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LMkeydb_LM_Read_Stored_Link_Key &rArr; _Send_HC_Return_Link_Key_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMkeydb_Read_Link_Key
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Return_Link_Key_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[3cc]"></a>LMkeydb_LM_Write_Stored_Link_Key</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lmp_link_key_db.o(i.LMkeydb_LM_Write_Stored_Link_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LMkeydb_LM_Write_Stored_Link_Key &rArr; LMkeydb_Write_Link_Key &rArr; LMutils_Bd_Addr_Match
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMkeydb_Write_Link_Key
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[3cb]"></a>LMkeydb_Read_Link_Key</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lmp_link_key_db.o(i.LMkeydb_Read_Link_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LMkeydb_Read_Link_Key &rArr; LMutils_Bd_Addr_Match
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Bd_Addr_Match
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMkeydb_LM_Read_Stored_Link_Key
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Get_Link_Key
</UL>

<P><STRONG><a name="[3cd]"></a>LMkeydb_Write_Link_Key</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, lmp_link_key_db.o(i.LMkeydb_Write_Link_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LMkeydb_Write_Link_Key &rArr; LMutils_Bd_Addr_Match
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Bd_Addr_Match
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Set_Bd_Addr
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Set_DB_Entry_Link_Key
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMkeydb_LM_Write_Stored_Link_Key
</UL>

<P><STRONG><a name="[70]"></a>LMlc_LMP_Clock_Offset_Req</STRONG> (Thumb, 62 bytes, Stack size 72 bytes, lmp_link_control_protocol.o(i.LMlc_LMP_Clock_Offset_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = LMlc_LMP_Clock_Offset_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Read_Clock_Offset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>LMlc_LMP_Clock_Offset_Res</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lmp_link_control_protocol.o(i.LMlc_LMP_Clock_Offset_Res))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LMlc_LMP_Clock_Offset_Res &rArr; _Send_UL_Read_Clock_Offset_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint16
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_UL_Read_Clock_Offset_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[3b7]"></a>LMlc_LMP_Not_Accepted</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lmp_link_control_protocol.o(i.LMlc_LMP_Not_Accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LMlc_LMP_Not_Accepted &rArr; _Send_UL_Read_Clock_Offset_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Write_Device_Jitter
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Write_Device_Drift
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_UL_Read_Clock_Offset_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Not_Accepted_Common
</UL>

<P><STRONG><a name="[92]"></a>LMlc_LMP_Slot_Offset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lmp_link_control_protocol.o(i.LMlc_LMP_Slot_Offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LMlc_LMP_Slot_Offset &rArr; LC_Write_Remote_Slot_Offset
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint16
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Write_Remote_Slot_Offset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>LMlc_LMP_Test_Activate</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lmp_link_control_protocol.o(i.LMlc_LMP_Test_Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = LMlc_LMP_Test_Activate &rArr; LM_Encode_LMP_Accepted_PDU &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Page_Scan_Cancel
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Inquiry_Scan_Cancel
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_Accepted_PDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>LMlc_LMP_Test_Control</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lmp_link_control_protocol.o(i.LMlc_LMP_Test_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = LMlc_LMP_Test_Control &rArr; LM_Encode_LMP_Accepted_PDU &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Testmode_Request
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_Accepted_PDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>LMlc_LMP_Timing_Accuracy_Req</STRONG> (Thumb, 52 bytes, Stack size 64 bytes, lmp_link_control_protocol.o(i.LMlc_LMP_Timing_Accuracy_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LMlc_LMP_Timing_Accuracy_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Read_Local_Device_Jitter
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Read_Local_Device_Drift
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lmp_cmd_disp.o(.constdata)
<LI> tc_interface.o(i.TC_Write_Features)
<LI> tc_interface.o(i.TC_Write_Local_Features)
</UL>
<P><STRONG><a name="[5b]"></a>LMlc_LMP_Timing_Accuracy_Res</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lmp_link_control_protocol.o(i.LMlc_LMP_Timing_Accuracy_Res))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LMlc_LMP_Timing_Accuracy_Res &rArr; LC_Write_Device_Jitter
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Write_Device_Jitter
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Write_Device_Drift
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lmp_cmd_disp.o(.constdata)
<LI> tc_interface.o(i.TC_Write_Features)
<LI> tc_interface.o(i.TC_Write_Local_Features)
</UL>
<P><STRONG><a name="[3d0]"></a>LMlc_LM_Clock_Offset_Req</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, lmp_link_control_protocol.o(i.LMlc_LM_Clock_Offset_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LMlc_LM_Clock_Offset_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Read_Clock_Offset
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_UL_Read_Clock_Offset_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[37d]"></a>LMlc_LM_Timing_Accuracy_Req</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, lmp_link_control_protocol.o(i.LMlc_LM_Timing_Accuracy_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LMlc_LM_Timing_Accuracy_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Finalise_Connection_Setup
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Remote_Timing_Information
</UL>

<P><STRONG><a name="[40]"></a>LMpol_Ack_Last_Tx_Packet</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, lmp_link_policy.o(i.LMpol_Ack_Last_Tx_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LMpol_Ack_Last_Tx_Packet &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Disable_L2CAP_Traffic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_link_policy.o(i.LMpol_Initialise)
</UL>
<P><STRONG><a name="[3d1]"></a>LMpol_Adjust_ACL_Packet_Types_On_Link</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lmp_link_policy.o(i.LMpol_Adjust_ACL_Packet_Types_On_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = LMpol_Adjust_ACL_Packet_Types_On_Link &rArr; LMpol_Adjust_Peer_Packet_Type &rArr; LMqos_Send_LMP_Preferred_Rate &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Update_Allowed_Packets
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Adjust_Peer_Packet_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Sniff_Mode
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Sniff_Req
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Not_Accepted
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Return_From_Sniff
</UL>

<P><STRONG><a name="[3d2]"></a>LMpol_Adjust_Peer_Packet_Type</STRONG> (Thumb, 54 bytes, Stack size 72 bytes, lmp_link_policy.o(i.LMpol_Adjust_Peer_Packet_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = LMpol_Adjust_Peer_Packet_Type &rArr; LMqos_Send_LMP_Preferred_Rate &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Send_LMP_Preferred_Rate
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Adjust_ACL_Packet_Types_On_Link
</UL>

<P><STRONG><a name="[3d4]"></a>LMpol_Adjust_Wakeup_Slot_Time</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, lmp_link_policy.o(i.LMpol_Adjust_Wakeup_Slot_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = LMpol_Adjust_Wakeup_Slot_Time &rArr; LC_Get_Piconet_Clock_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Piconet_Clock_Ex
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Piconet_Reset_Delta_Slots
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Return_From_Sniff
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Park_Activity
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Beacon_Tx
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Slave_Sniff_Activity
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Master_Sniff_Activity
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Enter_Sniff_Mode
</UL>

<P><STRONG><a name="[378]"></a>LMpol_Decr_Links_In_Low_Power</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lmp_link_policy.o(i.LMpol_Decr_Links_In_Low_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMpol_Decr_Links_In_Low_Power
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Clear_Link_If_Parked
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Disconnect_Acl
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Return_From_Sniff
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Exit_Park_Mode_Complete_Handler
</UL>

<P><STRONG><a name="[3a]"></a>LMpol_Device_Activity</STRONG> (Thumb, 458 bytes, Stack size 40 bytes, lmp_link_policy.o(i.LMpol_Device_Activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = LMpol_Device_Activity &rArr; LMtmr_Reset_Timer &rArr; LMtmr_Enlist_Timer
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Reset_Timer
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_rx_type
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Piconet_Clock_Ex
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Piconet_Reset_Slots
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Adjust_Sniff_Attempt_for_Multislot_Packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_link_policy.o(i.LMpol_Initialise)
</UL>
<P><STRONG><a name="[3d7]"></a>LMpol_Flush_Auto_Link_Buffer</STRONG> (Thumb, 72 bytes, Stack size 72 bytes, lmp_link_policy.o(i.LMpol_Flush_Auto_Link_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LMpol_Flush_Auto_Link_Buffer &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enhanced_Flush
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Enable_L2CAP_Traffic
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Disable_L2CAP_Traffic
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_HCI_Enhanced_Flush
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Flush_Execute
</UL>

<P><STRONG><a name="[3d8]"></a>LMpol_Flush_Link_Buffer</STRONG> (Thumb, 142 bytes, Stack size 80 bytes, lmp_link_policy.o(i.LMpol_Flush_Link_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = LMpol_Flush_Link_Buffer &rArr; BTq_Ack_Last_Dequeued &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_BB_Dequeue_Next
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Enable_L2CAP_Traffic
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Disable_L2CAP_Traffic
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_HCI_Flush
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Flush_Execute
</UL>

<P><STRONG><a name="[ae]"></a>LMpol_Flush_Timeout</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lmp_link_policy.o(i.LMpol_Flush_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LMpol_Flush_Timeout &rArr; _LMpol_Flush_L2CAP_Packet &rArr; BTq_Ack_Last_Dequeued &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Flush_L2CAP_Packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_link_policy.o(fastcall)
</UL>
<P><STRONG><a name="[13b]"></a>LMpol_Get_Interval_To_Next_Wakeup</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lmp_link_policy.o(i.LMpol_Get_Interval_To_Next_Wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = LMpol_Get_Interval_To_Next_Wakeup &rArr; LC_Get_Piconet_Clock_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Piconet_Clock_Ex
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Page_Scan_Start
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Inquiry_Scan_Start
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Sleep
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Park_Activity
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Beacon_Tx
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Tx_Activity
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Slave_Sniff_Activity
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Master_Sniff_Activity
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Filter_Multislot_To_Bandwidth
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Complete_Success
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Get_Emergency_Poll_Activity
</UL>

<P><STRONG><a name="[13a]"></a>LMpol_Get_Next_Master_Beacon_Tx</STRONG> (Thumb, 934 bytes, Stack size 48 bytes, lmp_link_policy.o(i.LMpol_Get_Next_Master_Beacon_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = LMpol_Get_Next_Master_Beacon_Tx &rArr; LC_Unpark_Request &rArr; USLCparkMaster_Unpark_Request &rArr; DL_Unpark &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Handle
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Page_Scan_Cancel
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Inquiry_Scan_Cancel
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Interval_To_Next_Wakeup
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_BB_Dequeue_Next
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time_Instant
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Piconet_Reset_Delta_Slots
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Unpark_Request
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Access_Window_Request
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Use_Local_Tx_Descriptor
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Sleep
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Adjust_Wakeup_Slot_Time
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Master_Broadcast_Tx
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Tx_Activity
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Prepare_Next_Master_Frame_Activity
</UL>

<P><STRONG><a name="[3d]"></a>LMpol_Get_Next_SCO_Tx_Activity</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lmp_link_policy.o(i.LMpol_Get_Next_SCO_Tx_Activity))
<BR>[Address Reference Count : 1]<UL><LI> lmp_link_policy.o(i.LMpol_Initialise)
</UL>
<P><STRONG><a name="[14e]"></a>LMpol_Get_Next_Slave_Park_Activity</STRONG> (Thumb, 548 bytes, Stack size 64 bytes, lmp_link_policy.o(i.LMpol_Get_Next_Slave_Park_Activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = LMpol_Get_Next_Slave_Park_Activity &rArr; LC_Unpark_Request &rArr; USLCparkMaster_Unpark_Request &rArr; DL_Unpark &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Interval_To_Next_Wakeup
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Piconet_Clock_Ex
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time_Instant
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Piconet_Reset_Delta_Slots
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_Get_Search_Window_Frames
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Wakeup
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Unpark_Request
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Access_Window_Request
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Sleep
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Adjust_Wakeup_Slot_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Rx_Activity
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Prepare_Next_Slave_Frame_Activity
</UL>

<P><STRONG><a name="[3f]"></a>LMpol_Get_Next_Slave_Rx_Activity</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, lmp_link_policy.o(i.LMpol_Get_Next_Slave_Rx_Activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = LMpol_Get_Next_Slave_Rx_Activity &rArr; LMpol_Get_Next_Slave_Park_Activity &rArr; LC_Unpark_Request &rArr; USLCparkMaster_Unpark_Request &rArr; DL_Unpark &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Is_Queue_Empty
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Disable_L2CAP_Traffic
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Park_Activity
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Slave_Sniff_Activity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_link_policy.o(i.LMpol_Initialise)
</UL>
<P><STRONG><a name="[3e]"></a>LMpol_Get_Next_Slave_Tx_Activity</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, lmp_link_policy.o(i.LMpol_Get_Next_Slave_Tx_Activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = LMpol_Get_Next_Slave_Tx_Activity &rArr; _LMpol_Get_Link_Tx_Activity &rArr; LMpol_Set_Flush_Timeout &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Piconet_Clock_Ex
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Piconet_Reset_Slots
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Link_Tx_Activity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_link_policy.o(i.LMpol_Initialise)
</UL>
<P><STRONG><a name="[3dd]"></a>LMpol_HCI_Enhanced_Flush</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, lmp_link_policy.o(i.LMpol_HCI_Enhanced_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = LMpol_HCI_Enhanced_Flush &rArr; HCeg_Command_Status_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Is_Queue_Empty
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Status_Event
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Flush_Auto_Link_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[3de]"></a>LMpol_HCI_Flush</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lmp_link_policy.o(i.LMpol_HCI_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LMpol_HCI_Flush &rArr; LMpol_Flush_Link_Buffer &rArr; BTq_Ack_Last_Dequeued &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Disable_L2CAP_Traffic
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Flush_Link_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[336]"></a>LMpol_Initialise</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lmp_link_policy.o(i.LMpol_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMpol_Initialise
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Register_Event_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Initialise
</UL>

<P><STRONG><a name="[3c]"></a>LMpol_Is_SCO_Next_Activity</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lmp_link_policy.o(i.LMpol_Is_SCO_Next_Activity))
<BR>[Address Reference Count : 1]<UL><LI> lmp_link_policy.o(i.LMpol_Initialise)
</UL>
<P><STRONG><a name="[3df]"></a>LMpol_Max_Slots_Allowed</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lmp_link_policy.o(i.LMpol_Max_Slots_Allowed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LMpol_Max_Slots_Allowed
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSconfig_Is_Feature_Supported
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Max_Slot_Req
</UL>

<P><STRONG><a name="[3e0]"></a>LMpol_Reset_Flush_Timeout</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lmp_link_policy.o(i.LMpol_Reset_Flush_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LMpol_Reset_Flush_Timeout &rArr; LMtmr_Reset_Timer &rArr; LMtmr_Enlist_Timer
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Reset_Timer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Link_Tx_Activity
</UL>

<P><STRONG><a name="[ea]"></a>LMpol_Scan_All_Links_For_Pending_Flushes</STRONG> (Thumb, 206 bytes, Stack size 112 bytes, lmp_link_policy.o(i.LMpol_Scan_All_Links_For_Pending_Flushes))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = LMpol_Scan_All_Links_For_Pending_Flushes &rArr; BTq_Ack_Last_Dequeued &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_BB_Dequeue_Next
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Enable_L2CAP_Traffic
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[eb]"></a>LMpol_Scan_For_Pending_Broadcast</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lmp_link_policy.o(i.LMpol_Scan_For_Pending_Broadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LMpol_Scan_For_Pending_Broadcast &rArr; _LMpol_Get_Master_Broadcast_Tx &rArr; BTq_Ack_Last_Dequeued &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Master_Broadcast_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[3db]"></a>LMpol_Sleep</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lmp_link_policy.o(i.LMpol_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = LMpol_Sleep &rArr; LC_Sleep &rArr; USLCsleep_Request &rArr; USLCsleep_State_Dispatcher &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Get_Interval_To_Periodic_Inq
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Sleep
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Is_Sleep_Possible
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Get_Interval_To_Next_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Park_Activity
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Beacon_Tx
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Slave_Sniff_Activity
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Master_Sniff_Activity
</UL>

<P><STRONG><a name="[15d]"></a>LMpol_Sniff_Activation_On_Next_Frame</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lmp_link_policy.o(i.LMpol_Sniff_Activation_On_Next_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = LMpol_Sniff_Activation_On_Next_Frame &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Timing_Equation_Satisfied
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Get_Emergency_Poll_Activity
</UL>

<P><STRONG><a name="[377]"></a>LMpolicy_Clear_Link_If_Parked</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lmp_link_policy_protocol.o(i.LMpolicy_Clear_Link_If_Parked))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LMpolicy_Clear_Link_If_Parked &rArr; _Send_HC_Mode_Change_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reset
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Decr_Links_In_Low_Power
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Free_Pm_Addr
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Free_Ar_Addr
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Free_Am_Addr
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Mode_Change_Event
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Remove_UnPark_Link
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Remove_Park_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Disconnect_Acl
</UL>

<P><STRONG><a name="[44]"></a>LMpolicy_Enter_Park_Mode_Complete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lmp_link_policy_protocol.o(i.LMpolicy_Enter_Park_Mode_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LMpolicy_Enter_Park_Mode_Complete &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_link_policy_protocol.o(i.LMpolicy_Initialise)
</UL>
<P><STRONG><a name="[3ea]"></a>LMpolicy_Enter_Sniff_Mode</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lmp_link_policy_protocol.o(i.LMpolicy_Enter_Sniff_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = LMpolicy_Enter_Sniff_Mode &rArr; _Send_HC_Mode_Change_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Piconet_Clock_Ex
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Timer_On_Timing_Equation
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Adjust_Wakeup_Slot_Time
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Mode_Change_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Accepted
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Sniff_Req_Accepted_Ack_Handler
</UL>

<P><STRONG><a name="[45]"></a>LMpolicy_Exit_Park_Mode_Complete</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lmp_link_policy_protocol.o(i.LMpolicy_Exit_Park_Mode_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LMpolicy_Exit_Park_Mode_Complete &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_link_policy_protocol.o(i.LMpolicy_Initialise)
</UL>
<P><STRONG><a name="[337]"></a>LMpolicy_Initialise</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lmp_link_policy_protocol.o(i.LMpolicy_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LMpolicy_Initialise
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Register_Event_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Initialise
</UL>

<P><STRONG><a name="[3af]"></a>LMpolicy_LMP_Accepted</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, lmp_link_policy_protocol.o(i.LMpolicy_LMP_Accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = LMpolicy_LMP_Accepted &rArr; LMpolicy_LM_Return_From_Sniff &rArr; LMpol_Adjust_ACL_Packet_Types_On_Link &rArr; LMpol_Adjust_Peer_Packet_Type &rArr; LMqos_Send_LMP_Preferred_Rate &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Disconnect
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Enable_L2CAP_Traffic
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Disable_L2CAP_Traffic
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Insert_Park_Link
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Return_From_Sniff
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Free_Pm_Addr
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Free_Ar_Addr
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Unpark_Commit
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Enter_Sniff_Mode
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Mode_Change_Event
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Remove_UnPark_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Accepted_Common
</UL>

<P><STRONG><a name="[83]"></a>LMpolicy_LMP_Modify_Beacon</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lmp_link_policy_protocol.o(i.LMpolicy_LMP_Modify_Beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = LMpolicy_LMP_Modify_Beacon &rArr; LMpolicy_Extract_Park_Parameters &rArr; LMpolicy_Are_Links_Being_Parked_UnParked
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Piconet_Clock_Ex
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Timer_On_Timing_Equation
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Extract_Park_Parameters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[3b5]"></a>LMpolicy_LMP_Not_Accepted</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, lmp_link_policy_protocol.o(i.LMpolicy_LMP_Not_Accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = LMpolicy_LMP_Not_Accepted &rArr; LMpolicy_LM_Return_From_Sniff &rArr; LMpol_Adjust_ACL_Packet_Types_On_Link &rArr; LMpol_Adjust_Peer_Packet_Type &rArr; LMqos_Send_LMP_Preferred_Rate &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reset
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Enable_L2CAP_Traffic
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Return_From_Sniff
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Free_Pm_Addr
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Free_Ar_Addr
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Adjust_ACL_Packet_Types_On_Link
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Adjust_Supervision_Timeout_On_Link
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Mode_Change_Event
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Remove_Park_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Not_Accepted_Common
</UL>

<P><STRONG><a name="[1a]"></a>LMpolicy_LMP_Park_Accepted_Ack</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lmp_link_policy_protocol.o(i.LMpolicy_LMP_Park_Accepted_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LMpolicy_LMP_Park_Accepted_Ack &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
</UL>
<P><STRONG><a name="[81]"></a>LMpolicy_LMP_Park_Req</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, lmp_link_policy_protocol.o(i.LMpolicy_LMP_Park_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = LMpolicy_LMP_Park_Req &rArr; LM_Encode_LMP_Accepted_PDU &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_Accepted_PDU
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Enable_L2CAP_Traffic
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Disable_L2CAP_Traffic
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Insert_Park_Link
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Extract_Park_Parameters
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Derive_Park_Parameters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>LMpolicy_LMP_Set_Broadcast_Scan_Window</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lmp_link_policy_protocol.o(i.LMpolicy_LMP_Set_Broadcast_Scan_Window))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMpolicy_LMP_Set_Broadcast_Scan_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>LMpolicy_LMP_Sniff_Req</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, lmp_link_policy_protocol.o(i.LMpolicy_LMP_Sniff_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = LMpolicy_LMP_Sniff_Req &rArr; LMpol_Adjust_ACL_Packet_Types_On_Link &rArr; LMpol_Adjust_Peer_Packet_Type &rArr; LMqos_Send_LMP_Preferred_Rate &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_Accepted_PDU
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Extract_Sniff_Parameters
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Derive_Sniff_Parameters
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Adjust_ACL_Packet_Types_On_Link
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Adjust_Supervision_Timeout_On_Link
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Sniff_Req
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Mode_Change_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[1c]"></a>LMpolicy_LMP_Sniff_Req_Accepted_Ack</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lmp_link_policy_protocol.o(i.LMpolicy_LMP_Sniff_Req_Accepted_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LMpolicy_LMP_Sniff_Req_Accepted_Ack &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
</UL>
<P><STRONG><a name="[19]"></a>LMpolicy_LMP_Supervision_Timeout_Ack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lmp_link_qos.o(i.LMpolicy_LMP_Supervision_Timeout_Ack))
<BR>[Address Reference Count : 1]<UL><LI> lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
</UL>
<P><STRONG><a name="[84]"></a>LMpolicy_LMP_Unpark_Bd_Addr_Req</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, lmp_link_policy_protocol.o(i.LMpolicy_LMP_Unpark_Bd_Addr_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LMpolicy_LMP_Unpark_Bd_Addr_Req &rArr; LMutils_Bd_Addr_Match
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Bd_Addr_Match
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>LMpolicy_LMP_Unpark_Pm_Addr_Req</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, lmp_link_policy_protocol.o(i.LMpolicy_LMP_Unpark_Pm_Addr_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LMpolicy_LMP_Unpark_Pm_Addr_Req &rArr; BTtimer_Set_Slots &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_Get_Dispatched_LMP_PDU_Length
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint16
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Insert_UnPark_Link
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[1b]"></a>LMpolicy_LMP_Unpark_Pmaddr_Accepted_Ack</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lmp_link_policy_protocol.o(i.LMpolicy_LMP_Unpark_Pmaddr_Accepted_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LMpolicy_LMP_Unpark_Pmaddr_Accepted_Ack &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
</UL>
<P><STRONG><a name="[80]"></a>LMpolicy_LMP_Unsniff_Req</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, lmp_link_policy_protocol.o(i.LMpolicy_LMP_Unsniff_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = LMpolicy_LMP_Unsniff_Req &rArr; LMpolicy_LM_Return_From_Sniff &rArr; LMpol_Adjust_ACL_Packet_Types_On_Link &rArr; LMpol_Adjust_Peer_Packet_Type &rArr; LMqos_Send_LMP_Preferred_Rate &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Return_From_Sniff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[1d]"></a>LMpolicy_LMP_Unsniff_Req_Accepted_Ack</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lmp_link_policy_protocol.o(i.LMpolicy_LMP_Unsniff_Req_Accepted_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LMpolicy_LMP_Unsniff_Req_Accepted_Ack &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
</UL>
<P><STRONG><a name="[3a2]"></a>LMpolicy_LM_Exit_Park_Mode</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lmp_link_policy_protocol.o(i.LMpolicy_LM_Exit_Park_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LMpolicy_LM_Exit_Park_Mode &rArr; BTtimer_Set_Slots &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Remove_Park_Link
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Insert_UnPark_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Disconnect_Req
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Policy_Command
</UL>

<P><STRONG><a name="[3a1]"></a>LMpolicy_LM_Exit_Sniff_Mode</STRONG> (Thumb, 50 bytes, Stack size 64 bytes, lmp_link_policy_protocol.o(i.LMpolicy_LM_Exit_Sniff_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LMpolicy_LM_Exit_Sniff_Mode &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Disconnect_Req
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Policy_Command
</UL>

<P><STRONG><a name="[3f4]"></a>LMpolicy_LM_Park_Mode</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, lmp_link_policy_protocol.o(i.LMpolicy_LM_Park_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = LMpolicy_LM_Park_Mode &rArr; LMpolicy_Derive_Park_Parameters &rArr; LC_Get_Piconet_Clock_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Insert_Park_Link
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Derive_Park_Parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Policy_Command
</UL>

<P><STRONG><a name="[55d]"></a>LMpolicy_LM_Role_Discovery</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lmp_link_policy_protocol.o(i.LMpolicy_LM_Role_Discovery))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Policy_Command
</UL>

<P><STRONG><a name="[3f5]"></a>LMpolicy_LM_Sniff_Mode</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, lmp_link_policy_protocol.o(i.LMpolicy_LM_Sniff_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = LMpolicy_LM_Sniff_Mode &rArr; LMpol_Adjust_ACL_Packet_Types_On_Link &rArr; LMpol_Adjust_Peer_Packet_Type &rArr; LMqos_Send_LMP_Preferred_Rate &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Derive_Sniff_Parameters
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Adjust_ACL_Packet_Types_On_Link
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Adjust_Supervision_Timeout_On_Link
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Sniff_Req
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Policy_Command
</UL>

<P><STRONG><a name="[39f]"></a>LMpolicy_Remove_Link</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lmp_link_policy_protocol.o(i.LMpolicy_Remove_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMpolicy_Remove_Link
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Remove_UnPark_Link
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Remove_Park_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Disconnect_Inf
</UL>

<P><STRONG><a name="[e2]"></a>LMpolicy_Service_Park_Links</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, lmp_link_policy_protocol.o(i.LMpolicy_Service_Park_Links))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = LMpolicy_Service_Park_Links &rArr; _LMpol_Execute_Unpark_Request &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Execute_Park_Request
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Execute_Unpark_Request
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Remove_UnPark_Link
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Remove_Park_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[43]"></a>LMpolicy_Unpark_Timeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lmp_link_policy_protocol.o(i.LMpolicy_Unpark_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LMpolicy_Unpark_Timeout &rArr; _Send_HC_Mode_Change_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Unpark_Rollback
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Free_Am_Addr
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Mode_Change_Event
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Remove_UnPark_Link
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_link_policy_protocol.o(i.LMpolicy_Exit_Park_Mode_Complete_Handler)
</UL>
<P><STRONG><a name="[3f9]"></a>LMpolicy_Write_Flush_Timeout</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lmp_link_policy.o(i.LMpolicy_Write_Flush_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LMpolicy_Write_Flush_Timeout &rArr; LMtmr_Clear_Timer &rArr; LMtmr_Delist_Timer
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[3f1]"></a>LMqos_Adjust_Supervision_Timeout_On_Link</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lmp_link_qos.o(i.LMqos_Adjust_Supervision_Timeout_On_Link))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Sniff_Mode
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Sniff_Req
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Not_Accepted
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Return_From_Sniff
</UL>

<P><STRONG><a name="[63]"></a>LMqos_Channel_Quality_Timeout</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, lmp_link_qos.o(i.LMqos_Channel_Quality_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = LMqos_Channel_Quality_Timeout &rArr; LMqos_Send_LMP_Preferred_Rate &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Reset_Timer
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Update_Allowed_Packets
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Send_LMP_Preferred_Rate
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_ch.o(i._Send_HC_Connection_Complete_Event_ACL)
</UL>
<P><STRONG><a name="[3fa]"></a>LMqos_Check_Link_Flow_Specification</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, lmp_link_qos.o(i.LMqos_Check_Link_Flow_Specification))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = LMqos_Check_Link_Flow_Specification
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Max_Packet_Size
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Flow_Specification
</UL>

<P><STRONG><a name="[3fc]"></a>LMqos_Check_Link_QoS</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, lmp_link_qos.o(i.LMqos_Check_Link_QoS))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = LMqos_Check_Link_QoS &rArr; LMconfig_LM_Set_Device_State &rArr; LC_Inquiry_Scan_Cancel &rArr; USLCinqScan_Cancel &rArr; USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Max_Packet_Size
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_QOS_Setup
</UL>

<P><STRONG><a name="[3fe]"></a>LMqos_Convert_To_Max_Slots</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lmp_link_qos.o(i.LMqos_Convert_To_Max_Slots))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Change_Validated_Packet_Type
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Accepted
</UL>

<P><STRONG><a name="[3fd]"></a>LMqos_Get_Communication_Interval</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, lmp_link_qos.o(i.LMqos_Get_Communication_Interval))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = LMqos_Get_Communication_Interval
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Max_Packet_Size
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Flow_Specification
</UL>

<P><STRONG><a name="[33c]"></a>LMqos_Initialise</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lmp_link_qos.o(i.LMqos_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Initialise
</UL>

<P><STRONG><a name="[3b0]"></a>LMqos_LMP_Accepted</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, lmp_link_qos.o(i.LMqos_LMP_Accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = LMqos_LMP_Accepted &rArr; _Send_HC_Flow_Spec_Complete_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Send_HC_Packet_Type_Changed_Event
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Update_Allowed_Packets
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Update_Link_Flow_Spec
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Convert_To_Max_Slots
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_QoS_Setup_Complete_Event
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Max_Slots_Change_Event
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Flow_Spec_Complete_Event
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Update_Link_QoS
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Accepted_Common
</UL>

<P><STRONG><a name="[59]"></a>LMqos_LMP_Auto_Rate</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lmp_link_qos.o(i.LMqos_LMP_Auto_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = LMqos_LMP_Auto_Rate &rArr; LMqos_Send_LMP_Preferred_Rate &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Send_LMP_Preferred_Rate
</UL>
<BR>[Address Reference Count : 4]<UL><LI> lmp_cmd_disp.o(.constdata)
<LI> tc_interface.o(i.TC_Write_Features)
<LI> tc_interface.o(i.TC_Write_Local_Extended_Features)
<LI> tc_interface.o(i.TC_Write_Local_Features)
</UL>
<P><STRONG><a name="[8d]"></a>LMqos_LMP_Max_Slot</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lmp_link_qos.o(i.LMqos_LMP_Max_Slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LMqos_LMP_Max_Slot &rArr; _Send_HC_Max_Slots_Change_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Update_Allowed_Packets
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Max_Slots_Change_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>LMqos_LMP_Max_Slot_Req</STRONG> (Thumb, 68 bytes, Stack size 80 bytes, lmp_link_qos.o(i.LMqos_LMP_Max_Slot_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = LMqos_LMP_Max_Slot_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Max_Slots_Allowed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[3b6]"></a>LMqos_LMP_Not_Accepted</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lmp_link_qos.o(i.LMqos_LMP_Not_Accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LMqos_LMP_Not_Accepted &rArr; _Send_HC_Flow_Spec_Complete_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Send_HC_Packet_Type_Changed_Event
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_QoS_Setup_Complete_Event
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Flow_Spec_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Not_Accepted_Common
</UL>

<P><STRONG><a name="[86]"></a>LMqos_LMP_Preferred_Rate</STRONG> (Thumb, 182 bytes, Stack size 20 bytes, lmp_link_qos.o(i.LMqos_LMP_Preferred_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LMqos_LMP_Preferred_Rate &rArr; LMqos_Update_Allowed_Packets
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Update_Allowed_Packets
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>LMqos_LMP_Quality_of_Service</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lmp_link_qos.o(i.LMqos_LMP_Quality_of_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = LMqos_LMP_Quality_of_Service &rArr; _Send_HC_QoS_Setup_Complete_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Write_QoS
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint16
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_QoS_Setup_Complete_Event
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Max_Packet_Size
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>LMqos_LMP_Quality_of_Service_Req</STRONG> (Thumb, 138 bytes, Stack size 72 bytes, lmp_link_qos.o(i.LMqos_LMP_Quality_of_Service_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = LMqos_LMP_Quality_of_Service_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint16
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Update_QoS
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_QoS_Setup_Complete_Event
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Max_Packet_Size
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>LMqos_LMP_Supervision_Timeout</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, lmp_link_qos.o(i.LMqos_LMP_Supervision_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LMqos_LMP_Supervision_Timeout &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Reset_Timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[37c]"></a>LMqos_LM_Auto_Rate</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, lmp_link_qos.o(i.LMqos_LM_Auto_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LMqos_LM_Auto_Rate &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSconfig_Is_Feature_Supported
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Finalise_Connection_Setup
</UL>

<P><STRONG><a name="[37f]"></a>LMqos_LM_Change_Packet_Type</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lmp_link_qos.o(i.LMqos_LM_Change_Packet_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = LMqos_LM_Change_Packet_Type &rArr; LMqos_LM_Change_Validated_Packet_Type &rArr; LMqos_LM_Max_Slot_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Validate_Change_Packet_Type
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Change_Validated_Packet_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Finalise_Connection_Setup
</UL>

<P><STRONG><a name="[407]"></a>LMqos_LM_Change_Validated_Packet_Type</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lmp_link_qos.o(i.LMqos_LM_Change_Validated_Packet_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = LMqos_LM_Change_Validated_Packet_Type &rArr; LMqos_LM_Max_Slot_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Handle
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Update_Allowed_Packets
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Max_Slot_Req
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Convert_To_Max_Slots
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Update_Link_QoS
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Change_Packet_Type
</UL>

<P><STRONG><a name="[409]"></a>LMqos_LM_Flow_Specification</STRONG> (Thumb, 208 bytes, Stack size 104 bytes, lmp_link_qos.o(i.LMqos_LM_Flow_Specification))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = LMqos_LM_Flow_Specification &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Get_Communication_Interval
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Check_Link_Flow_Specification
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Policy_Command
</UL>

<P><STRONG><a name="[380]"></a>LMqos_LM_Gen_Allowed_Packet_Types</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, lmp_link_qos.o(i.LMqos_LM_Gen_Allowed_Packet_Types))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Update_Allowed_Packets
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Finalise_Connection_Setup
</UL>

<P><STRONG><a name="[408]"></a>LMqos_LM_Max_Slot_Req</STRONG> (Thumb, 50 bytes, Stack size 64 bytes, lmp_link_qos.o(i.LMqos_LM_Max_Slot_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LMqos_LM_Max_Slot_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Change_Validated_Packet_Type
</UL>

<P><STRONG><a name="[40a]"></a>LMqos_LM_QOS_Setup</STRONG> (Thumb, 62 bytes, Stack size 72 bytes, lmp_link_qos.o(i.LMqos_LM_QOS_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = LMqos_LM_QOS_Setup &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Check_Link_QoS
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Policy_Command
</UL>

<P><STRONG><a name="[556]"></a>LMqos_LM_Read_Supervision_Timeout</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lmp_link_qos.o(i.LMqos_LM_Read_Supervision_Timeout))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[406]"></a>LMqos_LM_Validate_Change_Packet_Type</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, lmp_link_qos.o(i.LMqos_LM_Validate_Change_Packet_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LMqos_LM_Validate_Change_Packet_Type &rArr; LMaclctr_Find_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Change_Packet_Type
</UL>

<P><STRONG><a name="[40b]"></a>LMqos_LM_Write_Supervision_Timeout</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, lmp_link_qos.o(i.LMqos_LM_Write_Supervision_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = LMqos_LM_Write_Supervision_Timeout &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Reset_Timer
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[400]"></a>LMqos_Send_HC_Packet_Type_Changed_Event</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, lmp_link_qos.o(i.LMqos_Send_HC_Packet_Type_Changed_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LMqos_Send_HC_Packet_Type_Changed_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Not_Accepted
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Accepted
</UL>

<P><STRONG><a name="[3d3]"></a>LMqos_Send_LMP_Preferred_Rate</STRONG> (Thumb, 58 bytes, Stack size 64 bytes, lmp_link_qos.o(i.LMqos_Send_LMP_Preferred_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LMqos_Send_LMP_Preferred_Rate &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Auto_Rate
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Channel_Quality_Timeout
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Adjust_Peer_Packet_Type
</UL>

<P><STRONG><a name="[394]"></a>LMqos_Update_Allowed_Packets</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lmp_link_qos.o(i.LMqos_Update_Allowed_Packets))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMqos_Update_Allowed_Packets
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Gen_Allowed_Packet_Types
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Change_Validated_Packet_Type
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Preferred_Rate
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Max_Slot
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Accepted
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Channel_Quality_Timeout
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Not_Accepted
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Adjust_ACL_Packet_Types_On_Link
</UL>

<P><STRONG><a name="[402]"></a>LMqos_Update_Link_Flow_Spec</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, lmp_link_qos.o(i.LMqos_Update_Link_Flow_Spec))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = LMqos_Update_Link_Flow_Spec &rArr; LMconfig_LM_Set_Device_State &rArr; LC_Inquiry_Scan_Cancel &rArr; USLCinqScan_Cancel &rArr; USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Max_Packet_Size
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Accepted
</UL>

<P><STRONG><a name="[405]"></a>LMqos_Update_QoS</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lmp_link_qos.o(i.LMqos_Update_QoS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMqos_Update_QoS
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Quality_of_Service_Req
</UL>

<P><STRONG><a name="[238]"></a>LMqos_Write_QoS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lmp_link_qos.o(i.LMqos_Write_QoS))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_LMP_Send_Test_Control
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Quality_of_Service
</UL>

<P><STRONG><a name="[3c4]"></a>LMscan_Get_Interval_To_Next_Scan</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, lmp_scan.o(i.LMscan_Get_Interval_To_Next_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LMscan_Get_Interval_To_Next_Scan &rArr; BTtimer_Is_Expired &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Page_Scans_Allowed
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Inquiry_Scans_Allowed
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Connected_As_Scatternet
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Sleep
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Sleep
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Complete_Success
</UL>

<P><STRONG><a name="[334]"></a>LMscan_Initialise</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lmp_scan.o(i.LMscan_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LMscan_Initialise &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Register_Event_Handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Initialise
</UL>

<P><STRONG><a name="[52]"></a>LMscan_Inquiry_Scan_Start</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, lmp_scan.o(i.LMscan_Inquiry_Scan_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = LMscan_Inquiry_Scan_Start &rArr; LC_Inquiry_Scan_Request &rArr; USLCinqScan_Request &rArr; USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_get_device_state
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Reset_Timer
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Interval_To_Next_Wakeup
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Inquiry_Scan_Request
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Inquiry_Scans_Allowed
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Write_Scan_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_scan.o(i.LMscan_Initialise)
</UL>
<P><STRONG><a name="[557]"></a>LMscan_LM_Read_Supported_IAC</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, lmp_scan.o(i.LMscan_LM_Read_Supported_IAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LMscan_LM_Read_Supported_IAC
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[40d]"></a>LMscan_LM_Write_Supported_IAC</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lmp_scan.o(i.LMscan_LM_Write_Supported_IAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LMscan_LM_Write_Supported_IAC
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint24
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[4e]"></a>LMscan_Page_Scan_Incoming</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lmp_scan.o(i.LMscan_Page_Scan_Incoming))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = LMscan_Page_Scan_Incoming &rArr; LMconnection_LM_Incoming_Link_Inf &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Incoming_Link_Inf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_scan.o(i.LMscan_Initialise)
</UL>
<P><STRONG><a name="[51]"></a>LMscan_Page_Scan_Start</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, lmp_scan.o(i.LMscan_Page_Scan_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = LMscan_Page_Scan_Start &rArr; LMaclctr_Alloc_Link &rArr; LC_Alloc_Link &rArr; DL_Alloc_Link &rArr; DL_Initialise_Link &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Alloc_Link
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_get_device_state
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Reset_Timer
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Interval_To_Next_Wakeup
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Page_Scan_Request
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Device_FHS_Ref
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Page_Scans_Allowed
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Write_Scan_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_scan.o(i.LMscan_Initialise)
</UL>
<P><STRONG><a name="[40f]"></a>LMscan_Read_Scan_Activity</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lmp_scan.o(i.LMscan_Read_Scan_Activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMscan_Read_Scan_Activity
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[373]"></a>LMscan_Read_Scan_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lmp_scan.o(i.LMscan_Read_Scan_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Complete_Success
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Standby_Low_Power_Timeout
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Local_Bd_Addr
</UL>

<P><STRONG><a name="[54b]"></a>LMscan_Write_Inquiry_Scan_Type</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lmp_scan.o(i.LMscan_Write_Inquiry_Scan_Type))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[54c]"></a>LMscan_Write_Page_Scan_Type</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lmp_scan.o(i.LMscan_Write_Page_Scan_Type))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[410]"></a>LMscan_Write_Scan_Activity</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, lmp_scan.o(i.LMscan_Write_Scan_Activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = LMscan_Write_Scan_Activity &rArr; LMaclctr_Alloc_Link &rArr; LC_Alloc_Link &rArr; DL_Alloc_Link &rArr; DL_Initialise_Link &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Free_Link
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Alloc_Link
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Page_Scan_Cancel
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Inquiry_Scan_Cancel
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Device_FHS_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[ce]"></a>LMscan_Write_Scan_Enable</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lmp_scan.o(i.LMscan_Write_Scan_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = LMscan_Write_Scan_Enable &rArr; LMscan_Page_Scan_Start &rArr; LMaclctr_Alloc_Link &rArr; LC_Alloc_Link &rArr; DL_Alloc_Link &rArr; DL_Initialise_Link &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Free_Link
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Page_Scan_Cancel
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Inquiry_Scan_Cancel
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Page_Scan_Start
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Inquiry_Scan_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Local_Bd_Addr
</UL>

<P><STRONG><a name="[41b]"></a>LMsec_core_Array_Xor</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lmp_sec_core.o(i.LMsec_core_Array_Xor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LMsec_core_Array_Xor
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Temp_Key
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_UnitKey_Setup
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_CombKey_Setup
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Change_To_Temporary_Key
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Update_Link_Key
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Complete_CombKey_Setup
</UL>

<P><STRONG><a name="[411]"></a>LMsec_core_Auth_Allowed</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lmp_sec_core.o(i.LMsec_core_Auth_Allowed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LMsec_core_Auth_Allowed &rArr; BTtimer_Is_Expired &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Bd_Addr_Match
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Link_Key_Request_Reply
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Authentication_Requested
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Au_Rand
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_Authentication
</UL>

<P><STRONG><a name="[412]"></a>LMsec_core_Auth_Challenge</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, lmp_sec_core.o(i.LMsec_core_Auth_Challenge))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = LMsec_core_Auth_Challenge &rArr; LM_SecEng_Authenticate_E1 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Get_Current_Key_Persistance
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_128_Ex
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Message
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Authenticate_E1
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Link_Key_Request_Reply
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Authentication_Requested
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Unit_Key
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Not_Accepted
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Comb_Key
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Au_Rand
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_Authentication
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Retry_Auth_Challenge
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Change_To_Temporary_Key
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Mutual_Authentication
</UL>

<P><STRONG><a name="[415]"></a>LMsec_core_Auth_Complete</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, lmp_sec_core.o(i.LMsec_core_Auth_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = LMsec_core_Auth_Complete &rArr; LMconnection_LM_Auth_Complete &rArr; LMconnection_Local_Setup_Complete &rArr; LMconnection_Finalise_Connection_Setup &rArr; LMqos_LM_Change_Packet_Type &rArr; LMqos_LM_Change_Validated_Packet_Type &rArr; LMqos_LM_Max_Slot_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Pause_Encryption_Req
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Disconnect_Req
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Auth_Complete
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_Send_HCI_Event
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Set_Encryption
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Pin_Code_Request_Reply
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Pin_Code_Request_Negative_Reply
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Link_Key_Request_Reply
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Use_Semi_Permanent_Key
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Sres
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Not_Accepted
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_In_Rand
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Au_Rand
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Accepted
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Pin_Code_Request_Timeout
</UL>

<P><STRONG><a name="[418]"></a>LMsec_core_Auth_Response</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, lmp_sec_core.o(i.LMsec_core_Auth_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = LMsec_core_Auth_Response &rArr; LM_SecEng_Authenticate_E1 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Get_Current_Key_Persistance
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Message
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Authenticate_E1
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Link_Key_Request_Reply
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Au_Rand
</UL>

<P><STRONG><a name="[419]"></a>LMsec_core_Change_To_Semi_Permanent_Key</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lmp_sec_core.o(i.LMsec_core_Change_To_Semi_Permanent_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = LMsec_core_Change_To_Semi_Permanent_Key &rArr; LMsec_peer_Send_LMP_Message &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Set_Key_Persistance
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Message
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Master_Link_Key
</UL>

<P><STRONG><a name="[41a]"></a>LMsec_core_Change_To_Temporary_Key</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, lmp_sec_core.o(i.LMsec_core_Change_To_Temporary_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = LMsec_core_Change_To_Temporary_Key &rArr; LMsec_core_Auth_Challenge &rArr; LM_SecEng_Authenticate_E1 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Set_Key_Persistance
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Message
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Generate_Key_E22
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Challenge
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Array_Xor
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Master_Link_Key
</UL>

<P><STRONG><a name="[351]"></a>LMsec_core_Clean_On_Detach</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lmp_sec_core.o(i.LMsec_core_Clean_On_Detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LMsec_core_Clean_On_Detach &rArr; LMtmr_Clear_Timer &rArr; LMtmr_Delist_Timer
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Free_Link
</UL>

<P><STRONG><a name="[17]"></a>LMsec_core_Enable_Rx_Encryption</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lmp_sec_core.o(i.LMsec_core_Enable_Rx_Encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMsec_core_Enable_Rx_Encryption
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
</UL>
<P><STRONG><a name="[2f]"></a>LMsec_core_Encryption_Key_Refresh</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lmp_sec_core.o(i.LMsec_core_Encryption_Key_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = LMsec_core_Encryption_Key_Refresh &rArr; LMsec_peer_Send_LMP_Pause_Encryption_Req &rArr; LM_Encode_LMP_PDU_Fully_Encoded &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Reset_Timer
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Pause_Encryption_Req
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lmp_ch.o(i.LMconnection_LM_Page_Complete_NO_ERROR)
<LI> lmp_ch.o(i.LMconnection_Switch_Complete_Success)
</UL>
<P><STRONG><a name="[428]"></a>LMsec_core_Get_Broadcast_Key_Length</STRONG> (Thumb, 180 bytes, Stack size 36 bytes, lmp_sec_core.o(i.LMsec_core_Get_Broadcast_Key_Length))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LMsec_core_Get_Broadcast_Key_Length
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Sres
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Encryption_Mode_Req
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Encryption_Key_Size_Req
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Accepted
</UL>

<P><STRONG><a name="[41c]"></a>LMsec_core_Get_Link_Key</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lmp_sec_core.o(i.LMsec_core_Get_Link_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = LMsec_core_Get_Link_Key &rArr; LMsec_upper_Send_HCI_Event &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_Send_HCI_Event
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMkeydb_Read_Link_Key
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Authentication_Requested
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Au_Rand
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_Authentication
</UL>

<P><STRONG><a name="[385]"></a>LMsec_core_Init_Authentication</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, lmp_sec_core.o(i.LMsec_core_Init_Authentication))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = LMsec_core_Init_Authentication &rArr; LMsec_core_Auth_Challenge &rArr; LM_SecEng_Authenticate_E1 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Send_LMP_Detach
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Get_Link_Key
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Challenge
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Allowed
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Accept
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Not_Accepted
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Accepted
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Handle_Incoming_LM_Connection_Request
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Success
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Failure
</UL>

<P><STRONG><a name="[41d]"></a>LMsec_core_Init_CombKey_Setup</STRONG> (Thumb, 64 bytes, Stack size 64 bytes, lmp_sec_core.o(i.LMsec_core_Init_CombKey_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = LMsec_core_Init_CombKey_Setup &rArr; LM_SecEng_Generate_Key_E21 &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Write_CombKey_Part
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_128_Ex
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Message
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Generate_Key_E21
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Array_Xor
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Change_Connection_Link_Key
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Unit_Key
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Comb_Key
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_LinkKey_Negotiation
</UL>

<P><STRONG><a name="[398]"></a>LMsec_core_Init_Encryption</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lmp_sec_core.o(i.LMsec_core_Init_Encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = LMsec_core_Init_Encryption &rArr; LMsec_peer_Send_LMP_Message &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Disable_L2CAP_Traffic
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Message
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Auth_Complete
</UL>

<P><STRONG><a name="[41e]"></a>LMsec_core_Init_LinkKey_Negotiation</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lmp_sec_core.o(i.LMsec_core_Init_LinkKey_Negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = LMsec_core_Init_LinkKey_Negotiation &rArr; LMsec_core_Init_CombKey_Setup &rArr; LM_SecEng_Generate_Key_E21 &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_UnitKey_Setup
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_CombKey_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_In_Rand
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Accepted
</UL>

<P><STRONG><a name="[41f]"></a>LMsec_core_Init_UnitKey_Setup</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lmp_sec_core.o(i.LMsec_core_Init_UnitKey_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = LMsec_core_Init_UnitKey_Setup &rArr; LMsec_peer_Send_LMP_Message &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Message
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Array_Xor
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Unit_Key
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Comb_Key
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_LinkKey_Negotiation
</UL>

<P><STRONG><a name="[339]"></a>LMsec_core_Initialise</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lmp_sec_core.o(i.LMsec_core_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Initialise
</UL>

<P><STRONG><a name="[43c]"></a>LMsec_core_Is_Broadcast_Key_Length_Possible</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, lmp_sec_core.o(i.LMsec_core_Is_Broadcast_Key_Length_Possible))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LMsec_core_Is_Broadcast_Key_Length_Possible
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Set_Connection_Encryption
</UL>

<P><STRONG><a name="[420]"></a>LMsec_core_PeerData_Tx_Go_Callback</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lmp_sec_core.o(i.LMsec_core_PeerData_Tx_Go_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = LMsec_core_PeerData_Tx_Go_Callback &rArr; LMsec_core_Set_Encryption_Complete &rArr; LMconnection_LM_Encrypt_Complete &rArr; LMconnection_Local_Setup_Complete &rArr; LMconnection_Finalise_Connection_Setup &rArr; LMqos_LM_Change_Packet_Type &rArr; LMqos_LM_Change_Validated_Packet_Type &rArr; LMqos_LM_Max_Slot_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Set_Encryption_Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Accepted
</UL>

<P><STRONG><a name="[422]"></a>LMsec_core_PeerData_Tx_Stop_Callback</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lmp_sec_core.o(i.LMsec_core_PeerData_Tx_Stop_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = LMsec_core_PeerData_Tx_Stop_Callback &rArr; LMsec_peer_Send_LMP_Message &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Message
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Pause_Encryption_Req
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Stop_Encryption
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Start_Encryption
</UL>

<P><STRONG><a name="[423]"></a>LMsec_core_RecordAuthFailure</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lmp_sec_core.o(i.LMsec_core_RecordAuthFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LMsec_core_RecordAuthFailure &rArr; _AgeRepeatAttemptsList &rArr; BTtimer_Get_Native_Clock &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Bd_Addr_Match
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Get_Native_Clock
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Set_Bd_Addr
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AgeRepeatAttemptsList
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Sres
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Local_Failed_Attempts_Counter
</UL>

<P><STRONG><a name="[425]"></a>LMsec_core_RecordAuthSuccess</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lmp_sec_core.o(i.LMsec_core_RecordAuthSuccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LMsec_core_RecordAuthSuccess &rArr; LMutils_Bd_Addr_Match
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Bd_Addr_Match
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Sres
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Clear_Local_Failed_Attempts_Counter
</UL>

<P><STRONG><a name="[53]"></a>LMsec_core_Retry_Auth_Challenge</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lmp_sec_core.o(i.LMsec_core_Retry_Auth_Challenge))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = LMsec_core_Retry_Auth_Challenge &rArr; LMsec_core_Auth_Challenge &rArr; LM_SecEng_Authenticate_E1 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Challenge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_sec_core.o(i.LMsec_core_Auth_Challenge)
</UL>
<P><STRONG><a name="[417]"></a>LMsec_core_Set_Encryption</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lmp_sec_core.o(i.LMsec_core_Set_Encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = LMsec_core_Set_Encryption &rArr; LMsec_peer_Send_LMP_Message &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Disable_L2CAP_Traffic
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Get_Current_Key_Persistance
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Message
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Set_Connection_Encryption
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Accepted
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Complete
</UL>

<P><STRONG><a name="[421]"></a>LMsec_core_Set_Encryption_Complete</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lmp_sec_core.o(i.LMsec_core_Set_Encryption_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = LMsec_core_Set_Encryption_Complete &rArr; LMconnection_LM_Encrypt_Complete &rArr; LMconnection_Local_Setup_Complete &rArr; LMconnection_Finalise_Connection_Setup &rArr; LMqos_LM_Change_Packet_Type &rArr; LMqos_LM_Change_Validated_Packet_Type &rArr; LMqos_LM_Max_Slot_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Encrypt_Complete
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Enable_L2CAP_Traffic
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_Send_HCI_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Stop_Encryption_Req
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Start_Encryption_Req
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Not_Accepted
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Encryption_Key_Size_Req
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_PeerData_Tx_Go_Callback
</UL>

<P><STRONG><a name="[54]"></a>LMsec_core_TimeoutHandler</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, lmp_sec_core.o(i.LMsec_core_TimeoutHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = LMsec_core_TimeoutHandler &rArr; LMsec_peer_LMP_Not_Accepted &rArr; LMsec_core_Auth_Challenge &rArr; LM_SecEng_Authenticate_E1 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Not_Accepted
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Encrypt_Complete
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Auth_Complete
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Enable_L2CAP_Traffic
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Set_Key_Persistance
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Get_Previous_Key_Persistance
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_Send_HCI_Event
</UL>
<BR>[Address Reference Count : 13]<UL><LI> lmp_sec_core.o(i.LMsec_core_Init_Authentication)
<LI> lmp_sec_core.o(i.LMsec_core_Init_Encryption)
<LI> lmp_sec_peer.o(i.LMsec_peer_LMP_Comb_Key)
<LI> lmp_sec_peer.o(i.LMsec_peer_LMP_Encryption_Mode_Req)
<LI> lmp_sec_peer.o(i.LMsec_peer_LMP_In_Rand)
<LI> lmp_sec_upper.o(i.LMsec_upper_LM_Master_Link_Key)
<LI> lmp_sec_upper.o(i.LMsec_upper_LM_Set_Connection_Encryption)
<LI> lmp_sec_peer.o(i.LMsec_peer_LMP_Accepted)
<LI> lmp_sec_core.o(i.LMsec_core_Auth_Complete)
<LI> lmp_sec_peer.o(i.LMsec_peer_LMP_Temp_Rand)
<LI> lmp_sec_peer.o(i.LMsec_peer_LMP_Use_Semi_Permanent_Key)
<LI> lmp_sec_upper.o(i.LMsec_upper_LM_Authentication_Requested)
<LI> lmp_sec_upper.o(i.LMsec_upper_LM_Change_Connection_Link_Key)
</UL>
<P><STRONG><a name="[3ae]"></a>LMsec_peer_LMP_Accepted</STRONG> (Thumb, 520 bytes, Stack size 96 bytes, lmp_sec_peer.o(i.LMsec_peer_LMP_Accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = LMsec_peer_LMP_Accepted &rArr; LMsec_peer_Resume_Encryption &rArr; _Start_Encryption &rArr; _Generate_Encryption_Key &rArr; LM_SecEng_Generate_Key_E3 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Resume_Encryption
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Event
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Switch_Req
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Enable_L2CAP_Traffic
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Set_Key_Persistance
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Get_Current_Key_Persistance
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_Send_HCI_Event
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Message
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Generate_Key_E22
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Set_Encryption
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_PeerData_Tx_Go_Callback
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_LinkKey_Negotiation
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Get_Broadcast_Key_Length
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Complete
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Stop_Encryption
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Index
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Start_Encryption
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Accepted_Common
</UL>

<P><STRONG><a name="[76]"></a>LMsec_peer_LMP_Au_Rand</STRONG> (Thumb, 394 bytes, Stack size 32 bytes, lmp_sec_peer.o(i.LMsec_peer_LMP_Au_Rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = LMsec_peer_LMP_Au_Rand &rArr; LMsec_core_Auth_Challenge &rArr; LM_SecEng_Authenticate_E1 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_SSP_Enabled_On_Link
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Send_LMP_Detach
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Get_Current_Key_Persistance
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Get_Link_Key
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Response
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Complete
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Challenge
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Allowed
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Not_Accepted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>LMsec_peer_LMP_Comb_Key</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, lmp_sec_peer.o(i.LMsec_peer_LMP_Comb_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = LMsec_peer_LMP_Comb_Key &rArr; LMsec_core_Auth_Challenge &rArr; LM_SecEng_Authenticate_E1 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_Send_HCI_Event
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_UnitKey_Setup
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_CombKey_Setup
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Challenge
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Complete_CombKey_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>LMsec_peer_LMP_Encryption_Key_Size_Mask_Req</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lmp_sec_peer.o(i.LMsec_peer_LMP_Encryption_Key_Size_Mask_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = LMsec_peer_LMP_Encryption_Key_Size_Mask_Req &rArr; LMsec_peer_Send_LMP_Encryption_Key_Size_Mask_Res &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Encryption_Key_Size_Mask_Res
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>LMsec_peer_LMP_Encryption_Key_Size_Mask_Res</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lmp_sec_peer.o(i.LMsec_peer_LMP_Encryption_Key_Size_Mask_Res))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMsec_peer_LMP_Encryption_Key_Size_Mask_Res
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>LMsec_peer_LMP_Encryption_Key_Size_Req</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, lmp_sec_peer.o(i.LMsec_peer_LMP_Encryption_Key_Size_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = LMsec_peer_LMP_Encryption_Key_Size_Req &rArr; _Start_Encryption &rArr; _Generate_Encryption_Key &rArr; LM_SecEng_Generate_Key_E3 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Get_Current_Key_Persistance
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Message
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Set_Encryption_Complete
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Get_Broadcast_Key_Length
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Accepted
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Start_Encryption
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>LMsec_peer_LMP_Encryption_Mode_Req</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, lmp_sec_peer.o(i.LMsec_peer_LMP_Encryption_Mode_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = LMsec_peer_LMP_Encryption_Mode_Req &rArr; _Stop_Encryption &rArr; LMsec_core_PeerData_Tx_Stop_Callback &rArr; LMsec_peer_Send_LMP_Message &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Disable_L2CAP_Traffic
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Get_Current_Key_Persistance
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Message
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Get_Broadcast_Key_Length
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Stop_Encryption
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Accepted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>LMsec_peer_LMP_In_Rand</STRONG> (Thumb, 484 bytes, Stack size 56 bytes, lmp_sec_peer.o(i.LMsec_peer_LMP_In_Rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = LMsec_peer_LMP_In_Rand &rArr; LMsec_core_Init_LinkKey_Negotiation &rArr; LMsec_core_Init_CombKey_Setup &rArr; LM_SecEng_Generate_Key_E21 &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_128_Ex
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_Send_HCI_Event
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Message
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Generate_Key_E22
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_LinkKey_Negotiation
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Complete
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Not_Accepted
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Accepted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[3b4]"></a>LMsec_peer_LMP_Not_Accepted</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, lmp_sec_peer.o(i.LMsec_peer_LMP_Not_Accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = LMsec_peer_LMP_Not_Accepted &rArr; LMsec_core_Auth_Challenge &rArr; LM_SecEng_Authenticate_E1 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Role_Change_Event
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Enable_L2CAP_Traffic
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_Send_HCI_Event
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Set_Encryption_Complete
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Complete
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Challenge
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Not_Accepted_Common
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_TimeoutHandler
</UL>

<P><STRONG><a name="[a4]"></a>LMsec_peer_LMP_Pause_Encryption_Req</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lmp_sec_peer.o(i.LMsec_peer_LMP_Pause_Encryption_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = LMsec_peer_LMP_Pause_Encryption_Req &rArr; LMsec_core_PeerData_Tx_Stop_Callback &rArr; LMsec_peer_Send_LMP_Message &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Pause_Encryption_Req
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Disable_L2CAP_Traffic
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_PeerData_Tx_Stop_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>LMsec_peer_LMP_Resume_Encryption_Req</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lmp_sec_peer.o(i.LMsec_peer_LMP_Resume_Encryption_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = LMsec_peer_LMP_Resume_Encryption_Req &rArr; _Start_Encryption &rArr; _Generate_Encryption_Key &rArr; LM_SecEng_Generate_Key_E3 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Start_Encryption
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>LMsec_peer_LMP_Sres</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, lmp_sec_peer.o(i.LMsec_peer_LMP_Sres))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = LMsec_peer_LMP_Sres &rArr; LMsec_core_Auth_Complete &rArr; LMconnection_LM_Auth_Complete &rArr; LMconnection_Local_Setup_Complete &rArr; LMconnection_Finalise_Connection_Setup &rArr; LMqos_LM_Change_Packet_Type &rArr; LMqos_LM_Change_Validated_Packet_Type &rArr; LMqos_LM_Max_Slot_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Get_Current_Key_Persistance
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Message
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_RecordAuthSuccess
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_RecordAuthFailure
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Get_Broadcast_Key_Length
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>LMsec_peer_LMP_Start_Encryption_Req</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, lmp_sec_peer.o(i.LMsec_peer_LMP_Start_Encryption_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = LMsec_peer_LMP_Start_Encryption_Req &rArr; _Generate_Encryption_Key &rArr; LM_SecEng_Generate_Key_E3 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Get_Current_Key_Persistance
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Set_Encryption_Complete
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Accepted
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Generate_Encryption_Key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[20]"></a>LMsec_peer_LMP_Start_Encryption_Req_Accepted_Ack</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, lmp_sec_peer.o(i.LMsec_peer_LMP_Start_Encryption_Req_Accepted_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = LMsec_peer_LMP_Start_Encryption_Req_Accepted_Ack &rArr; LMconnection_Switch_Complete_Event &rArr; LMafh_Activate_AFH &rArr; LMafh_Update_Master_AFH_Piconet &rArr; LMafh_Update_Slave_AFH_If_Required &rArr; LM_Encode_LMP_PDU_Fully_Encoded &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Event
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Enable_L2CAP_Traffic
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_Send_HCI_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
</UL>
<P><STRONG><a name="[7d]"></a>LMsec_peer_LMP_Stop_Encryption_Req</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lmp_sec_peer.o(i.LMsec_peer_LMP_Stop_Encryption_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = LMsec_peer_LMP_Stop_Encryption_Req &rArr; LMsec_core_Set_Encryption_Complete &rArr; LMconnection_LM_Encrypt_Complete &rArr; LMconnection_Local_Setup_Complete &rArr; LMconnection_Finalise_Connection_Setup &rArr; LMqos_LM_Change_Packet_Type &rArr; LMqos_LM_Change_Validated_Packet_Type &rArr; LMqos_LM_Max_Slot_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Set_Encryption_Complete
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Accepted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[1f]"></a>LMsec_peer_LMP_Stop_Encryption_Req_Accepted_Ack</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lmp_sec_peer.o(i.LMsec_peer_LMP_Stop_Encryption_Req_Accepted_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = LMsec_peer_LMP_Stop_Encryption_Req_Accepted_Ack &rArr; LMsec_peer_Resume_Encryption &rArr; _Start_Encryption &rArr; _Generate_Encryption_Key &rArr; LM_SecEng_Generate_Key_E3 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Resume_Encryption
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Switch_Req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
</UL>
<P><STRONG><a name="[79]"></a>LMsec_peer_LMP_Temp_Key</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, lmp_sec_peer.o(i.LMsec_peer_LMP_Temp_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LMsec_peer_LMP_Temp_Key &rArr; LMsec_core_Array_Xor
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Set_Key_Persistance
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Array_Xor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>LMsec_peer_LMP_Temp_Rand</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, lmp_sec_peer.o(i.LMsec_peer_LMP_Temp_Rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = LMsec_peer_LMP_Temp_Rand &rArr; LM_SecEng_Generate_Key_E22 &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Generate_Key_E22
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>LMsec_peer_LMP_Unit_Key</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, lmp_sec_peer.o(i.LMsec_peer_LMP_Unit_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = LMsec_peer_LMP_Unit_Key &rArr; LMsec_core_Auth_Challenge &rArr; LM_SecEng_Authenticate_E1 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_UnitKey_Setup
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_CombKey_Setup
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Challenge
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Update_Link_Key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>LMsec_peer_LMP_Use_Semi_Permanent_Key</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lmp_sec_peer.o(i.LMsec_peer_LMP_Use_Semi_Permanent_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = LMsec_peer_LMP_Use_Semi_Permanent_Key &rArr; LMsec_core_Auth_Complete &rArr; LMconnection_LM_Auth_Complete &rArr; LMconnection_Local_Setup_Complete &rArr; LMconnection_Finalise_Connection_Setup &rArr; LMqos_LM_Change_Packet_Type &rArr; LMqos_LM_Change_Validated_Packet_Type &rArr; LMqos_LM_Max_Slot_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Set_Key_Persistance
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Complete
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Accepted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[392]"></a>LMsec_peer_Resume_Encryption</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lmp_sec_peer.o(i.LMsec_peer_Resume_Encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = LMsec_peer_Resume_Encryption &rArr; _Start_Encryption &rArr; _Generate_Encryption_Key &rArr; LM_SecEng_Generate_Key_E3 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Resume_Encryption_Req
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Start_Encryption
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Accepted
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Not_Accepted
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Success
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Failure
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Stop_Encryption_Req_Accepted_Ack
</UL>

<P><STRONG><a name="[42e]"></a>LMsec_peer_Send_LMP_Accepted</STRONG> (Thumb, 26 bytes, Stack size 64 bytes, lmp_sec_peer.o(i.LMsec_peer_Send_LMP_Accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LMsec_peer_Send_LMP_Accepted &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Pin_Code_Request_Reply
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Use_Semi_Permanent_Key
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Stop_Encryption_Req
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Start_Encryption_Req
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_In_Rand
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Encryption_Mode_Req
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Encryption_Key_Size_Req
</UL>

<P><STRONG><a name="[37e]"></a>LMsec_peer_Send_LMP_Encryption_Key_Size_Mask_Req</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, lmp_sec_peer.o(i.LMsec_peer_Send_LMP_Encryption_Key_Size_Mask_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LMsec_peer_Send_LMP_Encryption_Key_Size_Mask_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Finalise_Connection_Setup
</UL>

<P><STRONG><a name="[42d]"></a>LMsec_peer_Send_LMP_Encryption_Key_Size_Mask_Res</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, lmp_sec_peer.o(i.LMsec_peer_Send_LMP_Encryption_Key_Size_Mask_Res))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LMsec_peer_Send_LMP_Encryption_Key_Size_Mask_Res &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Encryption_Key_Size_Mask_Req
</UL>

<P><STRONG><a name="[414]"></a>LMsec_peer_Send_LMP_Message</STRONG> (Thumb, 70 bytes, Stack size 64 bytes, lmp_sec_peer.o(i.LMsec_peer_Send_LMP_Message))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LMsec_peer_Send_LMP_Message &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Pin_Code_Request_Reply
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Sres
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_In_Rand
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Encryption_Mode_Req
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Encryption_Key_Size_Req
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Accepted
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_Encryption
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Set_Encryption
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_PeerData_Tx_Stop_Callback
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_UnitKey_Setup
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_CombKey_Setup
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Change_To_Temporary_Key
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Change_To_Semi_Permanent_Key
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Response
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Challenge
</UL>

<P><STRONG><a name="[42b]"></a>LMsec_peer_Send_LMP_Not_Accepted</STRONG> (Thumb, 28 bytes, Stack size 64 bytes, lmp_sec_peer.o(i.LMsec_peer_Send_LMP_Not_Accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LMsec_peer_Send_LMP_Not_Accepted &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Pin_Code_Request_Reply
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Pin_Code_Request_Negative_Reply
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Link_Key_Request_Reply
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Link_Key_Request_Negative_Reply
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_In_Rand
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Au_Rand
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Pin_Code_Request_Timeout
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Link_Key_Request_Timeout
</UL>

<P><STRONG><a name="[3ab]"></a>LMsec_peer_Send_LMP_Pause_Encryption_Req</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lmp_sec_peer.o(i.LMsec_peer_Send_LMP_Pause_Encryption_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = LMsec_peer_Send_LMP_Pause_Encryption_Req &rArr; LM_Encode_LMP_PDU_Fully_Encoded &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU_Fully_Encoded
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Disable_L2CAP_Traffic
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Switch_Role
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Pause_Encryption_Req
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Encryption_Key_Refresh
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Complete
</UL>

<P><STRONG><a name="[431]"></a>LMsec_peer_Send_LMP_Resume_Encryption_Req</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lmp_sec_peer.o(i.LMsec_peer_Send_LMP_Resume_Encryption_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = LMsec_peer_Send_LMP_Resume_Encryption_Req &rArr; LM_Encode_LMP_PDU_Fully_Encoded &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU_Fully_Encoded
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Resume_Encryption
</UL>

<P><STRONG><a name="[432]"></a>LMsec_upper_LM_Authentication_Requested</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lmp_sec_upper.o(i.LMsec_upper_LM_Authentication_Requested))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = LMsec_upper_LM_Authentication_Requested &rArr; LMsec_core_Auth_Challenge &rArr; LM_SecEng_Authenticate_E1 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Status_Event
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_SSP_Enabled_On_Link
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_Send_HCI_Event
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Get_Link_Key
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Challenge
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Allowed
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[433]"></a>LMsec_upper_LM_Change_Connection_Link_Key</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lmp_sec_upper.o(i.LMsec_upper_LM_Change_Connection_Link_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = LMsec_upper_LM_Change_Connection_Link_Key &rArr; LMsec_core_Init_CombKey_Setup &rArr; LM_SecEng_Generate_Key_E21 &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Status_Event
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Get_Current_Key_Persistance
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_CombKey_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[434]"></a>LMsec_upper_LM_Create_New_Unit_Key</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, lmp_sec_upper.o(i.LMsec_upper_LM_Create_New_Unit_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = LMsec_upper_LM_Create_New_Unit_Key &rArr; LM_SecEng_Generate_Key_E21 &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYShalconfig_Unit_Key_Was_Set
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_128_Ex
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Generate_Key_E21
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[436]"></a>LMsec_upper_LM_Link_Key_Request_Negative_Reply</STRONG> (Thumb, 274 bytes, Stack size 80 bytes, lmp_sec_upper.o(i.LMsec_upper_LM_Link_Key_Request_Negative_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = LMsec_upper_LM_Link_Key_Request_Negative_Reply &rArr; LMsec_peer_Send_LMP_Not_Accepted &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Bd_Addr
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_SSP_Enabled_On_Link
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_Send_HCI_Event
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Not_Accepted
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[437]"></a>LMsec_upper_LM_Link_Key_Request_Reply</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, lmp_sec_upper.o(i.LMsec_upper_LM_Link_Key_Request_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = LMsec_upper_LM_Link_Key_Request_Reply &rArr; LMsec_core_Auth_Challenge &rArr; LM_SecEng_Authenticate_E1 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Bd_Addr
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Response
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Complete
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Challenge
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Allowed
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Not_Accepted
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[56]"></a>LMsec_upper_LM_Link_Key_Request_Timeout</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lmp_sec_upper.o(i.LMsec_upper_LM_Link_Key_Request_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = LMsec_upper_LM_Link_Key_Request_Timeout &rArr; LMsec_peer_Send_LMP_Not_Accepted &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_Send_HCI_Event
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Not_Accepted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_sec_upper.o(i.LMsec_upper_Send_HCI_Event)
</UL>
<P><STRONG><a name="[438]"></a>LMsec_upper_LM_Master_Link_Key</STRONG> (Thumb, 244 bytes, Stack size 80 bytes, lmp_sec_upper.o(i.LMsec_upper_LM_Master_Link_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = LMsec_upper_LM_Master_Link_Key &rArr; LMsec_core_Change_To_Temporary_Key &rArr; LMsec_core_Auth_Challenge &rArr; LM_SecEng_Authenticate_E1 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Status_Event
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Get_Current_Key_Persistance
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_128_Ex
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_Send_HCI_Event
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Generate_Key_E22
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Change_To_Temporary_Key
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Change_To_Semi_Permanent_Key
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[439]"></a>LMsec_upper_LM_Pin_Code_Request_Negative_Reply</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lmp_sec_upper.o(i.LMsec_upper_LM_Pin_Code_Request_Negative_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = LMsec_upper_LM_Pin_Code_Request_Negative_Reply &rArr; LMsec_core_Auth_Complete &rArr; LMconnection_LM_Auth_Complete &rArr; LMconnection_Local_Setup_Complete &rArr; LMconnection_Finalise_Connection_Setup &rArr; LMqos_LM_Change_Packet_Type &rArr; LMqos_LM_Change_Validated_Packet_Type &rArr; LMqos_LM_Max_Slot_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Bd_Addr
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Complete
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Not_Accepted
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[43a]"></a>LMsec_upper_LM_Pin_Code_Request_Reply</STRONG> (Thumb, 264 bytes, Stack size 72 bytes, lmp_sec_upper.o(i.LMsec_upper_LM_Pin_Code_Request_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = LMsec_upper_LM_Pin_Code_Request_Reply &rArr; LMsec_core_Auth_Complete &rArr; LMconnection_LM_Auth_Complete &rArr; LMconnection_Local_Setup_Complete &rArr; LMconnection_Finalise_Connection_Setup &rArr; LMqos_LM_Change_Packet_Type &rArr; LMqos_LM_Change_Validated_Packet_Type &rArr; LMqos_LM_Max_Slot_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Bd_Addr
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_128_Ex
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Message
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Generate_Key_E22
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Complete
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Not_Accepted
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Accepted
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[57]"></a>LMsec_upper_LM_Pin_Code_Request_Timeout</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lmp_sec_upper.o(i.LMsec_upper_LM_Pin_Code_Request_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = LMsec_upper_LM_Pin_Code_Request_Timeout &rArr; LMsec_core_Auth_Complete &rArr; LMconnection_LM_Auth_Complete &rArr; LMconnection_Local_Setup_Complete &rArr; LMconnection_Finalise_Connection_Setup &rArr; LMqos_LM_Change_Packet_Type &rArr; LMqos_LM_Change_Validated_Packet_Type &rArr; LMqos_LM_Max_Slot_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Complete
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Not_Accepted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_sec_upper.o(i.LMsec_upper_Send_HCI_Event)
</UL>
<P><STRONG><a name="[43b]"></a>LMsec_upper_LM_Set_Connection_Encryption</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lmp_sec_upper.o(i.LMsec_upper_LM_Set_Connection_Encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = LMsec_upper_LM_Set_Connection_Encryption &rArr; LMsec_core_Set_Encryption &rArr; LMsec_peer_Send_LMP_Message &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Get_Current_Key_Persistance
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Set_Encryption
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Is_Broadcast_Key_Length_Possible
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[416]"></a>LMsec_upper_Send_HCI_Event</STRONG> (Thumb, 162 bytes, Stack size 80 bytes, lmp_sec_upper.o(i.LMsec_upper_Send_HCI_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LMsec_upper_Send_HCI_Event &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Get_Current_Key_Persistance
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Master_Link_Key
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Link_Key_Request_Negative_Reply
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Authentication_Requested
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Not_Accepted
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_In_Rand
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Comb_Key
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Accepted
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_TimeoutHandler
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Set_Encryption_Complete
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Get_Link_Key
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Complete
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Start_Encryption_Req_Accepted_Ack
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_Simple_Pairing_Complete_Event
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Link_Key_Request_Timeout
</UL>

<P><STRONG><a name="[a6]"></a>LMspp_LMP_IO_Capability_Request</STRONG> (Thumb, 242 bytes, Stack size 88 bytes, lmp_ssp.o(i.LMspp_LMP_IO_Capability_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = LMspp_LMP_IO_Capability_Request &rArr; _LMssp_Send_Simple_Pairing_Complete_Event &rArr; LMsec_upper_Send_HCI_Event &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_Not_Accepted_Ext_PDU
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Determine_Auth_Type
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_Simple_Pairing_Complete_Event
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_LMP_IO_Capability_Response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>LMspp_LMP_IO_Capability_Response</STRONG> (Thumb, 130 bytes, Stack size 80 bytes, lmp_ssp.o(i.LMspp_LMP_IO_Capability_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = LMspp_LMP_IO_Capability_Response &rArr; _LMssp_Send_Simple_Pairing_Complete_Event &rArr; LMsec_upper_Send_HCI_Event &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_Not_Accepted_Ext_PDU
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Determine_Auth_Type
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_Simple_Pairing_Complete_Event
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMspp_Send_LMP_Encapsulated_Header
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[441]"></a>LMspp_Send_LMP_Encapsulated_Payload</STRONG> (Thumb, 184 bytes, Stack size 104 bytes, lmp_ssp.o(i.LMspp_Send_LMP_Encapsulated_Payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = LMspp_Send_LMP_Encapsulated_Payload &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Accepted
</UL>

<P><STRONG><a name="[3ba]"></a>LMssp_CallBack_DH_Key_Complete</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, lmp_ssp.o(i.LMssp_CallBack_DH_Key_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1364<LI>Call Chain = LMssp_CallBack_DH_Key_Complete &rArr; _LMssp_Send_LMP_DH_Key_Check &rArr; LMssp_Calculate_DHKEY_Check &rArr; F3 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Not_Accepted
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Accepted
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_Simple_Pairing_Complete_Event
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_LMP_DH_Key_Check
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Compare_16byte_Arrays
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Calculate_DHKEY_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMecc_CB_ECC_Point_Multiplication_Complete
</UL>

<P><STRONG><a name="[447]"></a>LMssp_Generate_New_Public_Private_Key_Pair</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lmp_ssp.o(i.LMssp_Generate_New_Public_Private_Key_Pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 1644<LI>Call Chain = LMssp_Generate_New_Public_Private_Key_Pair &rArr; LMecc_Generate_ECC_Key &rArr; ECC_Point_Multiplication &rArr; ECC_Point_Multiplication_uint8 &rArr; LMecc_CB_ECC_Point_Multiplication_Complete &rArr; LMssp_CallBack_DH_Key_Complete &rArr; _LMssp_Send_LMP_DH_Key_Check &rArr; LMssp_Calculate_DHKEY_Check &rArr; F3 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_192_Ex
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMecc_isValidSecretKey
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMecc_Generate_ECC_Key
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_Write_SSP_Debug_Mode
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[55]"></a>LMssp_HCI_Timeout</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lmp_ssp.o(i.LMssp_HCI_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = LMssp_HCI_Timeout &rArr; _LMssp_Send_Simple_Pairing_Complete_Event &rArr; LMsec_upper_Send_HCI_Event &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_Simple_Pairing_Complete_Event
</UL>
<BR>[Address Reference Count : 5]<UL><LI> lmp_ssp.o(i.LMspp_LMP_IO_Capability_Request)
<LI> lmp_ssp.o(i.LMssp_LMP_Accepted)
<LI> lmp_ssp.o(i.LMssp_LMP_Encapsulated_Payload)
<LI> lmp_ssp.o(i.LMssp_LMP_Simple_Pairing_Number)
<LI> lmp_sec_upper.o(i.LMsec_upper_LM_Link_Key_Request_Negative_Reply)
</UL>
<P><STRONG><a name="[3b1]"></a>LMssp_LMP_Accepted</STRONG> (Thumb, 690 bytes, Stack size 112 bytes, lmp_ssp.o(i.LMssp_LMP_Accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 1284 + Unknown Stack Size
<LI>Call Chain = LMssp_LMP_Accepted &rArr; _LMssp_Calculate_Link_Key &rArr; F2 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_128_Ex
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F1
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Not_Accepted
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Accepted
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMspp_Send_LMP_Encapsulated_Payload
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_Simple_Pairing_Complete_Event
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Mutual_Authentication
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Calculate_Link_Key
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Simple_Pairing_Number
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Simple_Pairing_Confirm
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Accepted_Common
</UL>

<P><STRONG><a name="[9d]"></a>LMssp_LMP_DHkey_Check</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, lmp_ssp.o(i.LMssp_LMP_DHkey_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 1396 + Unknown Stack Size
<LI>Call Chain = LMssp_LMP_DHkey_Check &rArr; _LMssp_Send_LMP_DH_Key_Check &rArr; LMssp_Calculate_DHKEY_Check &rArr; F3 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Not_Accepted
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Accepted
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_Simple_Pairing_Complete_Event
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_LMP_DH_Key_Check
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Mutual_Authentication
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Calculate_Link_Key
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Compare_16byte_Arrays
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Calculate_DHKEY_Check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>LMssp_LMP_Encapsulated_Header</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lmp_ssp.o(i.LMssp_LMP_Encapsulated_Header))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = LMssp_LMP_Encapsulated_Header &rArr; _LMssp_Send_Simple_Pairing_Complete_Event &rArr; LMsec_upper_Send_HCI_Event &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Accepted
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_Simple_Pairing_Complete_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>LMssp_LMP_Encapsulated_Payload</STRONG> (Thumb, 782 bytes, Stack size 104 bytes, lmp_ssp.o(i.LMssp_LMP_Encapsulated_Payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 1740 + Unknown Stack Size
<LI>Call Chain = LMssp_LMP_Encapsulated_Payload &rArr; _LMssp_Init_DHKey_Calculation &rArr; LMecc_Generate_ECC_Key &rArr; ECC_Point_Multiplication &rArr; ECC_Point_Multiplication_uint8 &rArr; LMecc_CB_ECC_Point_Multiplication_Complete &rArr; LMssp_CallBack_DH_Key_Complete &rArr; _LMssp_Send_LMP_DH_Key_Check &rArr; LMssp_Calculate_DHKEY_Check &rArr; F3 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_128_Ex
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F1
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Init_DHKey_Calculation
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Determine_Auth_Type
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Not_Accepted
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Accepted
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_Simple_Pairing_Complete_Event
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMspp_Send_LMP_Encapsulated_Header
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Simple_Pairing_Number
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Simple_Pairing_Confirm
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>LMssp_LMP_Keypress_Notification</STRONG> (Thumb, 26 bytes, Stack size 64 bytes, lmp_ssp.o(i.LMssp_LMP_Keypress_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LMssp_LMP_Keypress_Notification &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[3b9]"></a>LMssp_LMP_Not_Accepted</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lmp_ssp.o(i.LMssp_LMP_Not_Accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = LMssp_LMP_Not_Accepted &rArr; _LMssp_Send_Simple_Pairing_Complete_Event &rArr; LMsec_upper_Send_HCI_Event &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_Simple_Pairing_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Not_Accepted_Common
</UL>

<P><STRONG><a name="[a8]"></a>LMssp_LMP_Numeric_Comparison_Failure</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lmp_ssp.o(i.LMssp_LMP_Numeric_Comparison_Failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = LMssp_LMP_Numeric_Comparison_Failure &rArr; _LMssp_Send_Simple_Pairing_Complete_Event &rArr; LMsec_upper_Send_HCI_Event &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_Simple_Pairing_Complete_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>LMssp_LMP_OOB_Failed</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lmp_ssp.o(i.LMssp_LMP_OOB_Failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = LMssp_LMP_OOB_Failed &rArr; _LMssp_Send_Simple_Pairing_Complete_Event &rArr; LMsec_upper_Send_HCI_Event &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_Simple_Pairing_Complete_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>LMssp_LMP_Passkey_Entry_Failed</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lmp_ssp.o(i.LMssp_LMP_Passkey_Entry_Failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = LMssp_LMP_Passkey_Entry_Failed &rArr; _LMssp_Send_Simple_Pairing_Complete_Event &rArr; LMsec_upper_Send_HCI_Event &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_Simple_Pairing_Complete_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>LMssp_LMP_Simple_Pairing_Confirm</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, lmp_ssp.o(i.LMssp_LMP_Simple_Pairing_Confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068<LI>Call Chain = LMssp_LMP_Simple_Pairing_Confirm &rArr; F1 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_128_Ex
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F1
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Simple_Pairing_Number
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Simple_Pairing_Confirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>LMssp_LMP_Simple_Pairing_Number</STRONG> (Thumb, 574 bytes, Stack size 144 bytes, lmp_ssp.o(i.LMssp_LMP_Simple_Pairing_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 1484 + Unknown Stack Size
<LI>Call Chain = LMssp_LMP_Simple_Pairing_Number &rArr; _LMssp_Send_LMP_DH_Key_Check &rArr; LMssp_Calculate_DHKEY_Check &rArr; F3 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_128_Ex
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F1
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Not_Accepted
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Accepted
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_Simple_Pairing_Complete_Event
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_LMP_DH_Key_Check
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Compare_16byte_Arrays
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Simple_Pairing_Number
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Simple_Pairing_Confirm
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[44f]"></a>LMssp_LM_IO_Capability_Request_Negative_Reply</STRONG> (Thumb, 92 bytes, Stack size 72 bytes, lmp_ssp.o(i.LMssp_LM_IO_Capability_Request_Negative_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = LMssp_LM_IO_Capability_Request_Negative_Reply &rArr; _LMssp_Send_Simple_Pairing_Complete_Event &rArr; LMsec_upper_Send_HCI_Event &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_Simple_Pairing_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[450]"></a>LMssp_LM_IO_Capability_Request_Reply</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, lmp_ssp.o(i.LMssp_LM_IO_Capability_Request_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = LMssp_LM_IO_Capability_Request_Reply &rArr; _LMssp_Send_LMP_IO_Capability_Response &rArr; LM_Encode_LMP_PDU_Fully_Encoded &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU_Fully_Encoded
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Determine_Auth_Type
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_LMP_IO_Capability_Response
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[451]"></a>LMssp_LM_Read_Local_OOB_Data</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lmp_ssp.o(i.LMssp_LM_Read_Local_OOB_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1044<LI>Call Chain = LMssp_LM_Read_Local_OOB_Data &rArr; F1 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_128_Ex
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F1
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[452]"></a>LMssp_LM_Remote_OOB_Data_Request_Negative_Reply</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lmp_ssp.o(i.LMssp_LM_Remote_OOB_Data_Request_Negative_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = LMssp_LM_Remote_OOB_Data_Request_Negative_Reply &rArr; _LMssp_Send_Simple_Pairing_Complete_Event &rArr; LMsec_upper_Send_HCI_Event &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_LMP_OOB_Failed
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_Simple_Pairing_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[454]"></a>LMssp_LM_Remote_OOB_Data_Request_Reply</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, lmp_ssp.o(i.LMssp_LM_Remote_OOB_Data_Request_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068<LI>Call Chain = LMssp_LM_Remote_OOB_Data_Request_Reply &rArr; F1 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_128_Ex
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F1
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Not_Accepted
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Accepted
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_Simple_Pairing_Complete_Event
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Compare_16byte_Arrays
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Simple_Pairing_Number
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[455]"></a>LMssp_LM_User_Confirmation_Request_Negative_Reply</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lmp_ssp.o(i.LMssp_LM_User_Confirmation_Request_Negative_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = LMssp_LM_User_Confirmation_Request_Negative_Reply &rArr; _LMssp_Send_Simple_Pairing_Complete_Event &rArr; LMsec_upper_Send_HCI_Event &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU_Fully_Encoded
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Not_Accepted
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_Simple_Pairing_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[456]"></a>LMssp_LM_User_Confirmation_Request_Reply</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, lmp_ssp.o(i.LMssp_LM_User_Confirmation_Request_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 1356<LI>Call Chain = LMssp_LM_User_Confirmation_Request_Reply &rArr; _LMssp_Send_LMP_DH_Key_Check &rArr; LMssp_Calculate_DHKEY_Check &rArr; F3 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Not_Accepted
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Accepted
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_Simple_Pairing_Complete_Event
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_LMP_DH_Key_Check
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Compare_16byte_Arrays
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Calculate_DHKEY_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[457]"></a>LMssp_LM_User_Passkey_Request_Negative_Reply</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lmp_ssp.o(i.LMssp_LM_User_Passkey_Request_Negative_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = LMssp_LM_User_Passkey_Request_Negative_Reply &rArr; _LMssp_Send_Simple_Pairing_Complete_Event &rArr; LMsec_upper_Send_HCI_Event &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU_Fully_Encoded
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Not_Accepted
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_Simple_Pairing_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[458]"></a>LMssp_LM_User_Passkey_Request_Reply</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, lmp_ssp.o(i.LMssp_LM_User_Passkey_Request_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076<LI>Call Chain = LMssp_LM_User_Passkey_Request_Reply &rArr; F1 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_128_Ex
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F1
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_LMP_Simple_Pairing_Confirm
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[459]"></a>LMssp_LM_Write_SSP_Debug_Mode</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lmp_ssp.o(i.LMssp_LM_Write_SSP_Debug_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1668<LI>Call Chain = LMssp_LM_Write_SSP_Debug_Mode &rArr; LMssp_Generate_New_Public_Private_Key_Pair &rArr; LMecc_Generate_ECC_Key &rArr; ECC_Point_Multiplication &rArr; ECC_Point_Multiplication_uint8 &rArr; LMecc_CB_ECC_Point_Multiplication_Complete &rArr; LMssp_CallBack_DH_Key_Complete &rArr; _LMssp_Send_LMP_DH_Key_Check &rArr; LMssp_Calculate_DHKEY_Check &rArr; F3 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Generate_New_Public_Private_Key_Pair
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Test_Command
</UL>

<P><STRONG><a name="[383]"></a>LMssp_SSP_Enabled_On_Link</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lmp_ssp.o(i.LMssp_SSP_Enabled_On_Link))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Link_Key_Request_Negative_Reply
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Authentication_Requested
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Accept
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Au_Rand
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Not_Accepted
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Accepted
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Handle_Incoming_LM_Connection_Request
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Success
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Failure
</UL>

<P><STRONG><a name="[45a]"></a>LMssp_Send_Keypress_Notification</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lmp_ssp.o(i.LMssp_Send_Keypress_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = LMssp_Send_Keypress_Notification &rArr; LM_Encode_LMP_PDU_Fully_Encoded &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU_Fully_Encoded
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[445]"></a>LMssp_Send_LMP_Accepted</STRONG> (Thumb, 34 bytes, Stack size 64 bytes, lmp_ssp.o(i.LMssp_Send_LMP_Accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LMssp_Send_LMP_Accepted &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Confirmation_Request_Reply
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_Remote_OOB_Data_Request_Reply
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Simple_Pairing_Number
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Encapsulated_Payload
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Encapsulated_Header
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_DHkey_Check
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Accepted
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_CallBack_DH_Key_Complete
</UL>

<P><STRONG><a name="[446]"></a>LMssp_Send_LMP_Not_Accepted</STRONG> (Thumb, 36 bytes, Stack size 64 bytes, lmp_ssp.o(i.LMssp_Send_LMP_Not_Accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LMssp_Send_LMP_Not_Accepted &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Passkey_Request_Negative_Reply
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Confirmation_Request_Reply
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Confirmation_Request_Negative_Reply
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_Remote_OOB_Data_Request_Reply
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Simple_Pairing_Number
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Encapsulated_Payload
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_DHkey_Check
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Accepted
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_CallBack_DH_Key_Complete
</UL>

<P><STRONG><a name="[22f]"></a>LMtmr_Clear_Timer</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lmp_timer.o(i.LMtmr_Clear_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LMtmr_Clear_Timer &rArr; LMtmr_Delist_Timer
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Delist_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Free_Link
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Reset_Timer
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Clean_On_Detach
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Passkey_Request_Reply
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Passkey_Request_Negative_Reply
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Confirmation_Request_Reply
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Confirmation_Request_Negative_Reply
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_IO_Capability_Request_Reply
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_IO_Capability_Request_Negative_Reply
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Pin_Code_Request_Reply
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Pin_Code_Request_Negative_Reply
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Master_Link_Key
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Link_Key_Request_Reply
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Link_Key_Request_Negative_Reply
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Write_Flush_Timeout
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_HCI_Flush
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_HCI_Enhanced_Flush
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Exit_Periodic_Inquiry_Mode
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Reject
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Accept
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_LMP_Accepted
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMspp_LMP_IO_Capability_Request
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Accepted
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMdisp_Clear_Any_Associated_Message_Timer
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Stop_Classification_Reporting
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_Msg_Timeout
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Not_Accepted
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Detach_Ack
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Detach
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Disconnect_Acl
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Success
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Failure
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Enter_Park_Mode
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Slave_Init_Unpark
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Flush_Timeout
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Ack_Last_Tx_Packet
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_Send_HCI_Event
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_TimeoutHandler
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Set_Encryption_Complete
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Complete
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Execute_Unpark_Request
</UL>

<P><STRONG><a name="[45b]"></a>LMtmr_Delist_Timer</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lmp_timer.o(i.LMtmr_Delist_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LMtmr_Delist_Timer
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags (via BLX)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Reset_Timer
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
</UL>

<P><STRONG><a name="[45c]"></a>LMtmr_Enlist_Timer</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lmp_timer.o(i.LMtmr_Enlist_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LMtmr_Enlist_Timer
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags (via BLX)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags (via BLX)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Reset_Timer
</UL>

<P><STRONG><a name="[e1]"></a>LMtmr_Handle_Expired_Timers</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, lmp_timer.o(i.LMtmr_Handle_Expired_Timers))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LMtmr_Handle_Expired_Timers &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags (via BLX)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags (via BLX)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[332]"></a>LMtmr_Initialise</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lmp_timer.o(i.LMtmr_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LMtmr_Initialise
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags (via BLX)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Initialise
</UL>

<P><STRONG><a name="[15e]"></a>LMtmr_Reset_Timer</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lmp_timer.o(i.LMtmr_Reset_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LMtmr_Reset_Timer &rArr; LMtmr_Enlist_Timer
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Enlist_Timer
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Delist_Timer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Commit_Rx_Buf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Page_Scan_Start
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Inquiry_Scan_Start
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Write_Supervision_Timeout
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Supervision_Timeout
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Encryption_Key_Refresh
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Channel_Quality_Timeout
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Start_Classification_Reporting
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Reset_Flush_Timeout
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Device_Activity
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Standby_Low_Power_Timeout
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Get_Emergency_Poll_Activity
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Update_Master_AFH_Piconet
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Report_Slave_Channel_Classification
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LMP_Channel_Classification_Ack
</UL>

<P><STRONG><a name="[139]"></a>LMtmr_Set_Timer</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, lmp_timer.o(i.LMtmr_Set_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags (via BLX)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags (via BLX)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Enlist_Timer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Incoming_Link_Inf
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Initialise
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Set_Connection_Encryption
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Master_Link_Key
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Link_Key_Request_Negative_Reply
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Change_Connection_Link_Key
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Authentication_Requested
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Periodic_Inquiry
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Simple_Pairing_Number
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Encapsulated_Payload
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Accepted
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMspp_LMP_IO_Capability_Request
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Use_Semi_Permanent_Key
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Temp_Rand
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_In_Rand
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Encryption_Mode_Req
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Comb_Key
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Accepted
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Park_Req
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Accepted
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_Encryption
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_Authentication
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Start_Classification_Reporting
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Send_LMP_Detach
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Switch_Role_Complete
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Page_Complete_NO_ERROR
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Page_Complete
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Switch_Req
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Detach_Ack
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Detach
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Handle_Incoming_LM_Connection_Request
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Connection_PDU
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Connection_Complete_Event_ACL
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Success
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Slave_Init_Unpark
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Exit_Park_Mode_Complete_Handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Rx_Activity
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Ack_Last_Tx_Packet
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Set_Flush_Timeout
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Link_Tx_Activity
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Result
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Complete
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Period_Interval_Timeout
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Initialise
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_Initialise
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_Send_HCI_Event
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Complete
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Challenge
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Unsniff_Req_Accepted_Ack
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Unpark_Pmaddr_Accepted_Ack
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Sniff_Req_Accepted_Ack
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Park_Accepted_Ack
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Exit_Park_Mode_Complete
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Enter_Park_Mode_Complete
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_Point_Multiplication_uint8
</UL>

<P><STRONG><a name="[218]"></a>LMtmr_Timer_Expired</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lmp_timer.o(i.LMtmr_Timer_Expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LMtmr_Timer_Expired &rArr; BTtimer_Is_Expired &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Is_Available_Sleep_System
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Is_Available_Sleep_System
</UL>

<P><STRONG><a name="[560]"></a>LMutils_Alloc_u_int8_ID</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, lmp_utils.o(i.LMutils_Alloc_u_int8_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LMutils_Alloc_u_int8_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Execute_Park_Request
</UL>

<P><STRONG><a name="[2c4]"></a>LMutils_Array_Copy</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lmp_utils.o(i.LMutils_Array_Copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMutils_Array_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Inquiry_Result_Event
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Pin_Code_Request_Reply
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Master_Link_Key
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Link_Key_Request_Reply
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Loopback_Command_Event
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Unit_Key
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Temp_Rand
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Temp_Key
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Start_Encryption_Req
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Sres
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_In_Rand
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Comb_Key
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Au_Rand
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Accepted
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Features_Res
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Features_Req
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Features_Res_Ext
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Features_Req_Ext
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Write_CombKey_Part
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Get_Link_Key
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Response
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Challenge
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Execute_Unpark_Request
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Update_Link_Key
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Start_Encryption
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Generate_Encryption_Key
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Complete_CombKey_Setup
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LM_Encode_Normal_PDU
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LM_Encode_Extended_PDU
</UL>

<P><STRONG><a name="[34e]"></a>LMutils_Bd_Addr_Match</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lmp_utils.o(i.LMutils_Bd_Addr_Match))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMutils_Bd_Addr_Match
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Peer_Bd_Addr
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Bd_Addr
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMkeydb_LM_Delete_Stored_Link_Key
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Read_Remote_Name_Cancel
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Cancel
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Unpark_Bd_Addr_Req
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMfltr_Connection_Filter_Check
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMconnection_Validate_ACL_Admission
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMfltr_Inquiry_Filter_Check
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Result_Handler
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMkeydb_Read_Link_Key
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_RecordAuthSuccess
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_RecordAuthFailure
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Allowed
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMkeydb_Write_Link_Key
</UL>

<P><STRONG><a name="[3ee]"></a>LMutils_Free_u_int8_ID</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lmp_utils.o(i.LMutils_Free_u_int8_ID))
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Free_Pm_Addr
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Free_Ar_Addr
</UL>

<P><STRONG><a name="[36c]"></a>LMutils_Get_Uint16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lmp_utils.o(i.LMutils_Get_Uint16))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Encryption_Key_Size_Mask_Res
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Quality_of_Service_Req
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Quality_of_Service
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Unpark_Pm_Addr_Req
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Unpark_Bd_Addr_Req
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Set_Broadcast_Scan_Window
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LMP_Slot_Offset
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LMP_Clock_Offset_Res
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LMP_Version_Res
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Extract_Sniff_Parameters
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Extract_Park_Parameters
</UL>

<P><STRONG><a name="[40e]"></a>LMutils_Get_Uint24</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lmp_utils.o(i.LMutils_Get_Uint24))
<BR><BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_LM_Write_Supported_IAC
</UL>

<P><STRONG><a name="[395]"></a>LMutils_Get_Uint32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lmp_utils.o(i.LMutils_Get_Uint32))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Switch_Req
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMafh_Get_AFH_Instant
</UL>

<P><STRONG><a name="[3c0]"></a>LMutils_Set_Bd_Addr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lmp_utils.o(i.LMutils_Set_Bd_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMutils_Set_Bd_Addr
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMfltr_LM_Set_Filter
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Result_Handler
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_RecordAuthFailure
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMkeydb_Write_Link_Key
</UL>

<P><STRONG><a name="[2cc]"></a>LMutils_Set_Uint16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lmp_utils.o(i.LMutils_Set_Uint16))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LM_Encode_Normal_PDU
</UL>

<P><STRONG><a name="[2cb]"></a>LMutils_Set_Uint32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lmp_utils.o(i.LMutils_Set_Uint32))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMafh_Set_AFH_Instant
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LM_Encode_Normal_PDU
</UL>

<P><STRONG><a name="[46d]"></a>LSLCASS_SET_FREQ_UNUSED</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lslc_assmnt.o(i.LSLCASS_SET_FREQ_UNUSED))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LSLCASS_SET_FREQ_UNUSED
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_Rx_HEC_Event_Channel
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Disable_Channel
</UL>

<P><STRONG><a name="[468]"></a>LSLCASS_SET_FREQ_USED</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lslc_assmnt.o(i.LSLCASS_SET_FREQ_USED))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LSLCASS_SET_FREQ_USED
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Fade_Distant_Channels
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Eval_Reuse
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Depreciate_Interference_Map_For_Minimum_Channels
</UL>

<P><STRONG><a name="[45d]"></a>LSLCacc_Build_EIR_Payload</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lslc_access.o(i.LSLCacc_Build_EIR_Payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LSLCacc_Build_EIR_Payload &rArr; hw_memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy32
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Local_EIR_Payload
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Local_EIR_Length
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_EIR
</UL>

<P><STRONG><a name="[547]"></a>LSLCacc_Disable_Low_Power_Mode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lslc_access.o(i.LSLCacc_Disable_Low_Power_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
</UL>

<P><STRONG><a name="[541]"></a>LSLCacc_Enable_Low_Power_Mode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lslc_access.o(i.LSLCacc_Enable_Low_Power_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
</UL>

<P><STRONG><a name="[460]"></a>LSLCacc_Extract_EIR_Payload</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lslc_access.o(i.LSLCacc_Extract_EIR_Payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LSLCacc_Extract_EIR_Payload &rArr; hw_memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy32
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Inquiry
</UL>

<P><STRONG><a name="[2f9]"></a>LSLCacc_Initialise</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lslc_access.o(i.LSLCacc_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LSLCacc_Initialise
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Initialise
</UL>

<P><STRONG><a name="[461]"></a>LSLCacc_Prepare_Rx_ID</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, lslc_access.o(i.LSLCacc_Prepare_Rx_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LSLCacc_Prepare_Rx_ID
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Non_EDR_Pkt_Tx_Rx
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_ID
</UL>

<P><STRONG><a name="[462]"></a>LSLCafh_Assign_AFH_Kernel</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lslc_afh.o(i.LSLCafh_Assign_AFH_Kernel))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSLCafh_Assign_AFH_Kernel &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Build_Hop_Kernel
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Assign_Frequency_Kernel
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_Initialise
</UL>

<P><STRONG><a name="[52b]"></a>LSLCafh_Backup_AFH_Link_State</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lslc_afh.o(i.LSLCafh_Backup_AFH_Link_State))
<BR><BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
</UL>

<P><STRONG><a name="[364]"></a>LSLCafh_Count_1_Bits</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lslc_afh.o(i.LSLCafh_Count_1_Bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LSLCafh_Count_1_Bits
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LM_Set_AFH_Channel_Classification
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCcls_Build_Channel_Map
</UL>

<P><STRONG><a name="[190]"></a>LSLCafh_Get_Frequency_Channel</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, lslc_afh.o(i.LSLCafh_Get_Frequency_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy8
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LMP_Set_AFH_Ack
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Is_AFH_Change_Pending
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Get_Frequency_Channel_Connection
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Prepare_Rx_Frequency_R2P
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Prepare_Frequency_Connection
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Prepare_Frequency_Context
</UL>

<P><STRONG><a name="[2f5]"></a>LSLCafh_Initialise</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lslc_afh.o(i.LSLCafh_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LSLCafh_Initialise &rArr; LSLCafh_Assign_AFH_Kernel &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy8
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_Assign_AFH_Kernel
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Initialise
</UL>

<P><STRONG><a name="[55e]"></a>LSLCafh_LM_Read_AFH_Channel_Map</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lslc_afh.o(i.LSLCafh_LM_Read_AFH_Channel_Map))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LSLCafh_LM_Read_AFH_Channel_Map
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Local_Status_Command
</UL>

<P><STRONG><a name="[362]"></a>LSLCafh_Process_Baseband_Ack</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lslc_afh.o(i.LSLCafh_Process_Baseband_Ack))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LMP_Set_AFH_Ack
</UL>

<P><STRONG><a name="[530]"></a>LSLCafh_Restore_AFH_Link_State</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lslc_afh.o(i.LSLCafh_Restore_AFH_Link_State))
<BR><BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
</UL>

<P><STRONG><a name="[360]"></a>LSLCafh_set_AFH</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, lslc_afh.o(i.LSLCafh_set_AFH))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSLCafh_set_AFH &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LMP_Set_AFH
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Update_Master_AFH_Piconet
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Update_Slave_AFH_If_Required
</UL>

<P><STRONG><a name="[465]"></a>LSLCass_Assess_Adjacent_Channels</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lslc_assmnt.o(i.LSLCass_Assess_Adjacent_Channels))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LSLCass_Assess_Adjacent_Channels &rArr; LSLCass_Eval_Reuse &rArr; LSLCass_Device_Update_Notification
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Eval_Reuse
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Process_Rx_RSSI_Channel
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Process_No_Rx_Packet
</UL>

<P><STRONG><a name="[467]"></a>LSLCass_Depreciate_Interference_Map_For_Minimum_Channels</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lslc_assmnt.o(i.LSLCass_Depreciate_Interference_Map_For_Minimum_Channels))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSLCass_Depreciate_Interference_Map_For_Minimum_Channels &rArr; LSLCASS_SET_FREQ_USED
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCASS_SET_FREQ_USED
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_Rx_HEC_Event_Channel
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Disable_Channel
</UL>

<P><STRONG><a name="[469]"></a>LSLCass_Device_Update_Notification</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lslc_assmnt.o(i.LSLCass_Device_Update_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LSLCass_Device_Update_Notification
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Set_Request_Channel_Classification
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Set_Device_Channel_Map_Update_Notification
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_Rx_HEC_Event_Channel
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Eval_Reuse
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Disable_Channel
</UL>

<P><STRONG><a name="[46c]"></a>LSLCass_Disable_Channel</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, lslc_assmnt.o(i.LSLCass_Disable_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LSLCass_Disable_Channel &rArr; LSLCass_Fade_Distant_Channels &rArr; LSLCASS_SET_FREQ_USED
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Fade_Distant_Channels
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Device_Update_Notification
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Depreciate_Interference_Map_For_Minimum_Channels
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCASS_SET_FREQ_UNUSED
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Process_Rx_RSSI_Channel
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Process_No_Rx_Packet
</UL>

<P><STRONG><a name="[466]"></a>LSLCass_Eval_Reuse</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lslc_assmnt.o(i.LSLCass_Eval_Reuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LSLCass_Eval_Reuse &rArr; LSLCass_Device_Update_Notification
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Reactivataion_Threshold_Reached
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Device_Update_Notification
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCASS_SET_FREQ_USED
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Assess_Adjacent_Channels
</UL>

<P><STRONG><a name="[46e]"></a>LSLCass_Fade_Distant_Channels</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, lslc_assmnt.o(i.LSLCass_Fade_Distant_Channels))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSLCass_Fade_Distant_Channels &rArr; LSLCASS_SET_FREQ_USED
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCASS_SET_FREQ_USED
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Disable_Channel
</UL>

<P><STRONG><a name="[e9]"></a>LSLCass_Handle_Assessments</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lslc_assmnt.o(i.LSLCass_Handle_Assessments))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSLCass_Handle_Assessments &rArr; LSLCass_Process_Rx_RSSI_Channel &rArr; LSLCass_Disable_Channel &rArr; LSLCass_Fade_Distant_Channels &rArr; LSLCASS_SET_FREQ_USED
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LM_Read_AFH_Channel_Assessment_Mode
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Process_Rx_RSSI_Channel
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Process_No_Rx_Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[366]"></a>LSLCass_Initialise_Device_Channel_Assessment</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lslc_assmnt.o(i.LSLCass_Initialise_Device_Channel_Assessment))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LM_Write_AFH_Channel_Assessment_Mode
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCcls_Initialise
</UL>

<P><STRONG><a name="[473]"></a>LSLCass_Is_Assessment_State</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lslc_assmnt.o(i.LSLCass_Is_Assessment_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LSLCass_Is_Assessment_State &rArr; LMafh_Is_Classification_Reporting
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Is_Classification_Reporting
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_Rx_RSSI_Channel
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_Rx_HEC_Event_Channel
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_Rx_CRC_Event_Channel
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_No_Rx_Packet
</UL>

<P><STRONG><a name="[471]"></a>LSLCass_Process_No_Rx_Packet</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lslc_assmnt.o(i.LSLCass_Process_No_Rx_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LSLCass_Process_No_Rx_Packet &rArr; LSLCass_Disable_Channel &rArr; LSLCass_Fade_Distant_Channels &rArr; LSLCASS_SET_FREQ_USED
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Disable_Channel
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Assess_Adjacent_Channels
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Handle_Assessments
</UL>

<P><STRONG><a name="[472]"></a>LSLCass_Process_Rx_RSSI_Channel</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lslc_assmnt.o(i.LSLCass_Process_Rx_RSSI_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LSLCass_Process_Rx_RSSI_Channel &rArr; LSLCass_Disable_Channel &rArr; LSLCass_Fade_Distant_Channels &rArr; LSLCASS_SET_FREQ_USED
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Disable_Channel
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Assess_Adjacent_Channels
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Handle_Assessments
</UL>

<P><STRONG><a name="[46f]"></a>LSLCass_Reactivataion_Threshold_Reached</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lslc_assmnt.o(i.LSLCass_Reactivataion_Threshold_Reached))
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Eval_Reuse
</UL>

<P><STRONG><a name="[178]"></a>LSLCass_Record_No_Rx_Packet</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lslc_assmnt.o(i.LSLCass_Record_No_Rx_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSLCass_Record_No_Rx_Packet &rArr; LSLCass_Is_Assessment_State &rArr; LMafh_Is_Classification_Reporting
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Read_Background_RSSI
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Get_Active_Procedure
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Get_Current_Frame_Activity
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Is_Inquiry_Scan_Rand_Wait
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LM_Read_AFH_Channel_Assessment_Mode
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Get_Frequency
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Update_Background_RSSI_Average
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Is_Assessment_State
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Process_No_Rx_Packet
</UL>

<P><STRONG><a name="[180]"></a>LSLCass_Record_Rx_CRC_Event_Channel</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lslc_assmnt.o(i.LSLCass_Record_Rx_CRC_Event_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LSLCass_Record_Rx_CRC_Event_Channel &rArr; LSLCass_Is_Assessment_State &rArr; LMafh_Is_Classification_Reporting
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Get_Active_Procedure
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LM_Read_AFH_Channel_Assessment_Mode
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Get_Frequency
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Is_Assessment_State
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Process_Rx_CRC
</UL>

<P><STRONG><a name="[187]"></a>LSLCass_Record_Rx_HEC_Event_Channel</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, lslc_assmnt.o(i.LSLCass_Record_Rx_HEC_Event_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSLCass_Record_Rx_HEC_Event_Channel &rArr; LSLCass_Depreciate_Interference_Map_For_Minimum_Channels &rArr; LSLCASS_SET_FREQ_USED
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Get_Active_Procedure
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Get_Current_Frame_Activity
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LM_Read_AFH_Channel_Assessment_Mode
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Get_Frequency
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Is_Assessment_State
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Device_Update_Notification
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Depreciate_Interference_Map_For_Minimum_Channels
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCASS_SET_FREQ_UNUSED
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Process_Rx_Header
</UL>

<P><STRONG><a name="[18d]"></a>LSLCass_Record_Rx_RSSI_Channel</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lslc_assmnt.o(i.LSLCass_Record_Rx_RSSI_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSLCass_Record_Rx_RSSI_Channel &rArr; LSLCass_Is_Assessment_State &rArr; LMafh_Is_Classification_Reporting
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Get_Active_Procedure
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Get_Current_Frame_Activity
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LM_Read_AFH_Channel_Assessment_Mode
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Get_Frequency
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Is_Assessment_State
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Process_RSSI
</UL>

<P><STRONG><a name="[476]"></a>LSLCass_Update_Background_RSSI_Average</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lslc_assmnt.o(i.LSLCass_Update_Background_RSSI_Average))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LSLCass_Update_Background_RSSI_Average
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_No_Rx_Packet
</UL>

<P><STRONG><a name="[2fa]"></a>LSLCclk_Initialise</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lslc_clk.o(i.LSLCclk_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Initialise
</UL>

<P><STRONG><a name="[52e]"></a>LSLCclk_Wait_For</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lslc_clk.o(i.LSLCclk_Wait_For))
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Restore_BT_Clock
</UL>

<P><STRONG><a name="[367]"></a>LSLCcls_Build_Channel_Classification</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, lslc_class.o(i.LSLCcls_Build_Channel_Classification))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LSLCcls_Build_Channel_Classification
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Report_Slave_Channel_Classification
</UL>

<P><STRONG><a name="[36a]"></a>LSLCcls_Build_Channel_Map</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lslc_class.o(i.LSLCcls_Build_Channel_Map))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LSLCcls_Build_Channel_Map &rArr; LSLCafh_Count_1_Bits
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_Count_1_Bits
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Update_Master_AFH_Piconet
</UL>

<P><STRONG><a name="[2ed]"></a>LSLCcls_Initialise</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lslc_class.o(i.LSLCcls_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LSLCcls_Initialise &rArr; LSLCcls_Record_Device_Channel_Map &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCcls_Record_Device_Channel_Map
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCcls_Initialise_Slave_Channel_Classification
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Initialise_Device_Channel_Assessment
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Initialise
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Free_Link
</UL>

<P><STRONG><a name="[356]"></a>LSLCcls_Initialise_Slave_Channel_Classification</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lslc_class.o(i.LSLCcls_Initialise_Slave_Channel_Classification))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Deactivate_AFH
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCcls_Initialise
</UL>

<P><STRONG><a name="[35d]"></a>LSLCcls_Record_Device_Channel_Map</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lslc_class.o(i.LSLCcls_Record_Device_Channel_Map))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LSLCcls_Record_Device_Channel_Map &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LM_Write_AFH_Channel_Assessment_Mode
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LMP_Channel_Classification_Req
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCcls_Initialise
</UL>

<P><STRONG><a name="[35c]"></a>LSLCcls_Record_Slave_Channel_Classification</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lslc_class.o(i.LSLCcls_Record_Slave_Channel_Classification))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LSLCcls_Record_Slave_Channel_Classification &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LMP_Channel_Classification
</UL>

<P><STRONG><a name="[478]"></a>LSLCfreq_Assign_Frequency_Kernel</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lslc_freq.o(i.LSLCfreq_Assign_Frequency_Kernel))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LSLCfreq_Assign_Frequency_Kernel &rArr; LSLCafh_Assign_AFH_Kernel &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_Assign_AFH_Kernel
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Request
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TC_Control_Testmode_Standalone
</UL>

<P><STRONG><a name="[122]"></a>LSLCfreq_Early_Prepare_Frequency_FHS_Response_ID</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lslc_freq.o(i.LSLCfreq_Early_Prepare_Frequency_FHS_Response_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = LSLCfreq_Early_Prepare_Frequency_FHS_Response_ID &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetFrequency
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_get_device_state
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Get_Table_Frequency_Page_FHS_Response_ID
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Prepare_Frequency_Context
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKD_RX_HDR
</UL>

<P><STRONG><a name="[477]"></a>LSLCfreq_Get_Frequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lslc_freq.o(i.LSLCfreq_Get_Frequency))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_Rx_RSSI_Channel
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_Rx_HEC_Event_Channel
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_Rx_CRC_Event_Channel
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_No_Rx_Packet
</UL>

<P><STRONG><a name="[2f4]"></a>LSLCfreq_Initialise</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lslc_freq.o(i.LSLCfreq_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Initialise
</UL>

<P><STRONG><a name="[47a]"></a>LSLCfreq_Prepare_Frequency_Connection</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, lslc_freq.o(i.LSLCfreq_Prepare_Frequency_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LSLCfreq_Prepare_Frequency_Connection &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetFrequency
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_get_device_state
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_Get_Frequency_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCpkt_Prepare_Piconet_Channel_Access
</UL>

<P><STRONG><a name="[194]"></a>LSLCfreq_Prepare_Rx_Frequency_R2P</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lslc_freq.o(i.LSLCfreq_Prepare_Rx_Frequency_R2P))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = LSLCfreq_Prepare_Rx_Frequency_R2P &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetFrequency
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_Get_Frequency_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_Return_To_Piconet
</UL>

<P><STRONG><a name="[2f6]"></a>LSLChop_Build_Frequency_Table</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, lslc_hop.o(i.LSLChop_Build_Frequency_Table))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LSLChop_Build_Frequency_Table &rArr; _LSLChop_Execute_HSE_Non_Connection
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Build_Hop_Kernel
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLChop_Execute_HSE_Non_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Initialise
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Inquiry_Request
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Request
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Hopping_Mode
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Hop_Frequencies
</UL>

<P><STRONG><a name="[463]"></a>LSLChop_Build_Hop_Kernel</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, lslc_hop.o(i.LSLChop_Build_Hop_Kernel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LSLChop_Build_Hop_Kernel
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Build_Frequency_Table
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_Assign_AFH_Kernel
</UL>

<P><STRONG><a name="[47c]"></a>LSLChop_Freeze_X_for_Page</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lslc_hop.o(i.LSLChop_Freeze_X_for_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LSLChop_Freeze_X_for_Page &rArr; _LSLChop_Get_X_Page_Inquiry
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLChop_Get_X_Page_Inquiry
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Page
</UL>

<P><STRONG><a name="[479]"></a>LSLChop_Get_Table_Frequency_Page_FHS_Response_ID</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, lslc_hop.o(i.LSLChop_Get_Table_Frequency_Page_FHS_Response_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LSLChop_Get_Table_Frequency_Page_FHS_Response_ID
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Get_X
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Early_Prepare_Frequency_FHS_Response_ID
</UL>

<P><STRONG><a name="[192]"></a>LSLChop_Get_TxRxFreqs_SlavePageResponse</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lslc_hop.o(i.LSLChop_Get_TxRxFreqs_SlavePageResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LSLChop_Get_TxRxFreqs_SlavePageResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Get_X
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Early_Prepare_TxRxFreqs_SlavePageResponse
</UL>

<P><STRONG><a name="[562]"></a>LSLChop_Increment_N_Inquiry_Scan</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lslc_hop.o(i.LSLChop_Increment_N_Inquiry_Scan))
<BR><BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinqScan_Generate_FHS
</UL>

<P><STRONG><a name="[127]"></a>LSLChop_Increment_X_Page_Scan</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lslc_hop.o(i.LSLChop_Increment_X_Page_Scan))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM0
</UL>

<P><STRONG><a name="[229]"></a>LSLChop_Initialise</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, lslc_hop.o(i.LSLChop_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LSLChop_Initialise
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Set_HSE_Engine
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Initialise
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Testmode_Exit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Get_Next_Master_Tx_Activity
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Testmode_Change_Settings
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Hopping_Mode
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Hop_Frequencies
</UL>

<P><STRONG><a name="[525]"></a>LSLChop_Set_Train</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lslc_hop.o(i.LSLChop_Set_Train))
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Page
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Inquiry
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Inquiry_Scan
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpageScan_OS_START
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinqScan_OS_START
</UL>

<P><STRONG><a name="[563]"></a>LSLChop_Toggle_Train</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lslc_hop.o(i.LSLChop_Toggle_Train))
<BR><BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinq_Generate_ID
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpage_Generate_ID
</UL>

<P><STRONG><a name="[126]"></a>LSLCirq_Disable_All_Intr_Except</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lslc_irq.o(i.LSLCirq_Disable_All_Intr_Except))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Local_Piconet_Request
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Change_To_Local_Piconet
</UL>

<P><STRONG><a name="[f1]"></a>LSLCirq_Disable_And_Clear_Tabasco_Intr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lslc_irq.o(i.LSLCirq_Disable_And_Clear_Tabasco_Intr))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
</UL>

<P><STRONG><a name="[4a1]"></a>LSLCirq_Disable_Aux_Tim_Intr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lslc_irq.o(i.LSLCirq_Disable_Aux_Tim_Intr))
<BR><BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Handle_Early_Wakeup
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Halt_System
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Cancel
</UL>

<P><STRONG><a name="[543]"></a>LSLCirq_Enable_Aux_Tim_Intr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lslc_irq.o(i.LSLCirq_Enable_Aux_Tim_Intr))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
</UL>

<P><STRONG><a name="[2fb]"></a>LSLCirq_Initialise</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lslc_irq.o(i.LSLCirq_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Initialise
</UL>

<P><STRONG><a name="[47d]"></a>LSLCpkt_Disable_Receiver</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lslc_pkt.o(i.LSLCpkt_Disable_Receiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LSLCpkt_Disable_Receiver
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Disable_Receiver
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepareRx
</UL>

<P><STRONG><a name="[156]"></a>LSLCpkt_Generate_ACL</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lslc_pkt.o(i.LSLCpkt_Generate_ACL))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = LSLCpkt_Generate_ACL &rArr; LSLCpkt_Generate_POLL &rArr; _LSLCpkt_Prepare_Piconet_Channel_Access &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetRadioMode
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_POLL
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_ACL_Payload
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_PacketHeader
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_NULL
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCpkt_Prepare_Piconet_Channel_Access
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Process_Rx
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Prepare_Tx
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Park
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Test_Transmitter
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Prepare_Next_Master_Frame_Activity
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Get_Emergency_Poll_Activity
</UL>

<P><STRONG><a name="[47f]"></a>LSLCpkt_Generate_EIR</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lslc_pkt.o(i.LSLCpkt_Generate_EIR))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = LSLCpkt_Generate_EIR &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Set_Tx_Power_Level
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_EIR_Payload
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_PacketHeader
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_AccessCode
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Tx_Rx_FHS
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Local_EIR_Packet_Type
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Prepare_Frequency_Context
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Inquiry_Scan
</UL>

<P><STRONG><a name="[481]"></a>LSLCpkt_Generate_FHS</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lslc_pkt.o(i.LSLCpkt_Generate_FHS))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = LSLCpkt_Generate_FHS &rArr; LSLCpkt_Generate_FHS_Common_ &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Device_FHS_Ref
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_FHS_Payload
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Local_EIR_Length
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_FHS_Common_
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Page
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinqScan_Generate_FHS
</UL>

<P><STRONG><a name="[483]"></a>LSLCpkt_Generate_FHS_Ex</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lslc_pkt.o(i.LSLCpkt_Generate_FHS_Ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = LSLCpkt_Generate_FHS_Ex &rArr; LSLCpkt_Generate_FHS_Common_ &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_FHS_Payload_Ex
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_FHS_Common_
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
</UL>

<P><STRONG><a name="[484]"></a>LSLCpkt_Generate_ID</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lslc_pkt.o(i.LSLCpkt_Generate_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = LSLCpkt_Generate_ID &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Set_Tx_Power_Level
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_AccessCode
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Tx_ID
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Prepare_Frequency_Context
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinq_Generate_ID
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Park
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpageScan_Process_ID_Pkt_During_Scanning
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpage_Resume_Paging
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpage_Generate_ID
</UL>

<P><STRONG><a name="[158]"></a>LSLCpkt_Generate_NULL</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lslc_pkt.o(i.LSLCpkt_Generate_NULL))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = LSLCpkt_Generate_NULL &rArr; _LSLCpkt_Prepare_Piconet_Channel_Access &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_PacketHeader
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCpkt_Prepare_Piconet_Channel_Access
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Prepare_Tx
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Park
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Park
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Loopback_Testmode_Payload
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_prepareTx
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Get_Emergency_Poll_Activity
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ACL
</UL>

<P><STRONG><a name="[22b]"></a>LSLCpkt_Generate_POLL</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lslc_pkt.o(i.LSLCpkt_Generate_POLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = LSLCpkt_Generate_POLL &rArr; _LSLCpkt_Prepare_Piconet_Channel_Access &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_PacketHeader
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCpkt_Prepare_Piconet_Channel_Access
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Park
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Page
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Get_Next_Master_Tx_Activity
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ACL
</UL>

<P><STRONG><a name="[12e]"></a>LSLCpkt_Get_Active_Rx_Device_Link_Ref</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lslc_pkt.o(i.LSLCpkt_Get_Active_Rx_Device_Link_Ref))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Enable_Receiver
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM2
</UL>

<P><STRONG><a name="[173]"></a>LSLCpkt_Get_Active_Tx_Device_Link_Ref</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lslc_pkt.o(i.LSLCpkt_Get_Active_Tx_Device_Link_Ref))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Enable_Transmitter
</UL>

<P><STRONG><a name="[150]"></a>LSLCpkt_Prepare_Receiver_Connection</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lslc_pkt.o(i.LSLCpkt_Prepare_Receiver_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = LSLCpkt_Prepare_Receiver_Connection &rArr; _LSLCpkt_Prepare_Piconet_Channel_Access &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Rx_Connection
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Set_Am_Addr
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCpkt_Prepare_Piconet_Channel_Access
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Tx_Start
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepareRx
</UL>

<P><STRONG><a name="[486]"></a>LSLCpkt_Prepare_Receiver_FHS</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lslc_pkt.o(i.LSLCpkt_Prepare_Receiver_FHS))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = LSLCpkt_Prepare_Receiver_FHS &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_AccessCode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Rx_FHS
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Set_Am_Addr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Prepare_Frequency_Context
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepareRx
</UL>

<P><STRONG><a name="[487]"></a>LSLCpkt_Prepare_Receiver_ID</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lslc_pkt.o(i.LSLCpkt_Prepare_Receiver_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = LSLCpkt_Prepare_Receiver_ID &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Rx_ID
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_AccessCode
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Prepare_Frequency_Context
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Inquiry_Scan
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepareRx
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpageScan_OS_START
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinqScan_OS_START
</UL>

<P><STRONG><a name="[488]"></a>LSLCpkt_Prepare_Receiver_Master_Slave_Switch</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lslc_pkt.o(i.LSLCpkt_Prepare_Receiver_Master_Slave_Switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = LSLCpkt_Prepare_Receiver_Master_Slave_Switch &rArr; _LSLCpkt_Prepare_Piconet_Channel_Access &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Rx_Connection
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Set_Am_Addr
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCpkt_Prepare_Piconet_Channel_Access
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepareRx
</UL>

<P><STRONG><a name="[11d]"></a>LSLCpkt_Process_No_Rx_Packet</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lslc_pkt.o(i.LSLCpkt_Process_No_Rx_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LSLCpkt_Process_No_Rx_Packet &rArr; LSLCacc_Process_No_Rx_Packet &rArr; LSLCass_Record_No_Rx_Packet &rArr; LSLCass_Is_Assessment_State &rArr; LMafh_Is_Classification_Reporting
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Process_No_Rx_Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM3
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_NO_PKT_RCVD
</UL>

<P><STRONG><a name="[118]"></a>LSLCpkt_Process_Rx_Packet</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lslc_pkt.o(i.LSLCpkt_Process_Rx_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = LSLCpkt_Process_Rx_Packet &rArr; LSLCacc_Extract_Packet &rArr; _LSLCacc_Extract_ACL_Payload &rArr; _LSLCacc_Loopback_Testmode_Payload &rArr; LSLCpkt_Generate_NULL &rArr; _LSLCpkt_Prepare_Piconet_Channel_Access &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Attempt_RSSI_Read
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Process_RSSI
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Extract_Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM2
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKD
</UL>

<P><STRONG><a name="[11f]"></a>LSLCpkt_Process_Rx_Packet_Header</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lslc_pkt.o(i.LSLCpkt_Process_Rx_Packet_Header))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LSLCpkt_Process_Rx_Packet_Header &rArr; LSLCacc_Process_Rx_Header &rArr; LSLCass_Record_Rx_HEC_Event_Channel &rArr; LSLCass_Depreciate_Interference_Map_For_Minimum_Channels &rArr; LSLCASS_SET_FREQ_USED
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Process_RSSI
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Process_Rx_Header
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKD_RX_HDR
</UL>

<P><STRONG><a name="[108]"></a>LSLCslot_Handle_AUX_TIM</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lslc_slot.o(i.LSLCslot_Handle_AUX_TIM))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = LSLCslot_Handle_AUX_TIM &rArr; SYSpwr_Handle_Early_Wakeup &rArr; USLCchac_Wakeup &rArr; USLCsleep_Wakeup &rArr; USLCsleep_State_Dispatcher &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Handle_Early_Wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ISR
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
</UL>

<P><STRONG><a name="[2f8]"></a>LSLCslot_Initialise</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lslc_slot.o(i.LSLCslot_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Initialise
</UL>

<P><STRONG><a name="[183]"></a>LSLCstat_Log_Rx_Final_Status</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lslc_stat.o(i.LSLCstat_Log_Rx_Final_Status))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Extract_Packet
</UL>

<P><STRONG><a name="[114]"></a>LSLCstat_Log_Rx_Packet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lslc_stat.o(i.LSLCstat_Log_Rx_Packet))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKD_RX_HDR
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKD
</UL>

<P><STRONG><a name="[2f7]"></a>LSLCstat_Setup_Packet_Log</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lslc_stat.o(i.LSLCstat_Setup_Packet_Log))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Initialise
</UL>

<P><STRONG><a name="[2ba]"></a>MultiplyBigHexByUint32</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, lmp_ecc.o(i.MultiplyBigHexByUint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MultiplyBigHexByUint32 &rArr; specialModP &rArr; SubtractFromSelfBigHexSign &rArr; SubtractBigHex
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBigNumberLength
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Point_Addition
</UL>

<P><STRONG><a name="[2b9]"></a>MultiplyBigHexModP</STRONG> (Thumb, 280 bytes, Stack size 136 bytes, lmp_ecc.o(i.MultiplyBigHexModP))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = MultiplyBigHexModP &rArr; specialModP &rArr; SubtractFromSelfBigHexSign &rArr; SubtractBigHex
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBigNumberLength
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyBigHex
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu (via BLX)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via BLX)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Point_Addition
</UL>

<P><STRONG><a name="[571]"></a>MultiplyByU32ModPInv</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lmp_ecc.o(i.MultiplyByU32ModPInv))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP
</UL>

<P><STRONG><a name="[2b6]"></a>SHA_256</STRONG> (Thumb, 792 bytes, Stack size 424 bytes, lmp_ssp_engine.o(i.SHA_256))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = SHA_256
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G
</UL>

<P><STRONG><a name="[48c]"></a>SPI_InterruptHandler</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, driver_spi.o(i.SPI_InterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = SPI_InterruptHandler &rArr; bprintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bprintf
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_txint_disable
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_trans_start
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_txint_mode
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_rxint_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_IRQ_Handler (via Veneer)
</UL>

<P><STRONG><a name="[cd]"></a>SYS_Host_Initialise</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, devicebtj_handler.o(i.SYS_Host_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = SYS_Host_Initialise &rArr; send_HCI_command &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdpdb_Doreg
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_HCI_command
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via BLX)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>SYS_Initialise</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, main.o(i.SYS_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = SYS_Initialise &rArr; readLinkNum &rArr; flash_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Enable_Interrupts_Save_Flags (via BLX)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags (via BLX)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xver_initial
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readLinkNum
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Initial
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Start
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Initial
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSconfig_Initialise
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_config
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICU_Initial
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Initial
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_ICU_Intr
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_wdt_disable
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env_config
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_single_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>SYSatomic_Increment_u_int8</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tra_queue.o(i.SYSatomic_Increment_u_int8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSatomic_Increment_u_int8
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags (via BLX)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
</UL>

<P><STRONG><a name="[506]"></a>SYSconfig_Disable_Feature</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tc_interface.o(i.SYSconfig_Disable_Feature))
<BR><BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Features
</UL>

<P><STRONG><a name="[505]"></a>SYSconfig_Enable_Feature</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tc_interface.o(i.SYSconfig_Enable_Feature))
<BR><BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Features
</UL>

<P><STRONG><a name="[249]"></a>SYSconfig_Get_Device_Links_Location</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dl_dev_impl.o(i.SYSconfig_Get_Device_Links_Location))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Unpark_Rollback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Unpark
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Park
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Free_Link
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Initialise_Link
</UL>

<P><STRONG><a name="[499]"></a>SYSconfig_Initialise</STRONG> (Thumb, 270 bytes, Stack size 96 bytes, sys_config.o(i.SYSconfig_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SYSconfig_Initialise &rArr; BTaddr_Build_Sync_Word
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYShal_config_Initialise
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTaddr_Build_Sync_Word
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Initialise
</UL>

<P><STRONG><a name="[32b]"></a>SYSconfig_Is_Feature_Supported</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lmp_link_policy.o(i.SYSconfig_Is_Feature_Supported))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LM_Write_AFH_Channel_Assessment_Mode
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LMP_Set_AFH
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Auto_Rate
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Max_Slots_Allowed
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMPafh_Request_Classification_Reporting
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Features
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Extended_Features
</UL>

<P><STRONG><a name="[507]"></a>SYSconfig_Set_Hopping_Mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tc_interface.o(i.SYSconfig_Set_Hopping_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Hopping_Mode
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Hop_Frequencies
</UL>

<P><STRONG><a name="[49d]"></a>SYShal_config_Initialise</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys_hal_config.o(i.SYShal_config_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSconfig_Initialise
</UL>

<P><STRONG><a name="[504]"></a>SYShalconfig_BD_ADDR_Was_Set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_hal_config.o(i.SYShalconfig_BD_ADDR_Was_Set))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Local_Bd_Addr
</UL>

<P><STRONG><a name="[555]"></a>SYShalconfig_Device_Class_Was_Set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_hal_config.o(i.SYShalconfig_Device_Class_Was_Set))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[435]"></a>SYShalconfig_Unit_Key_Was_Set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_hal_config.o(i.SYShalconfig_Unit_Key_Was_Set))
<BR><BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Create_New_Unit_Key
</UL>

<P><STRONG><a name="[20d]"></a>SYSinit_Initialise</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_init.o(i.SYSinit_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_init_After_set_BDADDR
</UL>

<P><STRONG><a name="[f7]"></a>SYSirq_Disable_Interrupts_Save_Flags</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sys_irq.o(i.SYSirq_Disable_Interrupts_Save_Flags))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CPU_PLL_clk (via BLX)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Initialise (via BLX)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode (via BLX)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CPU_Speed_16M (via BLX)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue (via BLX)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit (via BLX)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued (via BLX)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Handle_Expired_Timers (via BLX)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Dequeue_Next (via BLX)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Initialise (via BLX)
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Enlist_Timer (via BLX)
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Delist_Timer (via BLX)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer (via BLX)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Calibrate_ (via BLX)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSatomic_Increment_u_int8 (via BLX)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enhanced_Flush (via BLX)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_BB_Dequeue_Next (via BLX)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reduce_Queue_Number_Of_Processed_Chunks (via BLX)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_LMP_Park_Accepted_Ack_Timeout (via BLX)
</UL>

<P><STRONG><a name="[49a]"></a>SYSirq_Enable_Interrupts_Save_Flags</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sys_irq.o(i.SYSirq_Enable_Interrupts_Save_Flags))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Initialise (via BLX)
</UL>

<P><STRONG><a name="[9]"></a>SYSirq_IRQ_Handler</STRONG> (ARM, 188 bytes, Stack size 40 bytes, sys_irq.o(i.SYSirq_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = SYSirq_IRQ_Handler &rArr; SPI_InterruptHandler &rArr; bprintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ISR (via Veneer)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CPU_PLL_clk (via BLX)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_InterruptHandler (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_boot.o(SYS_Boot)
</UL>
<P><STRONG><a name="[211]"></a>SYSirq_Initialise</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_irq.o(i.SYSirq_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[f8]"></a>SYSirq_Interrupts_Restore_Flags</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_irq.o(i.SYSirq_Interrupts_Restore_Flags))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CPU_PLL_clk (via BLX)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode (via BLX)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CPU_Speed_16M (via BLX)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue (via BLX)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit (via BLX)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued (via BLX)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Handle_Expired_Timers (via BLX)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Dequeue_Next (via BLX)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Initialise (via BLX)
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Enlist_Timer (via BLX)
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Delist_Timer (via BLX)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer (via BLX)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Calibrate_ (via BLX)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSatomic_Increment_u_int8 (via BLX)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enhanced_Flush (via BLX)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_BB_Dequeue_Next (via BLX)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reduce_Queue_Number_Of_Processed_Chunks (via BLX)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_LMP_Park_Accepted_Ack_Timeout (via BLX)
</UL>

<P><STRONG><a name="[209]"></a>SYSmmap_Map_BlueStream</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_mmap.o(i.SYSmmap_Map_BlueStream))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[53f]"></a>SYSpwr_Exit_Halt_System</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_power.o(i.SYSpwr_Exit_Halt_System))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Cancel
</UL>

<P><STRONG><a name="[53e]"></a>SYSpwr_Get_Min_Frames_To_Sleep</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_power.o(i.SYSpwr_Get_Min_Frames_To_Sleep))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Cancel
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Request
</UL>

<P><STRONG><a name="[f0]"></a>SYSpwr_Halt_System</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_power.o(i.SYSpwr_Halt_System))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYSpwr_Halt_System &rArr; SYSpwr_Is_Available_Sleep_System &rArr; LMtmr_Timer_Expired &rArr; BTtimer_Is_Expired &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_Aux_Tim_Intr
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wakeup
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_idle
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Is_Available_Sleep_System
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_aux_tim_intr_mask
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Deep_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Handle_Early_Wakeup
</UL>

<P><STRONG><a name="[489]"></a>SYSpwr_Handle_Early_Wakeup</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sys_power.o(i.SYSpwr_Handle_Early_Wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = SYSpwr_Handle_Early_Wakeup &rArr; USLCchac_Wakeup &rArr; USLCsleep_Wakeup &rArr; USLCsleep_State_Dispatcher &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Wakeup
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_Aux_Tim_Intr
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Setup_Sleep_Timer
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Halt_System
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_aux_tim_intr_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_AUX_TIM
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Cancel
</UL>

<P><STRONG><a name="[215]"></a>SYSpwr_Initialise</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_power.o(i.SYSpwr_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[49f]"></a>SYSpwr_Is_Available_Sleep_System</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sys_power.o(i.SYSpwr_Is_Available_Sleep_System))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SYSpwr_Is_Available_Sleep_System &rArr; LMtmr_Timer_Expired &rArr; BTtimer_Is_Expired &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Timer_Expired
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Inquiry_Is_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Sleep_System
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Halt_System
</UL>

<P><STRONG><a name="[53d]"></a>SYSpwr_Is_Low_Power_Mode_Active</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_power.o(i.SYSpwr_Is_Low_Power_Mode_Active))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Cancel
</UL>

<P><STRONG><a name="[53c]"></a>SYSpwr_LowFrequencyOscillatorAvailable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_power.o(i.SYSpwr_LowFrequencyOscillatorAvailable))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_Get_Search_Window_Frames
</UL>

<P><STRONG><a name="[501]"></a>SYSpwr_Set_LowFrequencyOscillatorAvailable_Value</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_power.o(i.SYSpwr_Set_LowFrequencyOscillatorAvailable_Value))
<BR><BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Enable_Low_Power_Mode
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Disable_Low_Power_Mode
</UL>

<P><STRONG><a name="[4a4]"></a>SYSpwr_Setup_Sleep_Timer</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sys_power.o(i.SYSpwr_Setup_Sleep_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSpwr_Setup_Sleep_Timer
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_aux_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Handle_Early_Wakeup
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Cancel
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
</UL>

<P><STRONG><a name="[ee]"></a>SYSpwr_Sleep_System</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys_power.o(i.SYSpwr_Sleep_System))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYSpwr_Sleep_System &rArr; SYSpwr_Is_Available_Sleep_System &rArr; LMtmr_Timer_Expired &rArr; BTtimer_Is_Expired &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_Enter_Light_mode (via BLX)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_exist_Acl_Num
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Is_Available_Sleep_System
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[f4]"></a>SYSrand_Get_Rand</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, sys_rand_num_gen.o(i.SYSrand_Get_Rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSrand_Get_Rand &rArr; SYSrand_Get_Rand_R
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_R
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_InqScan_Rand_Wait
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Encapsulated_Payload
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Accepted
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Get_Interval_Rand
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_192_Ex
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_128_Ex
</UL>

<P><STRONG><a name="[413]"></a>SYSrand_Get_Rand_128_Ex</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, sys_rand_num_gen.o(i.SYSrand_Get_Rand_128_Ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SYSrand_Get_Rand_128_Ex &rArr; SYSrand_Get_Rand &rArr; SYSrand_Get_Rand_R
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Passkey_Request_Reply
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_Remote_OOB_Data_Request_Reply
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_Read_Local_OOB_Data
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Pin_Code_Request_Reply
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Master_Link_Key
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Create_New_Unit_Key
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Simple_Pairing_Number
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Simple_Pairing_Confirm
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Encapsulated_Payload
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Accepted
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_In_Rand
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_CombKey_Setup
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Challenge
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Start_Encryption
</UL>

<P><STRONG><a name="[448]"></a>SYSrand_Get_Rand_192_Ex</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, sys_rand_num_gen.o(i.SYSrand_Get_Rand_192_Ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SYSrand_Get_Rand_192_Ex &rArr; SYSrand_Get_Rand &rArr; SYSrand_Get_Rand_R
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Generate_New_Public_Private_Key_Pair
</UL>

<P><STRONG><a name="[4a9]"></a>SYSrand_Get_Rand_R</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sys_rand_num_gen.o(i.SYSrand_Get_Rand_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSrand_Get_Rand_R
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand
</UL>

<P><STRONG><a name="[20a]"></a>SYSrand_Seed_Rand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_rand_num_gen.o(i.SYSrand_Seed_Rand))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[c2]"></a>SetRFSyncWindow</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_radio.o(i.SetRFSyncWindow))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Service
</UL>

<P><STRONG><a name="[ba]"></a>Set_CPU_PLL_clk</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, driver_icu.o(i.Set_CPU_PLL_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Set_CPU_PLL_clk
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags (via BLX)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ISR
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_IRQ_Handler (via BLX)
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_FIQ_Handler (via BLX)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICU_Initial
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_Point_Multiplication_uint8
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMecc_Generate_ECC_Key
</UL>

<P><STRONG><a name="[2af]"></a>Set_CPU_Speed_16M</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, driver_icu.o(i.Set_CPU_Speed_16M))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_CPU_Speed_16M
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags (via BLX)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_idle
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Deep_sleep
</UL>

<P><STRONG><a name="[203]"></a>SubtractBigHex</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, lmp_ecc.o(i.SubtractBigHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SubtractBigHex
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBigNumberLength
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHexSign
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHexMod
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPdiv2
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddP
</UL>

<P><STRONG><a name="[2b7]"></a>SubtractBigHexMod</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lmp_ecc.o(i.SubtractBigHexMod))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SubtractBigHexMod &rArr; AddP &rArr; SubtractBigHex
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGreaterThanOrEqual
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHex
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHex
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddP
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBigHex
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHexUint32
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Point_Addition
</UL>

<P><STRONG><a name="[2bb]"></a>SubtractBigHexUint32</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, lmp_ecc.o(i.SubtractBigHexUint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SubtractBigHexUint32 &rArr; SubtractBigHexMod &rArr; AddP &rArr; SubtractBigHex
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBigNumber
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyBigHex
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHexMod
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Point_Addition
</UL>

<P><STRONG><a name="[4ab]"></a>SubtractFromSelfBigHex</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lmp_ecc.o(i.SubtractFromSelfBigHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SubtractFromSelfBigHex
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBigNumberLength
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigHexInversion
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHexSign
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHexMod
</UL>

<P><STRONG><a name="[4ac]"></a>SubtractFromSelfBigHexSign</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, lmp_ecc.o(i.SubtractFromSelfBigHexSign))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SubtractFromSelfBigHexSign &rArr; SubtractBigHex
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGreaterThanOrEqual
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyBigHex
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHex
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHex
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add2SelfBigHex
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigHexInversion
</UL>

<P><STRONG><a name="[2c0]"></a>TCI_Dispatch_Prop_Command</STRONG> (Thumb, 950 bytes, Stack size 16 bytes, tc_cmd_disp.o(i.TCI_Dispatch_Prop_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = TCI_Dispatch_Prop_Command &rArr; TC_Perform_Test_Control &rArr; _TC_Control_Testmode_In_Slave &rArr; BTtmt_LMP_Send_Test_Control &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCIparam_Get_Uint32
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCIparam_Get_Uint16
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Set_AFH_Control_Byte
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_eSCO_Retransmission_Mode
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_VCI_CLK_Override
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Security_Timeouts
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_R2P_Min_Search_Window
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Park_Parameters
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Whitening_Enable
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Timing_Information
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_SyncWord
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Radio_Register
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Radio_Power
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Native_Clock
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Link_Key_Type
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Hopping_Mode
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Hop_Frequencies
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Hardware_Register
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Features
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Extended_Features
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Encryption_Key_Length
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Default_Packet_Type
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Host_Specific_Parameters
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Features
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Update_Manufacturing_Information
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_System_Hardware_Configuration
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Local_Next_Available_Am_Addr
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Local_Failed_Attempts_Counter
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Local_Bd_Addr
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_HCIT_UART_Baud_Rate
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Enable_SCO_Via_HCI
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Enable_Low_Power_Mode
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Emergency_Poll_Interval
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Disable_SCO_Via_HCI
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Disable_Low_Power_Mode
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Broadcast_Scan_Window
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Send_Encryption_Key_Size_Mask_Req
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Reset_Local_Pump_Monitors
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_eSCO_Retransmission_Mode
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Unused_Stack_Space
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Remote_Timing_Information
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Raw_RSSI_PER_BER
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Raw_RSSI
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Radio_Modulation
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_R2P_Min_Search_Window
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_PER
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Whitening_Enable
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Timing_Information
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Relative_Host_Controller_Mips
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Radio_Register
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Radio_Power
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Pump_Monitors
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Native_Clock
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Link_Key_Type
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Hopping_Mode
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Hop_Frequencies
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Hardware_Version
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Hardware_Area
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Extended_Features
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Encryption_Key_Length
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Default_Packet_Type
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_BER
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Perform_Test_Control
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Local_Area_Download
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Increase_Remote_Power
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Increase_Local_Volume
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Force_System_Halt
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Decrease_Remote_Power
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Decrease_Local_Volume
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Clear_Local_Failed_Attempts_Counter
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Change_Radio_Modulation
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Beken_Hardware_Test
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Activate_Remote_DUT
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC_Command_Dispatcher
</UL>

<P><STRONG><a name="[4b1]"></a>TC_Activate_Remote_DUT</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Activate_Remote_DUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = TC_Activate_Remote_DUT &rArr; BTtmt_LMP_Send_Test_Activate &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_LMP_Send_Test_Activate
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Status_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4ad]"></a>TC_Beken_Hardware_Test</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Beken_Hardware_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TC_Beken_Hardware_Test &rArr; Tc_Beken_Debug_UART_Access_Register &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCIparam_Get_Uint32
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tc_Beken_Debug_UART_Send_Link_Ok
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tc_Beken_Debug_UART_Access_Register
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Beken_Send_General_To_Host
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4f9]"></a>TC_Beken_Send_General_To_Host</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Beken_Send_General_To_Host))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Beken_Send_General_To_Host &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Beken_Hardware_Test
</UL>

<P><STRONG><a name="[4da]"></a>TC_Change_Radio_Modulation</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Change_Radio_Modulation))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TC_Change_Radio_Modulation &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4d0]"></a>TC_Clear_Local_Failed_Attempts_Counter</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Clear_Local_Failed_Attempts_Counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Clear_Local_Failed_Attempts_Counter &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint8
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_RecordAuthSuccess
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4b8]"></a>TC_Decrease_Local_Volume</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Decrease_Local_Volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TC_Decrease_Local_Volume &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Decrease_Volume
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4b6]"></a>TC_Decrease_Remote_Power</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Decrease_Remote_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TC_Decrease_Remote_Power &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Handle
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4ee]"></a>TC_Force_System_Halt</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Force_System_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Force_System_Halt &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4b7]"></a>TC_Increase_Local_Volume</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Increase_Local_Volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TC_Increase_Local_Volume &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Increase_Volume
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4b3]"></a>TC_Increase_Remote_Power</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Increase_Remote_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TC_Increase_Remote_Power &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Handle
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4d7]"></a>TC_Local_Area_Download</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Local_Area_Download))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Local_Area_Download &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4b2]"></a>TC_Perform_Test_Control</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Perform_Test_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = TC_Perform_Test_Control &rArr; _TC_Control_Testmode_In_Slave &rArr; BTtmt_LMP_Send_Test_Control &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TC_Control_Testmode_Standalone
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TC_Control_Testmode_In_Slave
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4eb]"></a>TC_Read_BER</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Read_BER))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = TC_Read_BER &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint32
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Is_PER_BER_Available
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Get_BER
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4cd]"></a>TC_Read_Local_Default_Packet_Type</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Read_Local_Default_Packet_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TC_Read_Local_Default_Packet_Type &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_Get_Default_Pkt_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4cb]"></a>TC_Read_Local_Encryption_Key_Length</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Read_Local_Encryption_Key_Length))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Read_Local_Encryption_Key_Length &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint8
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4c2]"></a>TC_Read_Local_Extended_Features</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Read_Local_Extended_Features))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Read_Local_Extended_Features &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint8
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4e7]"></a>TC_Read_Local_Hardware_Area</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Read_Local_Hardware_Area))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Read_Local_Hardware_Area &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint32
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4b5]"></a>TC_Read_Local_Hardware_Version</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Read_Local_Hardware_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Read_Local_Hardware_Version &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint8
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4cc]"></a>TC_Read_Local_Hop_Frequencies</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Read_Local_Hop_Frequencies))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Read_Local_Hop_Frequencies &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint8
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4bd]"></a>TC_Read_Local_Hopping_Mode</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Read_Local_Hopping_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TC_Read_Local_Hopping_Mode &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint8
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4c1]"></a>TC_Read_Local_Link_Key_Type</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Read_Local_Link_Key_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TC_Read_Local_Link_Key_Type &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint8
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4ba]"></a>TC_Read_Local_Native_Clock</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Read_Local_Native_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TC_Read_Local_Native_Clock &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint32
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4c9]"></a>TC_Read_Local_Pump_Monitors</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Read_Local_Pump_Monitors))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TC_Read_Local_Pump_Monitors &rArr; TCeg_Command_Status_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Status_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4d4]"></a>TC_Read_Local_Radio_Power</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tc_interface.o(i.TC_Read_Local_Radio_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TC_Read_Local_Radio_Power &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Bd_Addr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4d9]"></a>TC_Read_Local_Radio_Register</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Read_Local_Radio_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Read_Local_Radio_Register &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4bb]"></a>TC_Read_Local_Relative_Host_Controller_Mips</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Read_Local_Relative_Host_Controller_Mips))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TC_Read_Local_Relative_Host_Controller_Mips &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint32
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4c5]"></a>TC_Read_Local_Timing_Information</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Read_Local_Timing_Information))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Read_Local_Timing_Information &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint8
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4bf]"></a>TC_Read_Local_Whitening_Enable</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Read_Local_Whitening_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TC_Read_Local_Whitening_Enable &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint8
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4ec]"></a>TC_Read_PER</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Read_PER))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = TC_Read_PER &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint32
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Is_PER_BER_Available
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Get_PER
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4de]"></a>TC_Read_R2P_Min_Search_Window</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Read_R2P_Min_Search_Window))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Read_R2P_Min_Search_Window &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_Read_R2P_Min_Search_Window
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4db]"></a>TC_Read_Radio_Modulation</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Read_Radio_Modulation))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Read_Radio_Modulation &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint8
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4ea]"></a>TC_Read_Raw_RSSI</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tc_interface.o(i.TC_Read_Raw_RSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TC_Read_Raw_RSSI &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Handle
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4ed]"></a>TC_Read_Raw_RSSI_PER_BER</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, tc_interface.o(i.TC_Read_Raw_RSSI_PER_BER))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = TC_Read_Raw_RSSI_PER_BER &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint8
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint32
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Is_PER_BER_Available
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Get_PER
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Get_BER
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4c7]"></a>TC_Read_Remote_Timing_Information</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Read_Remote_Timing_Information))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = TC_Read_Remote_Timing_Information &rArr; LMlc_LM_Timing_Accuracy_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Handle
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LM_Timing_Accuracy_Req
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4e3]"></a>TC_Read_Unused_Stack_Space</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Read_Unused_Stack_Space))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Read_Unused_Stack_Space &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint32
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4f2]"></a>TC_Read_eSCO_Retransmission_Mode</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Read_eSCO_Retransmission_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Read_eSCO_Retransmission_Mode &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4c8]"></a>TC_Reset_Local_Pump_Monitors</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Reset_Local_Pump_Monitors))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TC_Reset_Local_Pump_Monitors &rArr; TCeg_Command_Status_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Status_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4e9]"></a>TC_Send_Encryption_Key_Size_Mask_Req</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, tc_interface.o(i.TC_Send_Encryption_Key_Size_Mask_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = TC_Send_Encryption_Key_Size_Mask_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Handle
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4e2]"></a>TC_Set_Broadcast_Scan_Window</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Set_Broadcast_Scan_Window))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = TC_Set_Broadcast_Scan_Window &rArr; _Send_LMP_Set_Broadcast_Scan_Window &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Set_Broadcast_Scan_Window
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4dc]"></a>TC_Set_Disable_Low_Power_Mode</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Set_Disable_Low_Power_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Set_Disable_Low_Power_Mode &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Set_LowFrequencyOscillatorAvailable_Value
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4ef]"></a>TC_Set_Disable_SCO_Via_HCI</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Set_Disable_SCO_Via_HCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Set_Disable_SCO_Via_HCI &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4f5]"></a>TC_Set_Emergency_Poll_Interval</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Set_Emergency_Poll_Interval))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = TC_Set_Emergency_Poll_Interval &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4dd]"></a>TC_Set_Enable_Low_Power_Mode</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Set_Enable_Low_Power_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Set_Enable_Low_Power_Mode &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Set_LowFrequencyOscillatorAvailable_Value
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4f0]"></a>TC_Set_Enable_SCO_Via_HCI</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Set_Enable_SCO_Via_HCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Set_Enable_SCO_Via_HCI &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4e0]"></a>TC_Set_HCIT_UART_Baud_Rate</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Set_HCIT_UART_Baud_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Set_HCIT_UART_Baud_Rate &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Initialise
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Shutdown
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_UART_Set_Default_Baud_Rate
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4ae]"></a>TC_Set_Local_Bd_Addr</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, tc_interface.o(i.TC_Set_Local_Bd_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = TC_Set_Local_Bd_Addr &rArr; LMscan_Write_Scan_Enable &rArr; LMscan_Page_Scan_Start &rArr; LMaclctr_Alloc_Link &rArr; LC_Alloc_Link &rArr; DL_Alloc_Link &rArr; DL_Initialise_Link &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYShalconfig_BD_ADDR_Was_Set
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Write_Scan_Enable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_init_After_set_BDADDR
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTaddr_Build_Sync_Word
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Read_Scan_Enable
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4cf]"></a>TC_Set_Local_Failed_Attempts_Counter</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Set_Local_Failed_Attempts_Counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Set_Local_Failed_Attempts_Counter &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint8
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_RecordAuthFailure
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4d1]"></a>TC_Set_Local_Next_Available_Am_Addr</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Set_Local_Next_Available_Am_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Set_Local_Next_Available_Am_Addr &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4e8]"></a>TC_Set_System_Hardware_Configuration</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Set_System_Hardware_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Set_System_Hardware_Configuration &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4d6]"></a>TC_Update_Manufacturing_Information</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Update_Manufacturing_Information))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Update_Manufacturing_Information &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4f4]"></a>TC_Write_Features</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Write_Features))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TC_Write_Features &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSconfig_Enable_Feature
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSconfig_Disable_Feature
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4e6]"></a>TC_Write_Host_Specific_Parameters</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Write_Host_Specific_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Write_Host_Specific_Parameters &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4ce]"></a>TC_Write_Local_Default_Packet_Type</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Write_Local_Default_Packet_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TC_Write_Local_Default_Packet_Type &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_Change_Default_Pkt_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4ca]"></a>TC_Write_Local_Encryption_Key_Length</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Write_Local_Encryption_Key_Length))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TC_Write_Local_Encryption_Key_Length &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4c4]"></a>TC_Write_Local_Extended_Features</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Write_Local_Extended_Features))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TC_Write_Local_Extended_Features &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSconfig_Is_Feature_Supported
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4c3]"></a>TC_Write_Local_Features</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Write_Local_Features))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TC_Write_Local_Features &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSconfig_Is_Feature_Supported
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4b0]"></a>TC_Write_Local_Hardware_Register</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Write_Local_Hardware_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TC_Write_Local_Hardware_Register &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4b4]"></a>TC_Write_Local_Hop_Frequencies</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Write_Local_Hop_Frequencies))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TC_Write_Local_Hop_Frequencies &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Build_Frequency_Table
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Initialise
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSconfig_Set_Hopping_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4bc]"></a>TC_Write_Local_Hopping_Mode</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Write_Local_Hopping_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TC_Write_Local_Hopping_Mode &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Build_Frequency_Table
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Initialise
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSconfig_Set_Hopping_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4c0]"></a>TC_Write_Local_Link_Key_Type</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Write_Local_Link_Key_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TC_Write_Local_Link_Key_Type &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4b9]"></a>TC_Write_Local_Native_Clock</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Write_Local_Native_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TC_Write_Local_Native_Clock &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4d3]"></a>TC_Write_Local_Radio_Power</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Write_Local_Radio_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Write_Local_Radio_Power &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Bd_Addr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4d8]"></a>TC_Write_Local_Radio_Register</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Write_Local_Radio_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Write_Local_Radio_Register &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4d5]"></a>TC_Write_Local_SyncWord</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Write_Local_SyncWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TC_Write_Local_SyncWord &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Bd_Addr
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCIparam_Get_Uint32
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4c6]"></a>TC_Write_Local_Timing_Information</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Write_Local_Timing_Information))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TC_Write_Local_Timing_Information &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4be]"></a>TC_Write_Local_Whitening_Enable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Write_Local_Whitening_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TC_Write_Local_Whitening_Enable &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4e1]"></a>TC_Write_Park_Parameters</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Write_Park_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Write_Park_Parameters &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4df]"></a>TC_Write_R2P_Min_Search_Window</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tc_interface.o(i.TC_Write_R2P_Min_Search_Window))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TC_Write_R2P_Min_Search_Window &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_Write_R2P_Min_Search_Window
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4f3]"></a>TC_Write_Security_Timeouts</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tc_interface.o(i.TC_Write_Security_Timeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TC_Write_Security_Timeouts &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4e5]"></a>TC_Write_VCI_CLK_Override</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Write_VCI_CLK_Override))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Write_VCI_CLK_Override &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[4f1]"></a>TC_Write_eSCO_Retransmission_Mode</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tc_interface.o(i.TC_Write_eSCO_Retransmission_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TC_Write_eSCO_Retransmission_Mode &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[230]"></a>TCeg_Command_Complete_Event</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tc_event_gen.o(i.TCeg_Command_Complete_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint8
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_LMP_Not_Accepted
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_LMP_Accepted
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Security_Timeouts
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Whitening_Enable
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Timing_Information
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_SyncWord
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Link_Key_Type
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Hopping_Mode
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Hop_Frequencies
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Hardware_Register
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Features
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Extended_Features
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Encryption_Key_Length
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Features
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Emergency_Poll_Interval
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Remote_Timing_Information
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Perform_Test_Control
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Increase_Remote_Power
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Increase_Local_Volume
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Decrease_Remote_Power
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Decrease_Local_Volume
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Change_Radio_Modulation
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Activate_Remote_DUT
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TC_Control_Testmode_Standalone
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TC_Control_Testmode_In_Slave
</UL>

<P><STRONG><a name="[4f6]"></a>TCeg_Command_Status_Event</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tc_event_gen.o(i.TCeg_Command_Status_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCeg_Command_Status_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Reset_Local_Pump_Monitors
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Pump_Monitors
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Activate_Remote_DUT
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TC_Control_Testmode_In_Slave
</UL>

<P><STRONG><a name="[e7]"></a>TRAhcit_Dispatch_Pending_Data</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tra_hcit.o(i.TRAhcit_Dispatch_Pending_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = TRAhcit_Dispatch_Pending_Data &rArr; TRAhcit_UART_Transmit &rArr; Device_HCI_Rx &rArr; DeviceHci_Callback &rArr; DeviceL2c_Handler &rArr; DeviceSdp_Handler &rArr; DeviceSdp_Recv_ServiceSearchAttributeReq &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_UART_Transmit
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Get_Next_HC_to_Host_Data_Descriptor
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[e6]"></a>TRAhcit_Dispatch_Pending_Event</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tra_hcit.o(i.TRAhcit_Dispatch_Pending_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = TRAhcit_Dispatch_Pending_Event &rArr; TRAhcit_UART_Transmit &rArr; Device_HCI_Rx &rArr; DeviceHci_Callback &rArr; DeviceL2c_Handler &rArr; DeviceSdp_Handler &rArr; DeviceSdp_Recv_ServiceSearchAttributeReq &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_UART_Transmit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Dequeue_Next
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[50a]"></a>TRAhcit_Generic_Acknowledge_Complete_Tx</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tra_hcit.o(i.TRAhcit_Generic_Acknowledge_Complete_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TRAhcit_Generic_Acknowledge_Complete_Tx &rArr; BTq_Ack_Last_Dequeued &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Is_Queue_Empty
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_UART_Tx_PDU
</UL>

<P><STRONG><a name="[50b]"></a>TRAhcit_Generic_Commit_Rx_Buf</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, tra_hcit.o(i.TRAhcit_Generic_Commit_Rx_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = TRAhcit_Generic_Commit_Rx_Buf &rArr; USLCsleep_Cancel &rArr; SYSpwr_Handle_Early_Wakeup &rArr; USLCchac_Wakeup &rArr; USLCsleep_Wakeup &rArr; USLCsleep_State_Dispatcher &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Cancel
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Is_Sleep_Request_Pending
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Get_Active_Procedure
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Reset_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_UART_Rx_Char
</UL>

<P><STRONG><a name="[50c]"></a>TRAhcit_Generic_Get_Rx_Buf</STRONG> (Thumb, 222 bytes, Stack size 80 bytes, tra_hcit.o(i.TRAhcit_Generic_Get_Rx_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Handle
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_UART_Rx_Char
</UL>

<P><STRONG><a name="[210]"></a>TRAhcit_Initialise</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tra_hcit.o(i.TRAhcit_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TRAhcit_Initialise
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_HCIT_UART_Baud_Rate
</UL>

<P><STRONG><a name="[58]"></a>TRAhcit_Register_UART_Driver</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, driver_uart.o(i.TRAhcit_Register_UART_Driver))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.SYS_Initialise)
</UL>
<P><STRONG><a name="[502]"></a>TRAhcit_Shutdown</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tra_hcit.o(i.TRAhcit_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TRAhcit_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_HCIT_UART_Baud_Rate
</UL>

<P><STRONG><a name="[b4]"></a>TRAhcit_UART_Initialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tra_uart.o(i.TRAhcit_UART_Initialise))
<BR>[Address Reference Count : 1]<UL><LI> tra_hcit.o(.data)
</UL>
<P><STRONG><a name="[253]"></a>TRAhcit_UART_Rx_Char</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, tra_uart.o(i.TRAhcit_UART_Rx_Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Get_Rx_Buf
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Commit_Rx_Buf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_HCI_command
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
</UL>

<P><STRONG><a name="[503]"></a>TRAhcit_UART_Set_Default_Baud_Rate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tra_uart.o(i.TRAhcit_UART_Set_Default_Baud_Rate))
<BR><BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_HCIT_UART_Baud_Rate
</UL>

<P><STRONG><a name="[b5]"></a>TRAhcit_UART_Shutdown</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tra_uart.o(i.TRAhcit_UART_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TRAhcit_UART_Shutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tra_hcit.o(.data)
</UL>
<P><STRONG><a name="[509]"></a>TRAhcit_UART_Transmit</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, tra_uart.o(i.TRAhcit_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = TRAhcit_UART_Transmit &rArr; Device_HCI_Rx &rArr; DeviceHci_Callback &rArr; DeviceL2c_Handler &rArr; DeviceSdp_Handler &rArr; DeviceSdp_Recv_ServiceSearchAttributeReq &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_HCI_Rx
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_UART_Tx_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Dispatch_Pending_Event
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Dispatch_Pending_Data
</UL>

<P><STRONG><a name="[61]"></a>TRAhcit_UART_Tx_PDU</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tra_uart.o(i.TRAhcit_UART_Tx_PDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TRAhcit_UART_Tx_PDU &rArr; TRAhcit_Generic_Acknowledge_Complete_Tx &rArr; BTq_Ack_Last_Dequeued &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Acknowledge_Complete_Tx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tra_uart.o(i.TRAhcit_UART_Tx_PDU)
</UL>
<P><STRONG><a name="[4f8]"></a>Tc_Beken_Debug_UART_Access_Register</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, tc_interface.o(i.Tc_Beken_Debug_UART_Access_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Tc_Beken_Debug_UART_Access_Register &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCIparam_Get_Uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Beken_Hardware_Test
</UL>

<P><STRONG><a name="[4f7]"></a>Tc_Beken_Debug_UART_Send_Link_Ok</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tc_interface.o(i.Tc_Beken_Debug_UART_Send_Link_Ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Tc_Beken_Debug_UART_Send_Link_Ok &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Beken_Hardware_Test
</UL>

<P><STRONG><a name="[49e]"></a>Timer_ISR</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, driver_timer.o(i.Timer_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Timer_ISR &rArr; LSLCslot_Handle_AUX_TIM &rArr; SYSpwr_Handle_Early_Wakeup &rArr; USLCchac_Wakeup &rArr; USLCsleep_Wakeup &rArr; USLCsleep_State_Dispatcher &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CPU_PLL_clk
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Stop
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_AUX_TIM
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ISR1
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ISR0
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_IRQ_Handler (via Veneer)
</UL>

<P><STRONG><a name="[50d]"></a>Timer_ISR0</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, driver_timer.o(i.Timer_ISR0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer_ISR0
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ISR
</UL>

<P><STRONG><a name="[50e]"></a>Timer_ISR1</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, driver_timer.o(i.Timer_ISR1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Timer_ISR1 &rArr; GPIO_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_output
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ISR
</UL>

<P><STRONG><a name="[495]"></a>Timer_Initial</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, driver_timer.o(i.Timer_Initial))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Initialise
</UL>

<P><STRONG><a name="[497]"></a>Timer_Start</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, driver_timer.o(i.Timer_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Timer_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Initialise
</UL>

<P><STRONG><a name="[264]"></a>Timer_Stop</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, driver_timer.o(i.Timer_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ISR
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
</UL>

<P><STRONG><a name="[498]"></a>UART_Initial</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, driver_uart.o(i.UART_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = UART_Initial
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCommandData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Initialise
</UL>

<P><STRONG><a name="[5e]"></a>UART_Interrupt_Handler</STRONG> (Thumb, 92 bytes, Stack size 528 bytes, driver_uart.o(i.UART_Interrupt_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = UART_Interrupt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_FIQ_Handler (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_uart.o(i.TRAhcit_Register_UART_Driver)
</UL>
<P><STRONG><a name="[ec]"></a>USLCchac_Get_Active_Procedure</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uslc_chan_ctrl.o(i.USLCchac_Get_Active_Procedure))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Request_HC_Reset
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Commit_Rx_Buf
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Sleep
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Free_Link
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Tx_Start
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Rx_Start
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM3
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Piconet_Clock_Ex
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Return_From_Sniff
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Unpark_Rollback
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Unpark_Commit
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_Rx_RSSI_Channel
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_Rx_HEC_Event_Channel
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_Rx_CRC_Event_Channel
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_No_Rx_Packet
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Prepare_Next_Slave_Frame_Activity
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TC_Control_Testmode_Standalone
</UL>

<P><STRONG><a name="[10e]"></a>USLCchac_Get_Sleep_Request</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uslc_chan_ctrl.o(i.USLCchac_Get_Sleep_Request))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Tx_Complete_Set_Sleep
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Prepare_Next_Slave_Frame_Activity
</UL>

<P><STRONG><a name="[15b]"></a>USLCchac_Initialise</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, uslc_chan_ctrl.o(i.USLCchac_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USLCchac_Initialise
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Register_Event_Handler
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Initialise
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_Initialise
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Initialise
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Initialise
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Initialise
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Initialise
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_Initialise
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Inquiry_Initialise
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Initialise
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Initialise
</UL>

<P><STRONG><a name="[62]"></a>USLCchac_InqScan_Rand_Wait</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uslc_chan_ctrl.o(i.USLCchac_InqScan_Rand_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USLCchac_InqScan_Rand_Wait &rArr; BTtimer_Set_Slots &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uslc_chan_ctrl.o(i.USLCchac_Initialise)
</UL>
<P><STRONG><a name="[474]"></a>USLCchac_Is_Inquiry_Scan_Rand_Wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uslc_chan_ctrl.o(i.USLCchac_Is_Inquiry_Scan_Rand_Wait))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_No_Rx_Packet
</UL>

<P><STRONG><a name="[14d]"></a>USLCchac_Is_R2P_Request_Pending</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uslc_chan_ctrl.o(i.USLCchac_Is_R2P_Request_Pending))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Prepare_Next_Slave_Frame_Activity
</UL>

<P><STRONG><a name="[304]"></a>USLCchac_Is_Sleep_Possible</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uslc_chan_ctrl.o(i.USLCchac_Is_Sleep_Possible))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USLCchac_Is_Sleep_Possible
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Is_Sleep_Possible
</UL>

<P><STRONG><a name="[21a]"></a>USLCchac_Is_Sleep_Request_Pending</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uslc_chan_ctrl.o(i.USLCchac_Is_Sleep_Request_Pending))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Request_HC_Reset
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Commit_Rx_Buf
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Return_From_Sniff
</UL>

<P><STRONG><a name="[518]"></a>USLCchac_Procedure_Request</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, uslc_chan_ctrl.o(i.USLCchac_Procedure_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Finish
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Cancel
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Inquiry_Request
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Inquiry
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Cancel
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_Cancel
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_Cancel
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Request
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_Request
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Unpark_Request
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Park_Request
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Access_Window_Request
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Unpark_Request
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Access_Window_Request
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Request
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Request
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_Request
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Request
</UL>

<P><STRONG><a name="[519]"></a>USLCchac_Procedure_Start</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, uslc_chan_ctrl.o(i.USLCchac_Procedure_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USLCchac_Procedure_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Park
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Park
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Page
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Inquiry
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Inquiry_Scan
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_OS_START_
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpageScan_OS_START
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinqScan_OS_START
</UL>

<P><STRONG><a name="[159]"></a>USLCchac_Process_Rx</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, uslc_chan_ctrl.o(i.USLCchac_Process_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = USLCchac_Process_Rx &rArr; USLCmss_State_Dispatcher &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_Dispatcher
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Park
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Park
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Page
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Inquiry
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Inquiry_Scan
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Disable_Receiver
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Process_Rx
</UL>

<P><STRONG><a name="[52a]"></a>USLCchac_Set_Active_Procedure</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uslc_chan_ctrl.o(i.USLCchac_Set_Active_Procedure))
<BR><BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
</UL>

<P><STRONG><a name="[2ea]"></a>USLCchac_Set_Device_State</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uslc_chan_ctrl.o(i.USLCchac_Set_Device_State))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Free_Link
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinq_Extract_FHS
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_Dispatcher
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Park
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Park
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Page
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Inquiry
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Inquiry_Scan
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Force_Context
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpageScan_Process_ID_Pkt_During_Scanning
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpageScan_OS_START
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpage_Resume_Paging
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinqScan_OS_START
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TC_Control_Testmode_Standalone
</UL>

<P><STRONG><a name="[2ec]"></a>USLCchac_Set_Saved_Device_State</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uslc_chan_ctrl.o(i.USLCchac_Set_Saved_Device_State))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Free_Link
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TC_Control_Testmode_Standalone
</UL>

<P><STRONG><a name="[110]"></a>USLCchac_Set_Sleep_Request</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uslc_chan_ctrl.o(i.USLCchac_Set_Sleep_Request))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Tx_Complete_Set_Sleep
</UL>

<P><STRONG><a name="[4a5]"></a>USLCchac_Wakeup</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, uslc_chan_ctrl.o(i.USLCchac_Wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = USLCchac_Wakeup &rArr; USLCsleep_Wakeup &rArr; USLCsleep_State_Dispatcher &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Handle_Early_Wakeup
</UL>

<P><STRONG><a name="[154]"></a>USLCchac_check_slave_activity_start_next_frame</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, uslc_chan_ctrl.o(i.USLCchac_check_slave_activity_start_next_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USLCchac_check_slave_activity_start_next_frame &rArr; BTtimer_Is_Expired &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Prepare_Next_Master_Frame_Activity
</UL>

<P><STRONG><a name="[115]"></a>USLCchac_get_device_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uslc_chan_ctrl.o(i.USLCchac_get_device_state))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Page_Scan_Start
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Inquiry_Scan_Start
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Process_Rx
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Prepare_Tx
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Early_Prepare_Frequency_FHS_Response_ID
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM2
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM0
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKD
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Disable_Transmitter
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Force_Context
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Standby_Low_Power_Timeout
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Prepare_Next_Master_Frame_Activity
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Prepare_Next_Slave_Frame_Activity
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Get_Emergency_Poll_Activity
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Update_Master_AFH_Piconet
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Prepare_Frequency_Connection
</UL>

<P><STRONG><a name="[14a]"></a>USLCchac_is_next_activity_scan_activation</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uslc_chan_ctrl.o(i.USLCchac_is_next_activity_scan_activation))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Prepare_Next_Slave_Frame_Activity
</UL>

<P><STRONG><a name="[14f]"></a>USLCchac_prepareRx</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, uslc_chan_ctrl.o(i.USLCchac_prepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = USLCchac_prepareRx &rArr; USLCmss_State_Dispatcher &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_Master_Slave_Switch
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_ID
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_FHS
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_Connection
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Disable_Receiver
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Tx_Start
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Tx_Complete
</UL>

<P><STRONG><a name="[153]"></a>USLCchac_prepare_next_master_frame_activity</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, uslc_chan_ctrl.o(i.USLCchac_prepare_next_master_frame_activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = USLCchac_prepare_next_master_frame_activity &rArr; USLCmss_State_Dispatcher &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Get_Current_Frame_Activity
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Park
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Page
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Inquiry
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Prepare_Next_Master_Frame_Activity
</UL>

<P><STRONG><a name="[14b]"></a>USLCchac_prepare_next_slave_frame_activity</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, uslc_chan_ctrl.o(i.USLCchac_prepare_next_slave_frame_activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = USLCchac_prepare_next_slave_frame_activity &rArr; USLCmss_State_Dispatcher &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_Dispatcher
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Park
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Inquiry_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Tx_Complete
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Prepare_Next_Slave_Frame_Activity
</UL>

<P><STRONG><a name="[102]"></a>USLCinqScan_Cancel</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, uslc_inquiryscan.o(i.USLCinqScan_Cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USLCinqScan_Cancel &rArr; USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Disable_Receiver
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Request
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Restore_Piconet
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Set_HSE_Engine
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Get_HSE_Engine
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Inquiry_Scan_Cancel
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Inquiry_Scan
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Finish
</UL>

<P><STRONG><a name="[50f]"></a>USLCinqScan_Initialise</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uslc_inquiryscan.o(i.USLCinqScan_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Initialise
</UL>

<P><STRONG><a name="[51b]"></a>USLCinqScan_Inquiry_Scan</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, uslc_inquiryscan.o(i.USLCinqScan_Inquiry_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = USLCinqScan_Inquiry_Scan &rArr; _USLCinqScan_Generate_FHS &rArr; LSLCpkt_Generate_FHS &rArr; LSLCpkt_Generate_FHS_Common_ &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_GetRadioMode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetRadioMode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Ticks
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Set_Train
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Cancel
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_ID
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Set_Device_State
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Start
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Restore_Piconet
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_EIR
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinqScan_OS_START
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinqScan_Generate_FHS
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepare_next_slave_frame_activity
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Process_Rx
</UL>

<P><STRONG><a name="[302]"></a>USLCinqScan_Request</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, uslc_inquiryscan.o(i.USLCinqScan_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USLCinqScan_Request &rArr; USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTaddr_Build_Sync_Word
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Inquiry_Scan_Request
</UL>

<P><STRONG><a name="[2cd]"></a>USLCinq_Get_Stored_Extended_Inquiry_Response</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uslc_inquiry.o(i.USLCinq_Get_Stored_Extended_Inquiry_Response))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Inquiry_Result_Event
</UL>

<P><STRONG><a name="[51a]"></a>USLCinq_Inquiry</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, uslc_inquiry.o(i.USLCinq_Inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = USLCinq_Inquiry &rArr; _USLCinq_Generate_ID &rArr; LSLCpkt_Generate_ID &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetRadioMode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Set_Train
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Extract_EIR_Payload
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Disable_Transmitter
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinq_Generate_ID
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinq_Extract_FHS
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Set_Device_State
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Start
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepare_next_master_frame_activity
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Process_Rx
</UL>

<P><STRONG><a name="[2fd]"></a>USLCinq_Inquiry_Cancel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uslc_inquiry.o(i.USLCinq_Inquiry_Cancel))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Inquiry_Cancel
</UL>

<P><STRONG><a name="[511]"></a>USLCinq_Inquiry_Initialise</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uslc_inquiry.o(i.USLCinq_Inquiry_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Initialise
</UL>

<P><STRONG><a name="[2ff]"></a>USLCinq_Inquiry_Request</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, uslc_inquiry.o(i.USLCinq_Inquiry_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USLCinq_Inquiry_Request &rArr; LSLChop_Build_Frequency_Table &rArr; _LSLChop_Execute_HSE_Non_Connection
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTaddr_Build_Sync_Word
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Build_Frequency_Table
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Inquiry_Request
</UL>

<P><STRONG><a name="[121]"></a>USLCinq_Is_Extended_Inquiry_Response_Frame</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uslc_inquiry.o(i.USLCinq_Is_Extended_Inquiry_Response_Frame))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKD_RX_HDR
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Extract_ACL_Payload
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Process_Rx_CRC
</UL>

<P><STRONG><a name="[529]"></a>USLCmss_Cancel</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uslc_master_slave_switch.o(i.USLCmss_Cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USLCmss_Cancel &rArr; USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
</UL>

<P><STRONG><a name="[514]"></a>USLCmss_Initialise</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uslc_master_slave_switch.o(i.USLCmss_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Initialise
</UL>

<P><STRONG><a name="[314]"></a>USLCmss_Request</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, uslc_master_slave_switch.o(i.USLCmss_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USLCmss_Request &rArr; USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Role_Switch
</UL>

<P><STRONG><a name="[521]"></a>USLCmss_State_Dispatcher</STRONG> (Thumb, 1518 bytes, Stack size 56 bytes, uslc_master_slave_switch.o(i.USLCmss_State_Dispatcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = USLCmss_State_Dispatcher &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Device_FHS_Ref
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Wait_For_us
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Enable_Transmitter
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ID
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Extract_FHS_Payload
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_Master_Slave_Switch
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_ID
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_Connection
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Set_Device_State
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Set_Active_Procedure
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Finish
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_POLL
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Free_Am_Addr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_NULL
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_FHS_Ex
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Assign_Frequency_Kernel
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCclk_Wait_For
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCclk_Is_Safe_To_Read_Native_Clk
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_Restore_AFH_Link_State
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_Backup_AFH_Link_State
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Reset_New_Connection
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Free_Piconet_Index
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_Cancel
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_slave
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_Update_Ctrl_State_
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Set_HSE_Engine
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Alloc_Am_Addr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepare_next_slave_frame_activity
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepare_next_master_frame_activity
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepareRx
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Process_Rx
</UL>

<P><STRONG><a name="[308]"></a>USLCpageScan_Cancel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uslc_pagescan.o(i.USLCpageScan_Cancel))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Page_Scan_Cancel
</UL>

<P><STRONG><a name="[510]"></a>USLCpageScan_Initialise</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uslc_pagescan.o(i.USLCpageScan_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Initialise
</UL>

<P><STRONG><a name="[51e]"></a>USLCpageScan_Page_Scan</STRONG> (Thumb, 786 bytes, Stack size 32 bytes, uslc_pagescan.o(i.USLCpageScan_Page_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = USLCpageScan_Page_Scan &rArr; LSLCfreq_Assign_Frequency_Kernel &rArr; LSLCafh_Assign_AFH_Kernel &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_GetRadioMode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetRadioMode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Ticks
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Enable_Transmitter
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ID
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Set_Train
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Extract_FHS_Payload
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_ID
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Disable_Receiver
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Set_Device_State
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Request
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Finish
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Restore_Piconet
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpageScan_Process_ID_Pkt_During_Scanning
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpageScan_OS_START
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_NULL
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Assign_Frequency_Kernel
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCclk_Wait_For
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCclk_Is_Safe_To_Read_Native_Clk
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Set_HSE_Engine
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Get_HSE_Engine
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepare_next_slave_frame_activity
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Process_Rx
</UL>

<P><STRONG><a name="[30a]"></a>USLCpageScan_Request</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, uslc_pagescan.o(i.USLCpageScan_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = USLCpageScan_Request &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Request
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Assign_Piconet_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Page_Scan_Request
</UL>

<P><STRONG><a name="[306]"></a>USLCpage_Cancel</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uslc_page.o(i.USLCpage_Cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USLCpage_Cancel
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Device_FHS_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Page_Cancel
</UL>

<P><STRONG><a name="[512]"></a>USLCpage_Initialise</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uslc_page.o(i.USLCpage_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Initialise
</UL>

<P><STRONG><a name="[51d]"></a>USLCpage_Page</STRONG> (Thumb, 656 bytes, Stack size 40 bytes, uslc_page.o(i.USLCpage_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = USLCpage_Page &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetRadioMode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Device_FHS_Ref
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Set_Train
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Disable_Transmitter
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Set_Device_State
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Finish
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_POLL
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Freeze_X_for_Page
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpage_Setup_DL_to_CAC
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpage_Resume_Paging
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpage_Generate_ID
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_bd_addr
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_FHS
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepare_next_master_frame_activity
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Process_Rx
</UL>

<P><STRONG><a name="[2e6]"></a>USLCpage_Request</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, uslc_page.o(i.USLCpage_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = USLCpage_Request &rArr; LSLCfreq_Assign_Frequency_Kernel &rArr; LSLCafh_Assign_AFH_Kernel &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Build_Frequency_Table
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Request
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Assign_Frequency_Kernel
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Create_Connection
</UL>

<P><STRONG><a name="[2e0]"></a>USLCparkMaster_Access_Window_Request</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uslc_park_master.o(i.USLCparkMaster_Access_Window_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USLCparkMaster_Access_Window_Request &rArr; USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Access_Window_Request
</UL>

<P><STRONG><a name="[517]"></a>USLCparkMaster_Initialise</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uslc_park_master.o(i.USLCparkMaster_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Initialise
</UL>

<P><STRONG><a name="[520]"></a>USLCparkMaster_Park</STRONG> (Thumb, 510 bytes, Stack size 32 bytes, uslc_park_master.o(i.USLCparkMaster_Park))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = USLCparkMaster_Park &rArr; LSLCpkt_Generate_ACL &rArr; LSLCpkt_Generate_POLL &rArr; _LSLCpkt_Prepare_Piconet_Channel_Access &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetRadioMode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Disable_Transmitter
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Set_Device_State
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Finish
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_POLL
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ACL
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Unpark_Rollback
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Unpark_Commit
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Park
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_NULL
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepare_next_master_frame_activity
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Process_Rx
</UL>

<P><STRONG><a name="[30c]"></a>USLCparkMaster_Park_Request</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uslc_park_master.o(i.USLCparkMaster_Park_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USLCparkMaster_Park_Request &rArr; DL_Park
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Park
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Park_Request
</UL>

<P><STRONG><a name="[12b]"></a>USLCparkMaster_Second_Half_Slot</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uslc_park_master.o(i.USLCparkMaster_Second_Half_Slot))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM3
</UL>

<P><STRONG><a name="[31d]"></a>USLCparkMaster_Unpark_Commit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uslc_park_master.o(i.USLCparkMaster_Unpark_Commit))
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Unpark_Commit
</UL>

<P><STRONG><a name="[31f]"></a>USLCparkMaster_Unpark_Request</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, uslc_park_master.o(i.USLCparkMaster_Unpark_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = USLCparkMaster_Unpark_Request &rArr; DL_Unpark &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Request
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Unpark
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Unpark_Request
</UL>

<P><STRONG><a name="[323]"></a>USLCparkMaster_Unpark_Rollback</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uslc_park_master.o(i.USLCparkMaster_Unpark_Rollback))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Unpark_Rollback
</UL>

<P><STRONG><a name="[2df]"></a>USLCparkSlave_Access_Window_Request</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, uslc_park_slave.o(i.USLCparkSlave_Access_Window_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USLCparkSlave_Access_Window_Request &rArr; USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Request
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Access_Window_Request
</UL>

<P><STRONG><a name="[516]"></a>USLCparkSlave_Initialise</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uslc_park_slave.o(i.USLCparkSlave_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Initialise
</UL>

<P><STRONG><a name="[51f]"></a>USLCparkSlave_Park</STRONG> (Thumb, 430 bytes, Stack size 24 bytes, uslc_park_slave.o(i.USLCparkSlave_Park))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = USLCparkSlave_Park &rArr; DL_Unpark &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ID
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Set_Device_State
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Finish
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Piconet_if_Expired
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Piconet_Set_Slots
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Check_If_End_Of_Access_Window
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Unpark_Rollback
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Unpark_Commit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Unpark
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Park
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_NULL
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepare_next_slave_frame_activity
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Process_Rx
</UL>

<P><STRONG><a name="[30d]"></a>USLCparkSlave_Park_Request</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, uslc_park_slave.o(i.USLCparkSlave_Park_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USLCparkSlave_Park_Request &rArr; USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Request
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Park_Request
</UL>

<P><STRONG><a name="[31c]"></a>USLCparkSlave_Unpark_Commit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uslc_park_slave.o(i.USLCparkSlave_Unpark_Commit))
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Unpark_Commit
</UL>

<P><STRONG><a name="[320]"></a>USLCparkSlave_Unpark_Request</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, uslc_park_slave.o(i.USLCparkSlave_Unpark_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USLCparkSlave_Unpark_Request &rArr; USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Request
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Piconet_Set_Slots
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Unpark_Request
</UL>

<P><STRONG><a name="[322]"></a>USLCparkSlave_Unpark_Rollback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uslc_park_slave.o(i.USLCparkSlave_Unpark_Rollback))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Unpark_Rollback
</UL>

<P><STRONG><a name="[53b]"></a>USLCr2p_Cancel</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uslc_return_to_piconet.o(i.USLCr2p_Cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USLCr2p_Cancel &rArr; USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Disable_Receiver
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_Dispatcher
</UL>

<P><STRONG><a name="[147]"></a>USLCr2p_Get_Search_Window_Frames</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, uslc_return_to_piconet.o(i.USLCr2p_Get_Search_Window_Frames))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = USLCr2p_Get_Search_Window_Frames &rArr; LC_Get_Piconet_Clock_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_LowFrequencyOscillatorAvailable
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Piconet_Clock_Ex
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Wakeup
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Park_Activity
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Slave_Sniff_Activity
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_OS_START_
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_OS_RECONNECTING_
</UL>

<P><STRONG><a name="[513]"></a>USLCr2p_Initialise</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uslc_return_to_piconet.o(i.USLCr2p_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Initialise
</UL>

<P><STRONG><a name="[4ff]"></a>USLCr2p_Read_R2P_Min_Search_Window</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uslc_return_to_piconet.o(i.USLCr2p_Read_R2P_Min_Search_Window))
<BR><BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_R2P_Min_Search_Window
</UL>

<P><STRONG><a name="[325]"></a>USLCr2p_Request</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, uslc_return_to_piconet.o(i.USLCr2p_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = USLCr2p_Request &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Request
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Wakeup
</UL>

<P><STRONG><a name="[51c]"></a>USLCr2p_State_Dispatcher</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, uslc_return_to_piconet.o(i.USLCr2p_State_Dispatcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USLCr2p_State_Dispatcher &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Set_Device_State
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Finish
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_Cancel
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Set_HSE_Engine
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepare_next_slave_frame_activity
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Process_Rx
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Slave_Sniff_Activity
</UL>

<P><STRONG><a name="[508]"></a>USLCr2p_Write_R2P_Min_Search_Window</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uslc_return_to_piconet.o(i.USLCr2p_Write_R2P_Min_Search_Window))
<BR><BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_R2P_Min_Search_Window
</UL>

<P><STRONG><a name="[2ee]"></a>USLCsched_Local_Piconet_Request</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uslc_scheduler.o(i.USLCsched_Local_Piconet_Request))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Free_Link
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Restore_Piconet
</UL>

<P><STRONG><a name="[21b]"></a>USLCsleep_Cancel</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, uslc_sleep.o(i.USLCsleep_Cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = USLCsleep_Cancel &rArr; SYSpwr_Handle_Early_Wakeup &rArr; USLCchac_Wakeup &rArr; USLCsleep_Wakeup &rArr; USLCsleep_State_Dispatcher &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_Aux_Tim_Intr
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Setup_Sleep_Timer
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Is_Low_Power_Mode_Active
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Handle_Early_Wakeup
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Get_Min_Frames_To_Sleep
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Exit_Halt_System
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Request
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Request_HC_Reset
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Commit_Rx_Buf
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Return_From_Sniff
</UL>

<P><STRONG><a name="[515]"></a>USLCsleep_Initialise</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uslc_sleep.o(i.USLCsleep_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Initialise
</UL>

<P><STRONG><a name="[ef]"></a>USLCsleep_Is_Tabasco_Asleep</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uslc_sleep.o(i.USLCsleep_Is_Tabasco_Asleep))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[31a]"></a>USLCsleep_Request</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, uslc_sleep.o(i.USLCsleep_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = USLCsleep_Request &rArr; USLCsleep_State_Dispatcher &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Get_Min_Frames_To_Sleep
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Request
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Sleep
</UL>

<P><STRONG><a name="[540]"></a>USLCsleep_Restore_BT_Clock</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uslc_sleep.o(i.USLCsleep_Restore_BT_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USLCsleep_Restore_BT_Clock &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Write_BT_Clk_Avoid_Race
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCclk_Wait_For
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCclk_Is_Safe_To_Read_Native_Clk
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
</UL>

<P><STRONG><a name="[10f]"></a>USLCsleep_State_Dispatcher</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, uslc_sleep.o(i.USLCsleep_State_Dispatcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = USLCsleep_State_Dispatcher &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Get_Radio_Driver_Status
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Exit_Low_Power_Mode_Request
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Enter_Low_Power_Mode_Request
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_use_lf
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetRadioMode
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Setup_Sleep_Timer
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_LowFrequencyOscillatorAvailable
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Get_Min_Frames_To_Sleep
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_And_Clear_Tabasco_Intr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_get_device_state
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Enable_Aux_Tim_Intr
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_R2P_Turn_On_Intr
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Finish
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Enable_Low_Power_Mode
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Disable_Low_Power_Mode
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Restore_BT_Clock
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_sleep_status
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via BLX)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Tx_Complete_Set_Sleep
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Wakeup
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepare_next_slave_frame_activity
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepare_next_master_frame_activity
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Process_Rx
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Request
</UL>

<P><STRONG><a name="[522]"></a>USLCsleep_Wakeup</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uslc_sleep.o(i.USLCsleep_Wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = USLCsleep_Wakeup &rArr; USLCsleep_State_Dispatcher &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Wakeup
</UL>

<P><STRONG><a name="[23a]"></a>USLCtm_Build_Test_Packet_Payload</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, uslc_testmode.o(i.USLCtm_Build_Test_Packet_Payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USLCtm_Build_Test_Packet_Payload
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Testmode_Request
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_LMP_Send_Test_Control
</UL>

<P><STRONG><a name="[15c]"></a>USLCtm_Initialise</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uslc_testmode.o(i.USLCtm_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Initialise
</UL>

<P><STRONG><a name="[549]"></a>USLCtm_Is_Packet_Type_Supported</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uslc_testmode.o(i.USLCtm_Is_Packet_Type_Supported))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Store_Test_Parameters
</UL>

<P><STRONG><a name="[236]"></a>USLCtm_Reinitialise</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uslc_testmode.o(i.USLCtm_Reinitialise))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Testmode_Request
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Testmode_Exit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_LMP_Send_Test_Control
</UL>

<P><STRONG><a name="[548]"></a>USLCtm_Store_Test_Parameters</STRONG> (Thumb, 258 bytes, Stack size 12 bytes, uslc_testmode.o(i.USLCtm_Store_Test_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USLCtm_Store_Test_Parameters
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Is_Packet_Type_Supported
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Testmode_Request
</UL>

<P><STRONG><a name="[22c]"></a>USLCtm_Test_Transmitter</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, uslc_testmode.o(i.USLCtm_Test_Transmitter))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = USLCtm_Test_Transmitter &rArr; LSLCpkt_Generate_ACL &rArr; LSLCpkt_Generate_POLL &rArr; _LSLCpkt_Prepare_Piconet_Channel_Access &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Set_PTT_ACL
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Use_Local_Tx_Descriptor
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ACL
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Get_Next_Master_Tx_Activity
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_prepareTx
</UL>

<P><STRONG><a name="[1e]"></a>USLCtm_Testmode_Change_Settings</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, uslc_testmode.o(i.USLCtm_Testmode_Change_Settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USLCtm_Testmode_Change_Settings &rArr; USLCtm_Testmode_Exit &rArr; LSLChop_Initialise
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Testmode_Exit
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Initialise
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Set_PTT_ACL
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TC_Control_Testmode_Standalone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
</UL>
<P><STRONG><a name="[228]"></a>USLCtm_Testmode_Exit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uslc_testmode.o(i.USLCtm_Testmode_Exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USLCtm_Testmode_Exit &rArr; LSLChop_Initialise
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Reinitialise
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Initialise
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Get_Next_Master_Tx_Activity
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Disconnect_Inf
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Detach_Ack
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Detach
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Detach_Timeout
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Testmode_Change_Settings
</UL>

<P><STRONG><a name="[239]"></a>USLCtm_Testmode_Request</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, uslc_testmode.o(i.USLCtm_Testmode_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USLCtm_Testmode_Request &rArr; USLCtm_Store_Test_Parameters
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Get_L2CAP_Out_Heap_Ref
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Reinitialise
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Build_Test_Packet_Payload
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Set_PTT_ACL
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Store_Test_Parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_LMP_Send_Test_Control
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LMP_Test_Control
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TC_Control_Testmode_Standalone
</UL>

<P><STRONG><a name="[157]"></a>USLCtm_prepareTx</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, uslc_testmode.o(i.USLCtm_prepareTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = USLCtm_prepareTx &rArr; USLCtm_Test_Transmitter &rArr; LSLCpkt_Generate_ACL &rArr; LSLCpkt_Generate_POLL &rArr; _LSLCpkt_Prepare_Piconet_Channel_Access &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Test_Transmitter
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_NULL
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Prepare_Tx
</UL>

<P><STRONG><a name="[25a]"></a>Write_Extended_Inquiry_Response_Command</STRONG> (Thumb, 116 bytes, Stack size 80 bytes, devicebtj_stack_hci_cmd.o(i.Write_Extended_Inquiry_Response_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
</UL>

<P><STRONG><a name="[271]"></a>Write_Link_Policy_Settings</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, devicebtj_stack_hci_cmd.o(i.Write_Link_Policy_Settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = Write_Link_Policy_Settings &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events
</UL>

<P><STRONG><a name="[100]"></a>_BTq_Deallocate_Header</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tra_queue.o(i._BTq_Deallocate_Header))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reset
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enhanced_Flush
</UL>

<P><STRONG><a name="[f6]"></a>_BTq_Get_Data_Queue_Ref</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tra_queue.o(i._BTq_Get_Data_Queue_Ref))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Is_Queue_Not_Full
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Dequeue_Next
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Initialise_Data_Queue_Type
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Get_Total_Number_Of_Processed_Chunks
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enhanced_Flush
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>

<P><STRONG><a name="[53a]"></a>_Check_If_End_Of_Access_Window</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, uslc_park_slave.o(i._Check_If_End_Of_Access_Window))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _Check_If_End_Of_Access_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Piconet_if_Expired
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Piconet_Set_Slots
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Piconet_Reset_Slots
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Park
</UL>

<P><STRONG><a name="[2db]"></a>_HWhab_Init_RF</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hw_radio.o(i._HWhab_Init_RF))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Initialise
</UL>

<P><STRONG><a name="[2dc]"></a>_HWradio_Go_To_Idle_State</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hw_radio.o(i._HWradio_Go_To_Idle_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _HWradio_Go_To_Idle_State &rArr; HWdelay_Initialise &rArr; HWdelay_Calibrate_
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Initialise
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Init_Tx_Power_Level
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Initialise
</UL>

<P><STRONG><a name="[2c3]"></a>_Insert_Uint16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hc_event_gen.o(i._Insert_Uint16))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prepare_Command_Complete_Event_Read_Clock_Payload
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Inquiry_Result_Event
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Status_Event
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_eSCO_Retransmission_Mode
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_VCI_CLK_Override
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_R2P_Min_Search_Window
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Park_Parameters
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Radio_Register
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Radio_Power
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Native_Clock
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Default_Packet_Type
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Host_Specific_Parameters
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Update_Manufacturing_Information
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_System_Hardware_Configuration
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Local_Next_Available_Am_Addr
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Local_Failed_Attempts_Counter
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Local_Bd_Addr
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_HCIT_UART_Baud_Rate
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Enable_SCO_Via_HCI
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Enable_Low_Power_Mode
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Disable_SCO_Via_HCI
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Disable_Low_Power_Mode
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Broadcast_Scan_Window
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Send_Encryption_Key_Size_Mask_Req
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_eSCO_Retransmission_Mode
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Unused_Stack_Space
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Raw_RSSI_PER_BER
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Raw_RSSI
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Radio_Modulation
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_R2P_Min_Search_Window
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_PER
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Whitening_Enable
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Timing_Information
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Relative_Host_Controller_Mips
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Radio_Register
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Radio_Power
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Native_Clock
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Link_Key_Type
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Hopping_Mode
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Hop_Frequencies
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Hardware_Version
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Hardware_Area
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Extended_Features
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Encryption_Key_Length
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Default_Packet_Type
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_BER
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Local_Area_Download
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Force_System_Halt
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Clear_Local_Failed_Attempts_Counter
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tc_Beken_Debug_UART_Send_Link_Ok
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tc_Beken_Debug_UART_Access_Register
</UL>

<P><STRONG><a name="[2c6]"></a>_Insert_Uint24</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc_event_gen.o(i._Insert_Uint24))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Inquiry_Result_Event
</UL>

<P><STRONG><a name="[2ca]"></a>_Insert_Uint32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc_event_gen.o(i._Insert_Uint32))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prepare_Command_Complete_Event_Read_Clock_Payload
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Unused_Stack_Space
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Raw_RSSI_PER_BER
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_PER
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Relative_Host_Controller_Mips
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Native_Clock
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Hardware_Area
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_BER
</UL>

<P><STRONG><a name="[4fa]"></a>_Insert_Uint8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hc_event_gen.o(i._Insert_Uint8))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Local_Failed_Attempts_Counter
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Raw_RSSI_PER_BER
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Radio_Modulation
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Whitening_Enable
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Timing_Information
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Link_Key_Type
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Hopping_Mode
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Hop_Frequencies
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Hardware_Version
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Extended_Features
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Encryption_Key_Length
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Clear_Local_Failed_Attempts_Counter
</UL>

<P><STRONG><a name="[368]"></a>_LMafh_Get_AFH_Instant</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lmp_afh.o(i._LMafh_Get_AFH_Instant))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _LMafh_Get_AFH_Instant
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Update_Master_AFH_Piconet
</UL>

<P><STRONG><a name="[142]"></a>_LMpol_Adjust_Sniff_Attempt_for_Multislot_Packet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lmp_link_policy.o(i._LMpol_Adjust_Sniff_Attempt_for_Multislot_Packet))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Device_Activity
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Tx_Activity
</UL>

<P><STRONG><a name="[3f6]"></a>_LMpol_Execute_Unpark_Request</STRONG> (Thumb, 300 bytes, Stack size 104 bytes, lmp_link_policy_protocol.o(i._LMpol_Execute_Unpark_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _LMpol_Execute_Unpark_Request &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Alloc_AM_ADDR
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Mode_Change_Event
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Remove_UnPark_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Service_Park_Links
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Slave_Init_Unpark_Handler
</UL>

<P><STRONG><a name="[43d]"></a>_LMssp_Determine_Auth_Type</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, lmp_ssp.o(i._LMssp_Determine_Auth_Type))
<BR><BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_IO_Capability_Request_Reply
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Encapsulated_Payload
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMspp_LMP_IO_Capability_Response
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMspp_LMP_IO_Capability_Request
</UL>

<P><STRONG><a name="[44e]"></a>_LMssp_Init_DHKey_Calculation</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lmp_ssp.o(i._LMssp_Init_DHKey_Calculation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1636<LI>Call Chain = _LMssp_Init_DHKey_Calculation &rArr; LMecc_Generate_ECC_Key &rArr; ECC_Point_Multiplication &rArr; ECC_Point_Multiplication_uint8 &rArr; LMecc_CB_ECC_Point_Multiplication_Complete &rArr; LMssp_CallBack_DH_Key_Complete &rArr; _LMssp_Send_LMP_DH_Key_Check &rArr; LMssp_Calculate_DHKEY_Check &rArr; F3 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMecc_Generate_ECC_Key
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Encapsulated_Payload
</UL>

<P><STRONG><a name="[453]"></a>_LMssp_Send_LMP_OOB_Failed</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lmp_ssp.o(i._LMssp_Send_LMP_OOB_Failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _LMssp_Send_LMP_OOB_Failed &rArr; LM_Encode_LMP_PDU_Fully_Encoded &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU_Fully_Encoded
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_Remote_OOB_Data_Request_Negative_Reply
</UL>

<P><STRONG><a name="[193]"></a>_LSLChop_Get_X_Page_Inquiry</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lslc_hop.o(i._LSLChop_Get_X_Page_Inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _LSLChop_Get_X_Page_Inquiry
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Freeze_X_for_Page
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Set_X_for_Inquiry
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Get_Next_Frequency
</UL>

<P><STRONG><a name="[123]"></a>_LSLCslot_Handle_Rx_Interrupt_Error</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lslc_slot.o(i._LSLCslot_Handle_Rx_Interrupt_Error))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKD_RX_HDR
</UL>

<P><STRONG><a name="[393]"></a>_Send_HC_Role_Change_Event</STRONG> (Thumb, 36 bytes, Stack size 64 bytes, lmp_ch.o(i._Send_HC_Role_Change_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _Send_HC_Role_Change_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Not_Accepted
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Event
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Not_Accepted
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Success
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Failure
</UL>

<P><STRONG><a name="[500]"></a>_Send_LMP_Set_Broadcast_Scan_Window</STRONG> (Thumb, 34 bytes, Stack size 64 bytes, lmp_link_policy_protocol.o(i._Send_LMP_Set_Broadcast_Scan_Window))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _Send_LMP_Set_Broadcast_Scan_Window &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Broadcast_Scan_Window
</UL>

<P><STRONG><a name="[427]"></a>_Stop_Encryption</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lmp_sec_peer.o(i._Stop_Encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = _Stop_Encryption &rArr; LMsec_core_PeerData_Tx_Stop_Callback &rArr; LMsec_peer_Send_LMP_Message &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_PeerData_Tx_Stop_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Encryption_Mode_Req
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Accepted
</UL>

<P><STRONG><a name="[4fb]"></a>_TC_Control_Testmode_In_Slave</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tc_interface.o(i._TC_Control_Testmode_In_Slave))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _TC_Control_Testmode_In_Slave &rArr; BTtmt_LMP_Send_Test_Control &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_LMP_Send_Test_Control
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Status_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Perform_Test_Control
</UL>

<P><STRONG><a name="[4fc]"></a>_TC_Control_Testmode_Standalone</STRONG> (Thumb, 284 bytes, Stack size 88 bytes, tc_interface.o(i._TC_Control_Testmode_Standalone))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = _TC_Control_Testmode_Standalone &rArr; LMaclctr_Alloc_Link &rArr; LC_Alloc_Link &rArr; DL_Alloc_Link &rArr; DL_Initialise_Link &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Alloc_Link
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Get_Active_Procedure
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTaddr_Build_Sync_Word
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Bd_Addr
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Set_Saved_Device_State
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Set_Device_State
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Testmode_Request
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Wakeup
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Testmode_Change_Settings
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Assign_Frequency_Kernel
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Perform_Test_Control
</UL>

<P><STRONG><a name="[526]"></a>_USLCinqScan_Generate_FHS</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uslc_inquiryscan.o(i._USLCinqScan_Generate_FHS))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _USLCinqScan_Generate_FHS &rArr; LSLCpkt_Generate_FHS &rArr; LSLCpkt_Generate_FHS_Common_ &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetRadioMode
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_FHS
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Increment_N_Inquiry_Scan
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Local_EIR_Length
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Inquiry_Scan
</UL>

<P><STRONG><a name="[524]"></a>_USLCinqScan_OS_START</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, uslc_inquiryscan.o(i._USLCinqScan_OS_START))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _USLCinqScan_OS_START &rArr; LSLCpkt_Prepare_Receiver_ID &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetRadioMode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Ticks
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Set_Train
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_ID
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Set_Device_State
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Inquiry_Scan
</UL>

<P><STRONG><a name="[528]"></a>_USLCinq_Extract_FHS</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, uslc_inquiry.o(i._USLCinq_Extract_FHS))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _USLCinq_Extract_FHS &rArr; BTtimer_Get_Native_Clock &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Extract_FHS_Payload
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Disable_Transmitter
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Get_Inquiry_Result_Mode
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Get_Native_Clock
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Set_Device_State
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Inquiry
</UL>

<P><STRONG><a name="[527]"></a>_USLCinq_Generate_ID</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, uslc_inquiry.o(i._USLCinq_Generate_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _USLCinq_Generate_ID &rArr; LSLCpkt_Generate_ID &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetRadioMode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ID
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Toggle_Train
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Inquiry
</UL>

<P><STRONG><a name="[531]"></a>_USLCpageScan_OS_START</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, uslc_pagescan.o(i._USLCpageScan_OS_START))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _USLCpageScan_OS_START &rArr; LSLCpkt_Prepare_Receiver_ID &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetRadioMode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Ticks
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Set_Train
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_ID
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Set_Device_State
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
</UL>

<P><STRONG><a name="[532]"></a>_USLCpageScan_Process_ID_Pkt_During_Scanning</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uslc_pagescan.o(i._USLCpageScan_Process_ID_Pkt_During_Scanning))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _USLCpageScan_Process_ID_Pkt_During_Scanning &rArr; LSLCpkt_Generate_ID &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetRadioMode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ID
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Set_Device_State
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
</UL>

<P><STRONG><a name="[533]"></a>_USLCpage_Generate_ID</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uslc_page.o(i._USLCpage_Generate_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _USLCpage_Generate_ID &rArr; LSLCpkt_Generate_ID &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetRadioMode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ID
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Toggle_Train
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Page
</UL>

<P><STRONG><a name="[536]"></a>_USLCpage_Resume_Paging</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uslc_page.o(i._USLCpage_Resume_Paging))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _USLCpage_Resume_Paging &rArr; LSLCpkt_Generate_ID &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetRadioMode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ID
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Set_Device_State
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Page
</UL>

<P><STRONG><a name="[534]"></a>_USLCpage_Setup_DL_to_CAC</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uslc_page.o(i._USLCpage_Setup_DL_to_CAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _USLCpage_Setup_DL_to_CAC
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Device_FHS_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Page
</UL>

<P><STRONG><a name="[14c]"></a>_USLCsched_isNextRxTxACLActive</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, uslc_scheduler.o(i._USLCsched_isNextRxTxACLActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _USLCsched_isNextRxTxACLActive
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Prepare_Next_Slave_Frame_Activity
</UL>

<P><STRONG><a name="[48a]"></a>__ARM_common_ll_muluu</STRONG> (ARM, 12 bytes, Stack size 0 bytes, lmp_ecc.o(i.__ARM_common_ll_muluu))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexModP (via BLX)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexByUint32 (via BLX)
</UL>

<P><STRONG><a name="[c3]"></a>__ARM_common_switch8</STRONG> (ARM, 24 bytes, Stack size 0 bytes, hw_radio.o(i.__ARM_common_switch8))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Service (via BLX)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_UART_Rx_Char (via BLX)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Callback (via BLX)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asciiToKeycode (via BLX)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event (via BLX)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCommandData (via BLX)
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Initial (via BLX)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUih (via BLX)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Packets (via BLX)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Handler (via BLX)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events_Complete (via BLX)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event (via BLX)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event (via BLX)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM2 (via BLX)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM0 (via BLX)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKD (via BLX)
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Park (via BLX)
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Park (via BLX)
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Page (via BLX)
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan (via BLX)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher (via BLX)
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Inquiry_Scan (via BLX)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepare_next_slave_frame_activity (via BLX)
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Start (via BLX)
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Request (via BLX)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command (via BLX)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Local_Status_Command (via BLX)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Policy_Command (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command (via BLX)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Info_Command (via BLX)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command (via BLX)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSdpdb_Parse_DataElement_Head (via BLX)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Not_Accepted (via BLX)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Accepted (via BLX)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Not_Accepted_Common (via BLX)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Accepted_Common (via BLX)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Beacon_Tx (via BLX)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Message (via BLX)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LM_Encode_Normal_PDU (via BLX)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Beken_Hardware_Test (via BLX)
</UL>

<P><STRONG><a name="[1eb]"></a>__ARM_fpclassify</STRONG> (ARM, 44 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via BLX)
</UL>

<P><STRONG><a name="[1e3]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[df]"></a>asciiToKeycode</STRONG> (Thumb, 386 bytes, Stack size 4 bytes, devicebtj_handler.o(i.asciiToKeycode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = asciiToKeycode
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Loop
</UL>

<P><STRONG><a name="[2b8]"></a>bigHexInversion</STRONG> (Thumb, 198 bytes, Stack size 160 bytes, lmp_ecc.o(i.bigHexInversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = bigHexInversion &rArr; specialModP &rArr; SubtractFromSelfBigHexSign &rArr; SubtractBigHex
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGreaterThanOrEqual
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGreaterThan
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBigNumber
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divideByTwo
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyBigHex
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHexSign
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHex
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPdiv2
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Point_Addition
</UL>

<P><STRONG><a name="[263]"></a>bprintf</STRONG> (Thumb, 78 bytes, Stack size 96 bytes, driver_uart.o(i.bprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = bprintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_debug_send
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_InterruptHandler
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCommandData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATCommand
</UL>

<P><STRONG><a name="[56a]"></a>clr_flash_qwfr</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, driver_flash.o(i.clr_flash_qwfr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clr_flash_qwfr
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
</UL>

<P><STRONG><a name="[261]"></a>connect_ind</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, devicebtj_handler.o(i.connect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = connect_ind &rArr; DeviceHci_Disconnect &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
</UL>

<P><STRONG><a name="[204]"></a>copyBigHex</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lmp_ecc.o(i.copyBigHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = copyBigHex &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigHexInversion
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHexSign
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHexUint32
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexModP
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Point_Copy
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_Point_Multiplication
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPdiv2
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddP
</UL>

<P><STRONG><a name="[266]"></a>delay_ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, devicebtj_handler.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sniff
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_single_carry
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmod_calibration
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Handler
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events_Complete
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Events
</UL>

<P><STRONG><a name="[c6]"></a>delay_us</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Service
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CPU_PLL_clk
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICU_Initial
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CPU_Speed_16M
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_idle
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Deep_sleep
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Switch_Role
</UL>

<P><STRONG><a name="[262]"></a>disconnect_ind</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, devicebtj_handler.o(i.disconnect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = disconnect_ind &rArr; send_HCI_command &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_HCI_command
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
</UL>

<P><STRONG><a name="[564]"></a>divideByTwo</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lmp_ecc.o(i.divideByTwo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = divideByTwo
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBigNumberLength
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigHexInversion
</UL>

<P><STRONG><a name="[49c]"></a>enter_single_carry</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(i.enter_single_carry))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Initialise
</UL>

<P><STRONG><a name="[566]"></a>enter_sniff</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, devicebtj_handler.o(i.enter_sniff))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = enter_sniff &rArr; send_HCI_command &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_HCI_command
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_control
</UL>

<P><STRONG><a name="[56d]"></a>flash_erase_sector</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, driver_flash.o(i.flash_erase_sector))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLinkNum
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBtLinkInfo
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCommandData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATCommand
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readLinkNum
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env_config
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_lmecc_pointq
</UL>

<P><STRONG><a name="[493]"></a>flash_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, driver_flash.o(i.flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_init &rArr; flash_set_line_mode &rArr; clr_flash_qwfr
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_clk
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flash_ID
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_qe
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wp_256k
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Initialise
</UL>

<P><STRONG><a name="[25c]"></a>flash_read_data</STRONG> (Thumb, 126 bytes, Stack size 88 bytes, driver_flash.o(i.flash_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = flash_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLinkNum
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBtLinkInfo
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBtLinkInfo
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_control
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATCommand
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readLinkNum
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env_config
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lmecc_pointq_status
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lmecc_pointq
</UL>

<P><STRONG><a name="[25b]"></a>flash_set_line_mode</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, driver_flash.o(i.flash_set_line_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_set_line_mode &rArr; clr_flash_qwfr
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags (via BLX)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags (via BLX)
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_flash_qwfr
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLinkNum
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBtLinkInfo
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBtLinkInfo
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_control
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCommandData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATCommand
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readLinkNum
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env_config
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wakeup
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_idle
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Deep_sleep
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_lmecc_pointq
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lmecc_pointq_status
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lmecc_pointq
</UL>

<P><STRONG><a name="[568]"></a>flash_wp_256k</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, driver_flash.o(i.flash_wp_256k))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flash_wp_256k &rArr; flash_write_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_sr
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[56c]"></a>flash_write_data</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, driver_flash.o(i.flash_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = flash_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLinkNum
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBtLinkInfo
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCommandData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATCommand
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readLinkNum
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env_config
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_lmecc_pointq
</UL>

<P><STRONG><a name="[56b]"></a>flash_write_sr</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, driver_flash.o(i.flash_write_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_write_sr
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wp_256k
</UL>

<P><STRONG><a name="[567]"></a>get_flash_ID</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, driver_flash.o(i.get_flash_ID))
<BR><BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wakeup
</UL>

<P><STRONG><a name="[d2]"></a>gpio_input</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, driver_gpio.o(i.gpio_input))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Loop
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_contrl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Initialise
</UL>

<P><STRONG><a name="[2b1]"></a>hashConcat</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, lmp_ssp_engine.o(i.hashConcat))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hashConcat
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F3
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F2
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F1
</UL>

<P><STRONG><a name="[d0]"></a>host_contrl</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, main.o(i.host_contrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = host_contrl &rArr; Host_Loop &rArr; status_control &rArr; DeviceBtj_Connect &rArr; DeviceL2c_Send_ConnectionReq &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Loop
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171]"></a>hw_memcpy128</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lslc_access.o(i.hw_memcpy128))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hw_memcpy128
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Extract_ACL_Payload
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_ACL_Payload
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Move_CC_Shadow_to_Hardware
</UL>

<P><STRONG><a name="[16e]"></a>hw_memcpy32</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lslc_access.o(i.hw_memcpy32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hw_memcpy32
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Extract_FHS_Payload
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Extract_EIR_Payload
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_EIR_Payload
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Extract_ACL_Payload
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_FHS_Payload_Ex
</UL>

<P><STRONG><a name="[357]"></a>hw_memcpy8</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lmp_afh.o(i.hw_memcpy8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hw_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LM_Set_AFH_Channel_Classification
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Initialise
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_Initialise
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCcls_Record_Slave_Channel_Classification
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCcls_Record_Device_Channel_Map
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCcls_Build_Channel_Map
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_set_AFH
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_Get_Frequency_Channel
</UL>

<P><STRONG><a name="[358]"></a>hw_memset8</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lmp_ch.o(i.hw_memset8))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Features_Res_Ext
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Features_Req_Ext
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Initialise
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Initialise_Classification
</UL>

<P><STRONG><a name="[2a6]"></a>initBigNumber</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lmp_ecc.o(i.initBigNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = initBigNumber &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigHexInversion
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHexUint32
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_Point_Multiplication
</UL>

<P><STRONG><a name="[206]"></a>isGreaterThan</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lmp_ecc.o(i.isGreaterThan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isGreaterThan
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigHexInversion
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPdiv2
</UL>

<P><STRONG><a name="[4aa]"></a>isGreaterThanOrEqual</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lmp_ecc.o(i.isGreaterThanOrEqual))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isGreaterThanOrEqual
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigHexInversion
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHexSign
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHexMod
</UL>

<P><STRONG><a name="[56f]"></a>kmod_calibration</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, driver_xvr.o(i.kmod_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = kmod_calibration
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xver_initial
</UL>

<P><STRONG><a name="[25d]"></a>readBtLinkInfo</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, driver_flash.o(i.readBtLinkInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = readBtLinkInfo &rArr; flash_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_data
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
</UL>

<P><STRONG><a name="[25f]"></a>readLinkNum</STRONG> (Thumb, 134 bytes, Stack size 328 bytes, driver_flash.o(i.readLinkNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = readLinkNum &rArr; flash_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_data
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_data
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Initialise
</UL>

<P><STRONG><a name="[496]"></a>read_env_config</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, main.o(i.read_env_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = read_env_config &rArr; flash_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_data
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_data
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Initialise
</UL>

<P><STRONG><a name="[2aa]"></a>read_lmecc_pointq</STRONG> (Thumb, 56 bytes, Stack size 72 bytes, driver_flash.o(i.read_lmecc_pointq))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = read_lmecc_pointq &rArr; flash_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_data
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_Point_Multiplication_uint8
</UL>

<P><STRONG><a name="[2a7]"></a>read_lmecc_pointq_status</STRONG> (Thumb, 84 bytes, Stack size 64 bytes, driver_flash.o(i.read_lmecc_pointq_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = read_lmecc_pointq_status &rArr; flash_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_data
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_Point_Multiplication
</UL>

<P><STRONG><a name="[258]"></a>send_HCI_command</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, devicebtj_handler.o(i.send_HCI_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = send_HCI_command &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_UART_Rx_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_control
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sniff
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_ind
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Host_Initialise
</UL>

<P><STRONG><a name="[200]"></a>setBigNumberLength</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lmp_ecc.o(i.setBigNumberLength))
<BR><BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divideByTwo
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHex
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHex
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexModP
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexByUint32
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPdiv2
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBigHex
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add2SelfBigHex
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMecc_Generate_ECC_Key
</UL>

<P><STRONG><a name="[2ae]"></a>set_flash_clk</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, driver_flash.o(i.set_flash_clk))
<BR><BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICU_Initial
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wakeup
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_idle
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Deep_sleep
</UL>

<P><STRONG><a name="[569]"></a>set_flash_qe</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, driver_flash.o(i.set_flash_qe))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_flash_qe
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[48b]"></a>specialModP</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, lmp_ecc.o(i.specialModP))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = specialModP &rArr; SubtractFromSelfBigHexSign &rArr; SubtractBigHex
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGreaterThanOrEqual
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBigNumber
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHexSign
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHex
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyByU32ModPInv
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddP
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add2SelfBigHex
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigHexInversion
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexModP
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexByUint32
</UL>

<P><STRONG><a name="[490]"></a>spi_set_rxint_mode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, driver_spi.o(i.spi_set_rxint_mode))
<BR><BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_InterruptHandler
</UL>

<P><STRONG><a name="[48d]"></a>spi_set_txint_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, driver_spi.o(i.spi_set_txint_mode))
<BR><BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_InterruptHandler
</UL>

<P><STRONG><a name="[48f]"></a>spi_trans_start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, driver_spi.o(i.spi_trans_start))
<BR><BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_InterruptHandler
</UL>

<P><STRONG><a name="[48e]"></a>spi_txint_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_spi.o(i.spi_txint_disable))
<BR><BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_InterruptHandler
</UL>

<P><STRONG><a name="[23e]"></a>sqrt</STRONG> (ARM, 96 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Sqrt (via BLX)
</UL>

<P><STRONG><a name="[e0]"></a>status_control</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, devicebtj_handler.o(i.status_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = status_control &rArr; DeviceBtj_Connect &rArr; DeviceL2c_Send_ConnectionReq &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_SwitchRole
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_AuthenticationRequestedCommand
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_HCI_command
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sniff
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Connect
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_data
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Loop
</UL>

<P><STRONG><a name="[4a2]"></a>sys_idle</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sys_power.o(i.sys_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sys_idle &rArr; flash_set_line_mode &rArr; clr_flash_qwfr
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_clk
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CPU_Speed_16M
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Halt_System
</UL>

<P><STRONG><a name="[4a3]"></a>sys_wakeup</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sys_power.o(i.sys_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sys_wakeup &rArr; flash_set_line_mode &rArr; clr_flash_qwfr
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_clk
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flash_ID
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Halt_System
</UL>

<P><STRONG><a name="[cc]"></a>system_reset_reson</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, driver_icu.o(i.system_reset_reson))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>uart_buff_send</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, driver_uart.o(i.uart_buff_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_buff_send
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_debug_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_uart.o(i.TRAhcit_Register_UART_Driver)
</UL>
<P><STRONG><a name="[d4]"></a>uart_callback</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, driver_uart.o(i.uart_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Loop
</UL>

<P><STRONG><a name="[565]"></a>uart_debug_send</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, driver_uart.o(i.uart_debug_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_debug_send &rArr; uart_buff_send
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_buff_send
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bprintf
</UL>

<P><STRONG><a name="[260]"></a>writeBtLinkInfo</STRONG> (Thumb, 248 bytes, Stack size 224 bytes, driver_flash.o(i.writeBtLinkInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = writeBtLinkInfo &rArr; flash_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_data
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_data
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
</UL>

<P><STRONG><a name="[25e]"></a>writeLinkNum</STRONG> (Thumb, 196 bytes, Stack size 224 bytes, driver_flash.o(i.writeLinkNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = writeLinkNum &rArr; flash_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_data
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_data
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Event
</UL>

<P><STRONG><a name="[2ac]"></a>write_lmecc_pointq</STRONG> (Thumb, 88 bytes, Stack size 72 bytes, driver_flash.o(i.write_lmecc_pointq))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = write_lmecc_pointq &rArr; flash_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_data
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_Point_Multiplication_uint8
</UL>

<P><STRONG><a name="[494]"></a>xver_initial</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, driver_xvr.o(i.xver_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = xver_initial &rArr; kmod_calibration
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmod_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Initialise
</UL>

<P><STRONG><a name="[1c1]"></a>_get_lc_numeric</STRONG> (ARM, 72 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2 (via BLX)
</UL>

<P><STRONG><a name="[f]"></a>_get_lc_ctype</STRONG> (ARM, 72 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2 (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[240]"></a>__aeabi_d2uiz</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Sqrt (via BLX)
</UL>

<P><STRONG><a name="[574]"></a>_dfixu</STRONG> (ARM, 112 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[23f]"></a>__aeabi_dmul</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Sqrt (via BLX)
</UL>

<P><STRONG><a name="[576]"></a>_dmul</STRONG> (ARM, 364 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[575]"></a>__fpl_dnaninf</STRONG> (ARM, 184 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
</UL>

<P><STRONG><a name="[577]"></a>__fpl_dretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[572]"></a>_dsqrt</STRONG> (ARM, 508 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[23d]"></a>__aeabi_f2d</STRONG> (ARM, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Sqrt (via BLX)
</UL>

<P><STRONG><a name="[578]"></a>_f2d</STRONG> (ARM, 100 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[23c]"></a>__aeabi_fdiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Sqrt (via BLX)
</UL>

<P><STRONG><a name="[57a]"></a>_fdiv</STRONG> (ARM, 396 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[23b]"></a>__aeabi_ui2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Sqrt (via BLX)
</UL>

<P><STRONG><a name="[5b3]"></a>_ffltu</STRONG> (ARM, 40 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[579]"></a>__fpl_fnaninf</STRONG> (ARM, 160 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[57b]"></a>__fpl_fretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[2]"></a>__ieee_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via BLX)
</UL>

<P><STRONG><a name="[1a0]"></a>_printf_fp_dec</STRONG> (ARM, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[a]"></a>SYSirq_FIQ_Handler</STRONG> (ARM, 88 bytes, Stack size 32 bytes, sys_irq.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = SYSirq_FIQ_Handler &rArr; UART_Interrupt_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Interrupt_Handler (via Veneer)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CPU_PLL_clk (via BLX)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_boot.o(SYS_Boot)
</UL>
<P><STRONG><a name="[bd]"></a>BK3000_Write_RF_CH</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hw_radio.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_RX_Middle_Radio_Process
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_RX_START_Radio_Process
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TX_Middle_Radio_Process
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_TX_START_Radio_Process
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Service
</UL>

<P><STRONG><a name="[bc]"></a>TIM0_TX_START_Radio_Process</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hw_radio.o(fastcall))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK3000_Write_RF_CH
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
</UL>

<P><STRONG><a name="[be]"></a>TIM1_TX_Middle_Radio_Process</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hw_radio.o(fastcall))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK3000_Write_RF_CH
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
</UL>

<P><STRONG><a name="[bf]"></a>TIM2_RX_START_Radio_Process</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_radio.o(fastcall))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK3000_Write_RF_CH
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
</UL>

<P><STRONG><a name="[c0]"></a>TIM3_RX_Middle_Radio_Process</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hw_radio.o(fastcall))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK3000_Write_RF_CH
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
</UL>

<P><STRONG><a name="[ca]"></a>WRITE_BK3000_TX_POWER</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hw_radio.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Init_Tx_Power_Level
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Set_Tx_Power_Level
</UL>

<P><STRONG><a name="[c7]"></a>HWradio_SetRadioMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hw_radio.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HWradio_SetRadioMode &rArr; HWradio_Service
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Service
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Prepare_Tx
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Early_Prepare_TxRxFreqs_SlavePageResponse
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Change_To_Local_Piconet
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinq_Generate_ID
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Park
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Page
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Inquiry
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Inquiry_Scan
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Finish
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Get_Emergency_Poll_Activity
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_OS_START_
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_OS_RECONNECTING_
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ACL
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpageScan_Process_ID_Pkt_During_Scanning
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpageScan_OS_START
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpage_Resume_Paging
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpage_Generate_ID
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinqScan_OS_START
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinqScan_Generate_FHS
</UL>

<P><STRONG><a name="[12a]"></a>HWradio_GetRadioMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hw_radio.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM3
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Inquiry_Scan
</UL>

<P><STRONG><a name="[c8]"></a>HWradio_SetFrequency</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hw_radio.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HWradio_SetFrequency &rArr; HWradio_Service
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Service
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Early_Prepare_TxRxFreqs_SlavePageResponse
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Early_Prepare_Frequency_FHS_Response_ID
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Prepare_Rx_Frequency_R2P
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Prepare_Frequency_Connection
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Prepare_Frequency_Context
</UL>

<P><STRONG><a name="[c9]"></a>HWradio_Set_Tx_Power_Level</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hw_radio.o(fastcall))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_BK3000_TX_POWER
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ID
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_EIR
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCpkt_Prepare_Piconet_Channel_Access
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_FHS_Common_
</UL>

<P><STRONG><a name="[18a]"></a>HWradio_Update_Internal_RSSI_Cache</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hw_radio.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Attempt_RSSI_Read
</UL>

<P><STRONG><a name="[b]"></a>main</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, main.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = main &rArr; BTms_Sched &rArr; TRAhcit_Dispatch_Pending_Data &rArr; TRAhcit_UART_Transmit &rArr; Device_HCI_Rx &rArr; DeviceHci_Callback &rArr; DeviceL2c_Handler &rArr; DeviceSdp_Handler &rArr; DeviceSdp_Recv_ServiceSearchAttributeReq &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_reset_reson
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Host_Initialise
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Write_Scan_Enable
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_contrl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Initialise
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sys_boot.o(SYS_Boot)
<LI> __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[d1]"></a>Host_Loop</STRONG> (Thumb, 984 bytes, Stack size 64 bytes, devicebtj_handler.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = Host_Loop &rArr; status_control &rArr; DeviceBtj_Connect &rArr; DeviceL2c_Send_ConnectionReq &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_callback
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_UihHeader
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Send
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Send
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_control
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asciiToKeycode
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCommandData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATCommand
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via BLX)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via BLX)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_contrl
</UL>

<P><STRONG><a name="[cf]"></a>BTms_Sched</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, bt_mini_sched.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = BTms_Sched &rArr; TRAhcit_Dispatch_Pending_Data &rArr; TRAhcit_UART_Transmit &rArr; Device_HCI_Rx &rArr; DeviceHci_Callback &rArr; DeviceL2c_Handler &rArr; DeviceSdp_Handler &rArr; DeviceSdp_Recv_ServiceSearchAttributeReq &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Sleep_System
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Halt_System
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Is_Tabasco_Asleep
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Get_Active_Procedure
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Dispatch_Pending_Event
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Dispatch_Pending_Data
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_And_Clear_Tabasco_Intr
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Handle_Assessments
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Handle_Expired_Timers
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Service_Park_Links
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Scan_For_Pending_Broadcast
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Scan_All_Links_For_Pending_Flushes
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Command_Dispatcher
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Handle_Host_To_Host_Controller_Flow_Control
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC_Command_Dispatcher
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtst_Handle_Loopback_HCI_Data
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Is_Available_Sleep_System
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11c]"></a>HWdelay_Wait_For_us</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hw_delay.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_NO_PKT_RCVD
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Piconet_Clock_Ex
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prepare_Command_Complete_Event_Read_Clock_Payload
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Process_Rx_Header
</UL>

<P><STRONG><a name="[181]"></a>BTq_Is_Queue_Empty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tra_queue.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Acknowledge_Complete_Tx
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_HCI_Enhanced_Flush
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Rx_Activity
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Process_Rx_CRC
</UL>

<P><STRONG><a name="[f5]"></a>BTq_Reduce_Queue_Number_Of_Processed_Chunks</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tra_queue.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags (via BLX)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags (via BLX)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Get_Data_Queue_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Handle_Host_To_Host_Controller_Flow_Control
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Host_Number_Of_Completed_Packets
</UL>

<P><STRONG><a name="[f9]"></a>BTq_Enqueue</STRONG> (Thumb, 382 bytes, Stack size 96 bytes, tra_queue.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags (via BLX)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags (via BLX)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Get_Data_Queue_Ref
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSatomic_Increment_u_int8
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtst_Handle_Loopback_HCI_Data
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Get_Rx_Buf
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Number_Of_Completed_Packets_Event
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Inquiry_Result_Event
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Loopback_Command_Event
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Extract_ACL_Payload
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Status_Event
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_eSCO_Retransmission_Mode
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_VCI_CLK_Override
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_R2P_Min_Search_Window
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Park_Parameters
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Radio_Register
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Radio_Power
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Native_Clock
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Default_Packet_Type
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Host_Specific_Parameters
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Update_Manufacturing_Information
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_System_Hardware_Configuration
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Local_Next_Available_Am_Addr
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Local_Failed_Attempts_Counter
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Local_Bd_Addr
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_HCIT_UART_Baud_Rate
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Enable_SCO_Via_HCI
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Enable_Low_Power_Mode
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Disable_SCO_Via_HCI
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Disable_Low_Power_Mode
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Broadcast_Scan_Window
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Send_Encryption_Key_Size_Mask_Req
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_eSCO_Retransmission_Mode
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Unused_Stack_Space
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Raw_RSSI_PER_BER
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Raw_RSSI
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Radio_Modulation
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_R2P_Min_Search_Window
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_PER
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Whitening_Enable
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Timing_Information
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Relative_Host_Controller_Mips
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Radio_Register
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Radio_Power
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Native_Clock
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Link_Key_Type
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Hopping_Mode
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Hop_Frequencies
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Hardware_Version
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Hardware_Area
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Extended_Features
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Encryption_Key_Length
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Default_Packet_Type
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_BER
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Local_Area_Download
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Force_System_Halt
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Clear_Local_Failed_Attempts_Counter
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tc_Beken_Debug_UART_Send_Link_Ok
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tc_Beken_Debug_UART_Access_Register
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Beken_Send_General_To_Host
</UL>

<P><STRONG><a name="[fb]"></a>BTq_Commit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tra_queue.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BTq_Commit
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags (via BLX)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtst_Handle_Loopback_HCI_Data
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Commit_Rx_Buf
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Number_Of_Completed_Packets_Event
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Inquiry_Result_Event
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Loopback_Command_Event
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Extract_ACL_Payload
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Status_Event
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_eSCO_Retransmission_Mode
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_VCI_CLK_Override
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_R2P_Min_Search_Window
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Park_Parameters
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Radio_Register
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Radio_Power
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Native_Clock
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Local_Default_Packet_Type
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Write_Host_Specific_Parameters
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Update_Manufacturing_Information
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_System_Hardware_Configuration
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Local_Next_Available_Am_Addr
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Local_Failed_Attempts_Counter
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Local_Bd_Addr
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_HCIT_UART_Baud_Rate
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Enable_SCO_Via_HCI
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Enable_Low_Power_Mode
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Disable_SCO_Via_HCI
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Disable_Low_Power_Mode
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Set_Broadcast_Scan_Window
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Send_Encryption_Key_Size_Mask_Req
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_eSCO_Retransmission_Mode
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Unused_Stack_Space
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Raw_RSSI_PER_BER
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Raw_RSSI
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Radio_Modulation
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_R2P_Min_Search_Window
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_PER
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Whitening_Enable
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Timing_Information
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Relative_Host_Controller_Mips
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Radio_Register
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Radio_Power
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Native_Clock
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Link_Key_Type
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Hopping_Mode
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Hop_Frequencies
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Hardware_Version
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Hardware_Area
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Extended_Features
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Encryption_Key_Length
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_Local_Default_Packet_Type
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Read_BER
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Local_Area_Download
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Force_System_Halt
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Clear_Local_Failed_Attempts_Counter
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tc_Beken_Debug_UART_Send_Link_Ok
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tc_Beken_Debug_UART_Access_Register
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Beken_Send_General_To_Host
</UL>

<P><STRONG><a name="[fc]"></a>BTq_Dequeue_Next</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tra_queue.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BTq_Dequeue_Next
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags (via BLX)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags (via BLX)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Get_Data_Queue_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Dispatch_Pending_Event
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Command_Dispatcher
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC_Command_Dispatcher
</UL>

<P><STRONG><a name="[fd]"></a>BTq_BB_Dequeue_Next</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, tra_queue.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BTq_BB_Dequeue_Next
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags (via BLX)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Scan_All_Links_For_Pending_Flushes
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Beacon_Tx
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Flush_Link_Buffer
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Slave_Sniff_Activity
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Master_Broadcast_Tx
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Link_Tx_Activity
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Flush_L2CAP_Packet
</UL>

<P><STRONG><a name="[241]"></a>BTq_Dequeue_Next_Data_By_Length</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, tra_queue.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtst_Handle_Loopback_HCI_Data
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Get_Next_HC_to_Host_Data_Descriptor
</UL>

<P><STRONG><a name="[fe]"></a>BTq_Ack_Last_Dequeued</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, tra_queue.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = BTq_Ack_Last_Dequeued &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags (via BLX)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags (via BLX)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Get_Data_Queue_Ref
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Deallocate_Header
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Scan_All_Links_For_Pending_Flushes
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Command_Dispatcher
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC_Command_Dispatcher
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtst_Handle_Loopback_HCI_Data
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Acknowledge_Complete_Tx
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Beacon_Tx
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Flush_Link_Buffer
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Ack_Last_Tx_Packet
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Master_Broadcast_Tx
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Link_Tx_Activity
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Flush_L2CAP_Packet
</UL>

<P><STRONG><a name="[5b4]"></a>BTq_Get_Total_Bytes_Enqueued</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tra_queue.o(fastcall), UNUSED)

<P><STRONG><a name="[101]"></a>USLCchac_Procedure_Finish</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, uslc_chan_ctrl.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetRadioMode
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_Dispatcher
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkSlave_Park
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Park
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Page
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Request
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_OS_RECONNECTING_
</UL>

<P><STRONG><a name="[bb]"></a>LSLCirq_IRQ_Handler</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, lslc_irq.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = LSLCirq_IRQ_Handler &rArr; LSLCslot_Handle_TIM0 &rArr;  LSLCslot_Handle_TIM0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_RX_Middle_Radio_Process
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_RX_START_Radio_Process
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TX_Middle_Radio_Process
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_TX_START_Radio_Process
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_AUX_TIM
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM3
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM2
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM0
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_SYNC_DET
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKD_RX_HDR
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKD
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKA
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_NO_PKT_RCVD
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_FIQ_Handler (via BLX)
</UL>

<P><STRONG><a name="[129]"></a>LSLCirq_R2P_Turn_On_Intr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lslc_irq.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM3
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
</UL>

<P><STRONG><a name="[10d]"></a>USLCsched_Tx_Complete_Set_Sleep</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lslc_slot.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = USLCsched_Tx_Complete_Set_Sleep &rArr; USLCsleep_State_Dispatcher &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_State_Dispatcher
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Set_Sleep_Request
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Get_Sleep_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKA
</UL>

<P><STRONG><a name="[107]"></a>LSLCslot_Handle_PKA</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lslc_slot.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = LSLCslot_Handle_PKA &rArr; USLCsched_Tx_Complete &rArr; USLCchac_prepare_next_slave_frame_activity &rArr; USLCmss_State_Dispatcher &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Tx_Complete
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Enable_Receiver
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Tx_Complete_Set_Sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
</UL>

<P><STRONG><a name="[105]"></a>LSLCslot_Handle_PKD</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lslc_slot.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = LSLCslot_Handle_PKD &rArr; USLCsched_Tx_Start &rArr; _USLCsched_Prepare_Next_Slave_Frame_Activity &rArr; LMpol_Get_Next_Slave_Park_Activity &rArr; LC_Unpark_Request &rArr; USLCparkMaster_Unpark_Request &rArr; DL_Unpark &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_RxComplete
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_get_device_state
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Tx_Start
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Process_Rx
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCstat_Log_Rx_Packet
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Process_Rx_Packet
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Early_Prepare_TxRxFreqs_SlavePageResponse
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Enable_Transmitter
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Enable_Receiver
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Disable_Receiver
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
</UL>

<P><STRONG><a name="[106]"></a>LSLCslot_Handle_NO_PKT_RCVD</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lslc_slot.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = LSLCslot_Handle_NO_PKT_RCVD &rArr; USLCsched_Process_Rx &rArr; USLCchac_Process_Rx &rArr; USLCmss_State_Dispatcher &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_RxComplete
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Wait_For_us
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Process_Rx
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Prepare_Tx
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Process_No_Rx_Packet
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Enable_Transmitter
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Disable_Receiver
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
</UL>

<P><STRONG><a name="[104]"></a>LSLCslot_Handle_PKD_RX_HDR</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, lslc_slot.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = LSLCslot_Handle_PKD_RX_HDR &rArr; USLCsched_Prepare_Tx &rArr; BTtmt_Get_Next_Master_Tx_Activity &rArr; USLCtm_Test_Transmitter &rArr; LSLCpkt_Generate_ACL &rArr; LSLCpkt_Generate_POLL &rArr; _LSLCpkt_Prepare_Piconet_Channel_Access &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_RxComplete
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Prepare_Tx
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCstat_Log_Rx_Packet
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Process_Rx_Packet_Header
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Early_Prepare_Frequency_FHS_Response_ID
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCslot_Handle_Rx_Interrupt_Error
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_rx_type
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Is_Extended_Inquiry_Response_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
</UL>

<P><STRONG><a name="[124]"></a>LSLCslot_Change_To_Local_Piconet</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lslc_slot.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LSLCslot_Change_To_Local_Piconet &rArr; HWradio_SetRadioMode &rArr; HWradio_Service
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetRadioMode
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_All_Intr_Except
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM0
</UL>

<P><STRONG><a name="[10b]"></a>LSLCslot_Handle_TIM0</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, lslc_slot.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = LSLCslot_Handle_TIM0 &rArr;  LSLCslot_Handle_TIM0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_get_device_state
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Tx_Start
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Increment_X_Page_Scan
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Enable_Receiver
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Change_To_Local_Piconet
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM0
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM0
</UL>

<P><STRONG><a name="[10c]"></a>LSLCslot_Handle_TIM1</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lslc_slot.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LSLCslot_Handle_TIM1
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Setup_Radio_For_Next_Half_Slot
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
</UL>

<P><STRONG><a name="[10a]"></a>LSLCslot_Handle_TIM3</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, lslc_slot.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = LSLCslot_Handle_TIM3 &rArr; USLCsched_Process_Rx &rArr; USLCchac_Process_Rx &rArr; USLCmss_State_Dispatcher &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Setup_Radio_For_Next_Half_Slot
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_RxComplete
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_GetRadioMode
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Get_Active_Procedure
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Process_Rx
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Prepare_Tx
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Second_Half_Slot
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Process_No_Rx_Packet
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Enable_Transmitter
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_R2P_Turn_On_Intr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Disable_Receiver
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
</UL>

<P><STRONG><a name="[109]"></a>LSLCslot_Handle_TIM2</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, lslc_slot.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = LSLCslot_Handle_TIM2 &rArr;  LSLCslot_Handle_TIM2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Setup_Radio_For_Next_Half_Slot
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_get_device_state
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Set_Next_Frame_Activity
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Rx_Start
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Process_Rx
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Prepare_Tx
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Get_Next_Frame_Activity
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Process_Rx_Packet
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Get_Active_Rx_Device_Link_Ref
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Enable_Transmitter
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_rx_type
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM2
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Disable_Receiver
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM2
</UL>

<P><STRONG><a name="[103]"></a>LSLCslot_Handle_SYNC_DET</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lslc_slot.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LSLCslot_Handle_SYNC_DET &rArr; LSLCacc_Attempt_RSSI_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Attempt_RSSI_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
</UL>

<P><STRONG><a name="[131]"></a>LSLCslot_Local_Piconet_Request</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lslc_slot.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LSLCslot_Local_Piconet_Request
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_All_Intr_Except
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Tx_Start
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Rx_Start
</UL>

<P><STRONG><a name="[144]"></a>LSLCslot_Write_BT_Clk_Avoid_Race</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lslc_slot.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Restore_BT_Clock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_OS_RECONNECTING_
</UL>

<P><STRONG><a name="[132]"></a>BTtimer_Set_Slots</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bt_timer.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BTtimer_Set_Slots &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Handle_Host_To_Host_Controller_Flow_Control
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Initialise
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Reset_Timer
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Page_Scan_Start
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Inquiry_Scan_Start
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Initialise
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Page_Scan_Complete
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Inquiry_Scan_Complete
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinq_Generate_ID
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Park
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Page
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Inquiry
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Inquiry_Scan
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_InqScan_Rand_Wait
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Park_Mode
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Exit_Park_Mode
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Set_Host_To_Host_Controller_Flow_Control_Thresholds
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Unpark_Pm_Addr_Req
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Park_Req
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Accepted
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Enter_Park_Mode
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Exit_Park_Mode_Complete_Handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Unpark_Timeout
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Get_Emergency_Poll_Activity
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_OS_START_
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpageScan_Process_ID_Pkt_During_Scanning
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpageScan_OS_START
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpage_Resume_Paging
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCpage_Generate_ID
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinqScan_OS_START
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Initialise
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Unpark_Request
</UL>

<P><STRONG><a name="[134]"></a>BTtimer_Piconet_Reset_Delta_Slots</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bt_timer.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = BTtimer_Piconet_Reset_Delta_Slots
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Enter_Park_Mode
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Park_Activity
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Beacon_Tx
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Adjust_Wakeup_Slot_Time
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Slave_Sniff_Activity
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Master_Sniff_Activity
</UL>

<P><STRONG><a name="[136]"></a>BTtimer_Set_Timer_On_Timing_Equation</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, bt_timer.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = BTtimer_Set_Timer_On_Timing_Equation
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Modify_Beacon
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Enter_Park_Mode
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Extract_Sniff_Parameters
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Enter_Sniff_Mode
</UL>

<P><STRONG><a name="[137]"></a>BTtimer_Is_Timing_Equation_Satisfied</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bt_timer.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = BTtimer_Is_Timing_Equation_Satisfied
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Sniff_Activation_On_Next_Frame
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Slave_Sniff_Activity
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Master_Sniff_Activity
</UL>

<P><STRONG><a name="[369]"></a>BTtimer_Is_Expired_For_Time</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bt_timer.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Enlist_Timer
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Page_Scan_Start
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Inquiry_Scan_Start
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_Get_Search_Window_Frames
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Tx_Activity
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Park_Activity
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Beacon_Tx
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Device_Activity
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Adjust_Wakeup_Slot_Time
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Slave_Sniff_Activity
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Master_Sniff_Activity
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_Request
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Update_Master_AFH_Piconet
</UL>

<P><STRONG><a name="[138]"></a>LMpol_Set_Flush_Timeout</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lmp_link_policy.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LMpol_Set_Flush_Timeout &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Link_Tx_Activity
</UL>

<P><STRONG><a name="[3b]"></a>LMpol_Get_Next_Master_Tx_Activity</STRONG> (Thumb, 654 bytes, Stack size 48 bytes, lmp_link_policy.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = LMpol_Get_Next_Master_Tx_Activity &rArr; LMpol_Get_Next_Master_Beacon_Tx &rArr; LC_Unpark_Request &rArr; USLCparkMaster_Unpark_Request &rArr; DL_Unpark &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Interval_To_Next_Wakeup
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Use_Local_Tx_Descriptor
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Adjust_Sniff_Attempt_for_Multislot_Packet
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Beacon_Tx
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Master_Sniff_Activity
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Master_Broadcast_Tx
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Link_Tx_Activity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_link_policy.o(i.LMpol_Initialise)
</UL>
<P><STRONG><a name="[149]"></a>_USLCsched_Prepare_Next_Slave_Frame_Activity</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, uslc_scheduler.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = _USLCsched_Prepare_Next_Slave_Frame_Activity &rArr; LMpol_Get_Next_Slave_Park_Activity &rArr; LC_Unpark_Request &rArr; USLCparkMaster_Unpark_Request &rArr; DL_Unpark &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Get_Active_Procedure
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_get_device_state
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepare_next_slave_frame_activity
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_is_next_activity_scan_activation
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Is_R2P_Request_Pending
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Get_Sleep_Request
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Park_Activity
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_isNextRxTxACLActive
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Tx_Start
</UL>

<P><STRONG><a name="[11b]"></a>USLCsched_Tx_Start</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, uslc_scheduler.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = USLCsched_Tx_Start &rArr; _USLCsched_Prepare_Next_Slave_Frame_Activity &rArr; LMpol_Get_Next_Slave_Park_Activity &rArr; LC_Unpark_Request &rArr; USLCparkMaster_Unpark_Request &rArr; DL_Unpark &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Get_Active_Procedure
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Local_Piconet_Request
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_Connection
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepareRx
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Prepare_Next_Slave_Frame_Activity
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM0
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKD
</UL>

<P><STRONG><a name="[151]"></a>_USLCsched_Prepare_Next_Master_Frame_Activity</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, uslc_scheduler.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = _USLCsched_Prepare_Next_Master_Frame_Activity &rArr; LMpol_Get_Next_Master_Beacon_Tx &rArr; LC_Unpark_Request &rArr; USLCparkMaster_Unpark_Request &rArr; DL_Unpark &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_get_device_state
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepare_next_master_frame_activity
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_check_slave_activity_start_next_frame
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Get_Next_Master_Tx_Activity
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Beacon_Tx
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Get_Emergency_Poll_Activity
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ACL
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Rx_Start
</UL>

<P><STRONG><a name="[12c]"></a>USLCsched_Rx_Start</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, uslc_scheduler.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = USLCsched_Rx_Start &rArr; _USLCsched_Prepare_Next_Master_Frame_Activity &rArr; LMpol_Get_Next_Master_Beacon_Tx &rArr; LC_Unpark_Request &rArr; USLCparkMaster_Unpark_Request &rArr; DL_Unpark &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Get_Active_Procedure
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Local_Piconet_Request
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Prepare_Next_Master_Frame_Activity
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM2
</UL>

<P><STRONG><a name="[11e]"></a>USLCsched_Prepare_Tx</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, uslc_scheduler.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = USLCsched_Prepare_Tx &rArr; BTtmt_Get_Next_Master_Tx_Activity &rArr; USLCtm_Test_Transmitter &rArr; LSLCpkt_Generate_ACL &rArr; LSLCpkt_Generate_POLL &rArr; _LSLCpkt_Prepare_Piconet_Channel_Access &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetRadioMode
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_get_device_state
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Get_Next_Master_Tx_Activity
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_prepareTx
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ACL
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_NULL
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM3
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM2
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKD_RX_HDR
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_NO_PKT_RCVD
</UL>

<P><STRONG><a name="[111]"></a>USLCsched_Tx_Complete</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uslc_scheduler.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = USLCsched_Tx_Complete &rArr; USLCchac_prepare_next_slave_frame_activity &rArr; USLCmss_State_Dispatcher &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepare_next_slave_frame_activity
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKA
</UL>

<P><STRONG><a name="[119]"></a>USLCsched_Process_Rx</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, uslc_scheduler.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = USLCsched_Process_Rx &rArr; USLCchac_Process_Rx &rArr; USLCmss_State_Dispatcher &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_get_device_state
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Process_Rx
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ACL
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM3
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM2
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKD
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_NO_PKT_RCVD
</UL>

<P><STRONG><a name="[15a]"></a>USLCsched_Initialise</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uslc_scheduler.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USLCsched_Initialise &rArr; BTtimer_Set_Slots &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Initialise
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCtm_Initialise
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Initialise
</UL>

<P><STRONG><a name="[12d]"></a>USLCsched_Get_Next_Frame_Activity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uslc_scheduler.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM2
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Rx_Connection
</UL>

<P><STRONG><a name="[12f]"></a>USLCsched_Set_Next_Frame_Activity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uslc_scheduler.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM2
</UL>

<P><STRONG><a name="[168]"></a>USLCsched_Get_Current_Frame_Activity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uslc_scheduler.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_prepare_next_master_frame_activity
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_Rx_RSSI_Channel
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_Rx_HEC_Event_Channel
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_No_Rx_Packet
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Rx_Connection
</UL>

<P><STRONG><a name="[152]"></a>_USLCsched_Get_Emergency_Poll_Activity</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, uslc_scheduler.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = _USLCsched_Get_Emergency_Poll_Activity &rArr; LSLCpkt_Generate_ACL &rArr; LSLCpkt_Generate_POLL &rArr; _LSLCpkt_Prepare_Piconet_Channel_Access &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetRadioMode
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_get_device_state
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Reset_Timer
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Interval_To_Next_Wakeup
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Sniff_Activation_On_Next_Frame
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ACL
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_NULL
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCsched_Prepare_Next_Master_Frame_Activity
</UL>

<P><STRONG><a name="[16b]"></a>LSLCacc_Set_Am_Addr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lslc_access.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_Master_Slave_Switch
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_FHS
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_Connection
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_PacketHeader
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_Return_To_Piconet
</UL>

<P><STRONG><a name="[485]"></a>LSLCacc_Prepare_Tx_ID</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LSLCacc_Prepare_Tx_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ID
</UL>

<P><STRONG><a name="[15f]"></a>LSLCacc_Prepare_Tx_Rx_FHS</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LSLCacc_Prepare_Tx_Rx_FHS
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Get_X
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Rx_FHS
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_EIR
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_FHS_Common_
</UL>

<P><STRONG><a name="[195]"></a>LSLCacc_Prepare_Tx_Rx_Encryption</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lslc_access.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_Return_To_Piconet
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCpkt_Prepare_Piconet_Channel_Access
</UL>

<P><STRONG><a name="[161]"></a>LSLCacc_Prepare_Tx_Rx_Connection</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LSLCacc_Prepare_Tx_Rx_Connection
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Get_Last_Frequency_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_Return_To_Piconet
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCpkt_Prepare_Piconet_Channel_Access
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_FHS_Common_
</UL>

<P><STRONG><a name="[164]"></a>_LSLCacc_Non_EDR_Pkt_Tx_Rx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lslc_access.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Rx_ID
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Rx_Connection
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Rx_FHS
</UL>

<P><STRONG><a name="[163]"></a>LSLCacc_Prepare_Rx_FHS</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSLCacc_Prepare_Rx_FHS &rArr; LSLCacc_Prepare_Tx_Rx_FHS
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Non_EDR_Pkt_Tx_Rx
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Tx_Rx_FHS
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_FHS
</UL>

<P><STRONG><a name="[166]"></a>_LSLCacc_Set_PTT</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _LSLCacc_Set_PTT
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Rx_Connection
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Rx_Return_To_Piconet
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Loopback_Testmode_Payload
</UL>

<P><STRONG><a name="[165]"></a>LSLCacc_Prepare_Rx_Return_To_Piconet</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LSLCacc_Prepare_Rx_Return_To_Piconet &rArr; _LSLCacc_Set_PTT
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Set_PTT
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_Return_To_Piconet
</UL>

<P><STRONG><a name="[167]"></a>LSLCacc_Prepare_Rx_Connection</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LSLCacc_Prepare_Rx_Connection &rArr; _LSLCacc_Set_PTT
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Get_Next_Frame_Activity
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsched_Get_Current_Frame_Activity
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Set_PTT
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Non_EDR_Pkt_Tx_Rx
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_Master_Slave_Switch
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_Connection
</UL>

<P><STRONG><a name="[196]"></a>LSLCacc_Build_AccessCode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lslc_access.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ID
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_ID
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_FHS
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_Return_To_Piconet
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_EIR
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCpkt_Prepare_Piconet_Channel_Access
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_FHS_Common_
</UL>

<P><STRONG><a name="[169]"></a>LSLCacc_Build_PacketHeader</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LSLCacc_Build_PacketHeader &rArr; BTq_Is_Queue_Not_Full
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Is_Queue_Not_Full
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Set_Am_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_POLL
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ACL
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_NULL
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_EIR
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_FHS_Common_
</UL>

<P><STRONG><a name="[16c]"></a>LSLCacc_Build_FHS_Payload_Ex</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LSLCacc_Build_FHS_Payload_Ex &rArr; hw_memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Device_FHS_Ref
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy32
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_FHS_Payload
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_FHS_Ex
</UL>

<P><STRONG><a name="[16f]"></a>LSLCacc_Build_FHS_Payload</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LSLCacc_Build_FHS_Payload &rArr; LSLCacc_Build_FHS_Payload_Ex &rArr; hw_memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_FHS_Payload_Ex
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_FHS
</UL>

<P><STRONG><a name="[170]"></a>LSLCacc_Build_ACL_Payload</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSLCacc_Build_ACL_Payload &rArr; hw_memcpy128
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Verify_Tester_Before_Tx
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy128
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ACL
</UL>

<P><STRONG><a name="[11a]"></a>LSLCacc_Enable_Transmitter</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LSLCacc_Enable_Transmitter &rArr; _LSLCacc_Move_CC_Shadow_to_Hardware &rArr; hw_memcpy128
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Get_Active_Tx_Device_Link_Ref
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Move_CC_Shadow_to_Hardware
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM3
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM2
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKD
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_NO_PKT_RCVD
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Extract_ACL_Payload
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Loopback_Testmode_Payload
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_OS_RECONNECTING_
</UL>

<P><STRONG><a name="[175]"></a>LSLCacc_Disable_Transmitter</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LSLCacc_Disable_Transmitter
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_get_device_state
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinq_Extract_FHS
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCparkMaster_Park
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpage_Page
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Inquiry
</UL>

<P><STRONG><a name="[112]"></a>LSLCacc_Enable_Receiver</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LSLCacc_Enable_Receiver &rArr; _LSLCacc_Move_CC_Shadow_to_Hardware &rArr; hw_memcpy128
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Update_Rx_Gain_If_Reqd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Get_Active_Rx_Device_Link_Ref
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Move_CC_Shadow_to_Hardware
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM0
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKD
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKA
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_OS_RECONNECTING_
</UL>

<P><STRONG><a name="[117]"></a>LSLCacc_Disable_Receiver</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lslc_access.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM3
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_TIM2
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKD
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_NO_PKT_RCVD
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Cancel
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Disable_Receiver
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Process_Rx
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_Cancel
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_OS_START_
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_OS_RECONNECTING_
</UL>

<P><STRONG><a name="[177]"></a>LSLCacc_Process_No_Rx_Packet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LSLCacc_Process_No_Rx_Packet &rArr; LSLCass_Record_No_Rx_Packet &rArr; LSLCass_Is_Assessment_State &rArr; LMafh_Is_Classification_Reporting
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_No_Rx_Packet
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Prepare_Tx_Complete_If_Same_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Process_No_Rx_Packet
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Extract_Packet
</UL>

<P><STRONG><a name="[17a]"></a>_LSLCacc_Extract_ACL_Payload</STRONG> (Thumb, 274 bytes, Stack size 64 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = _LSLCacc_Extract_ACL_Payload &rArr; _LSLCacc_Loopback_Testmode_Payload &rArr; LSLCpkt_Generate_NULL &rArr; _LSLCpkt_Prepare_Piconet_Channel_Access &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Enable_Transmitter
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Is_Extended_Inquiry_Response_Frame
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Verify_Tester_After_Rx
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy32
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy128
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Toggle_Rx_LT_Expected_Seqn
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Loopback_Testmode_Payload
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Prepare_Tx_Complete_If_Same_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Extract_Packet
</UL>

<P><STRONG><a name="[182]"></a>LSLCacc_Extract_Packet</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = LSLCacc_Extract_Packet &rArr; _LSLCacc_Extract_ACL_Payload &rArr; _LSLCacc_Loopback_Testmode_Payload &rArr; LSLCpkt_Generate_NULL &rArr; _LSLCpkt_Prepare_Piconet_Channel_Access &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Verify_Tester_After_Rx
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCstat_Log_Rx_Final_Status
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Extract_ACL_Payload
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Process_No_Rx_Packet
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Process_Rx_CRC
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Prepare_Tx_Complete_If_Same_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Process_Rx_Packet
</UL>

<P><STRONG><a name="[184]"></a>LSLCacc_Process_Rx_Header</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LSLCacc_Process_Rx_Header &rArr; LSLCass_Record_Rx_HEC_Event_Channel &rArr; LSLCass_Depreciate_Interference_Map_For_Minimum_Channels &rArr; LSLCASS_SET_FREQ_USED
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Wait_For_us
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtmt_Record_Rx_Packet_Error
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Get_Last_Frequency_Clock
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_Rx_HEC_Event_Channel
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Toggle_Rx_LT_Seqn
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Report_Device_Activity
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Process_Rx_Packet_Header
</UL>

<P><STRONG><a name="[189]"></a>LSLCacc_Extract_FHS_Payload</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LSLCacc_Extract_FHS_Payload &rArr; hw_memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy32
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USLCinq_Extract_FHS
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
</UL>

<P><STRONG><a name="[130]"></a>LSLCacc_Attempt_RSSI_Read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LSLCacc_Attempt_RSSI_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Update_Internal_RSSI_Cache
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Process_Rx_Packet
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_SYNC_DET
</UL>

<P><STRONG><a name="[18b]"></a>LSLCacc_Process_RSSI</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LSLCacc_Process_RSSI &rArr; LSLCass_Record_Rx_RSSI_Channel &rArr; LSLCass_Is_Assessment_State &rArr; LMafh_Is_Classification_Reporting
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Read_RSSI
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_Rx_RSSI_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Process_Rx_Packet_Header
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Process_Rx_Packet
</UL>

<P><STRONG><a name="[18e]"></a>LSLCfreq_Prepare_Frequency_Context</STRONG> (Thumb, 442 bytes, Stack size 48 bytes, lslc_freq.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetFrequency
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Set_X_for_Inquiry
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Get_Next_Frequency
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_Get_Frequency_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Early_Prepare_Frequency_FHS_Response_ID
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ID
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_ID
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_FHS
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_EIR
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCpkt_Prepare_Piconet_Channel_Access
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_FHS_Common_
</UL>

<P><STRONG><a name="[116]"></a>LSLCfreq_Early_Prepare_TxRxFreqs_SlavePageResponse</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lslc_freq.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSLCfreq_Early_Prepare_TxRxFreqs_SlavePageResponse &rArr; HWradio_SetFrequency &rArr; HWradio_Service
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetFrequency
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetRadioMode
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Get_TxRxFreqs_SlavePageResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_PKD
</UL>

<P><STRONG><a name="[162]"></a>LSLCfreq_Get_Last_Frequency_Clock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lslc_freq.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Process_Rx_Header
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Tx_Rx_Connection
</UL>

<P><STRONG><a name="[561]"></a>LSLChop_Execute_79_Hop_Kernel_Connection_Summation</STRONG> (Thumb, 286 bytes, Stack size 20 bytes, lslc_hop.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LSLChop_Execute_79_Hop_Kernel_Connection_Summation
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLChop_Execute_HSE_Connection_79
</UL>

<P><STRONG><a name="[146]"></a>LSLChop_Set_HSE_Engine</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lslc_hop.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_Dispatcher
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Cancel
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Initialise
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_OS_START_
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_OS_RECONNECTING_
</UL>

<P><STRONG><a name="[464]"></a>LSLChop_Get_Frequency_Channel_Connection</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lslc_hop.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_Get_Frequency_Channel
</UL>

<P><STRONG><a name="[18f]"></a>LSLChop_Get_Next_Frequency</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, lslc_hop.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LSLChop_Get_Next_Frequency &rArr; _LSLChop_Get_X_Page_Inquiry
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLChop_Get_X_Page_Inquiry
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Prepare_Frequency_Context
</UL>

<P><STRONG><a name="[160]"></a>LSLChop_Get_X</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lslc_hop.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Tx_Rx_FHS
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Get_TxRxFreqs_SlavePageResponse
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Get_Table_Frequency_Page_FHS_Response_ID
</UL>

<P><STRONG><a name="[191]"></a>LSLChop_Set_X_for_Inquiry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lslc_hop.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LSLChop_Set_X_for_Inquiry &rArr; _LSLChop_Get_X_Page_Inquiry
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLChop_Get_X_Page_Inquiry
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Prepare_Frequency_Context
</UL>

<P><STRONG><a name="[5b5]"></a>LSLChop_Get_rfSelection</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lslc_hop.o(fastcall), UNUSED)

<P><STRONG><a name="[523]"></a>LSLChop_Get_HSE_Engine</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lslc_hop.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinqScan_Cancel
</UL>

<P><STRONG><a name="[143]"></a>LSLCpkt_Prepare_Receiver_Return_To_Piconet</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lslc_pkt.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = LSLCpkt_Prepare_Receiver_Return_To_Piconet &rArr; LSLCfreq_Prepare_Rx_Frequency_R2P &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_AccessCode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Rx_Return_To_Piconet
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Tx_Rx_Connection
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Tx_Rx_Encryption
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Set_Am_Addr
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Prepare_Rx_Frequency_R2P
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_OS_START_
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_OS_RECONNECTING_
</UL>

<P><STRONG><a name="[52f]"></a>LSLCclk_Is_Safe_To_Read_Native_Clk</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lslc_clk.o(fastcall))
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCpageScan_Page_Scan
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Restore_BT_Clock
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8]"></a>_Abort_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_boot.o(SYS_Boot))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Abort_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Abort_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_boot.o(SYS_Boot)
</UL>
<P><STRONG><a name="[7]"></a>_Prefetch_Abort_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_boot.o(SYS_Boot))
<BR>[Address Reference Count : 1]<UL><LI> sys_boot.o(SYS_Boot)
</UL>
<P><STRONG><a name="[6]"></a>_SWI_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_boot.o(SYS_Boot))
<BR>[Address Reference Count : 1]<UL><LI> sys_boot.o(SYS_Boot)
</UL>
<P><STRONG><a name="[5]"></a>_Undefined_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_boot.o(SYS_Boot))
<BR>[Address Reference Count : 1]<UL><LI> sys_boot.o(SYS_Boot)
</UL>
<P><STRONG><a name="[c1]"></a>HWradio_Service</STRONG> (Thumb, 434 bytes, Stack size 32 bytes, hw_radio.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HWradio_Service
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFSyncWindow
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_use_lf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK3000_Write_RF_CH
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetFrequency
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetRadioMode
</UL>

<P><STRONG><a name="[dc]"></a>getATCommand</STRONG> (Thumb, 426 bytes, Stack size 80 bytes, devicebtj_handler.o(i.getATCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = getATCommand &rArr; bprintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bprintf
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_wdt_enable
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_data
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_data
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via BLX)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Loop
</UL>

<P><STRONG><a name="[de]"></a>getCommandData</STRONG> (Thumb, 1360 bytes, Stack size 88 bytes, devicebtj_handler.o(i.getCommandData))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = getCommandData &rArr; bprintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bprintf
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_data
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Initial
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via BLX)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via BLX)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Loop
</UL>

<P><STRONG><a name="[570]"></a>crc16</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, driver_flash.o(i.crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_lmecc_pointq
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lmecc_pointq_status
</UL>

<P><STRONG><a name="[243]"></a>_BTtst_Enter_Local_Loopback</STRONG> (Thumb, 124 bytes, Stack size 80 bytes, bt_test.o(i._BTtst_Enter_Local_Loopback))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _BTtst_Enter_Local_Loopback &rArr; LMaclctr_Alloc_Link &rArr; LC_Alloc_Link &rArr; DL_Alloc_Link &rArr; DL_Initialise_Link &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Alloc_Link
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Page_Scan_Cancel
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Inquiry_Scan_Cancel
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtst_Write_Loopback_Mode
</UL>

<P><STRONG><a name="[64]"></a>_BTtst_HCI_Callback_On_Data_Remote_Loopback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_test.o(i._BTtst_HCI_Callback_On_Data_Remote_Loopback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _BTtst_HCI_Callback_On_Data_Remote_Loopback &rArr; BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_test.o(.constdata)
</UL>
<P><STRONG><a name="[279]"></a>DeviceHid_Util_GetService</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, devicebtj_stack_hid.o(i.DeviceHid_Util_GetService))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeviceHid_Util_GetService
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Reset
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Handler
</UL>

<P><STRONG><a name="[27c]"></a>DeviceHid_Util_Handshake</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, devicebtj_stack_hid.o(i.DeviceHid_Util_Handshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = DeviceHid_Util_Handshake &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBtj_Adapter_Write
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHci_Common
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Handler
</UL>

<P><STRONG><a name="[27d]"></a>DeviceL2c_Context_From_Hci</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, devicebtj_stack_l2c.o(i.DeviceL2c_Context_From_Hci))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DeviceL2c_Context_From_Hci
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Packets
</UL>

<P><STRONG><a name="[27e]"></a>DeviceL2c_Context_From_Scid</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, devicebtj_stack_l2c.o(i.DeviceL2c_Context_From_Scid))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DeviceL2c_Context_From_Scid
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Packets
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Handler
</UL>

<P><STRONG><a name="[282]"></a>DeviceL2c_Open</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, devicebtj_stack_l2c.o(i.DeviceL2c_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = DeviceL2c_Open &rArr; DeviceHid_Handler &rArr; DeviceBtj_Event &rArr; Write_Extended_Inquiry_Response_Command &rArr; DeviceBtj_Adapter_Write &rArr; TRAhcit_UART_Rx_Char &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceHid_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Send_ConfigurationRsp
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceL2c_Packets
</UL>

<P><STRONG><a name="[293]"></a>DeviceRfc_Util_GetContext</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, devicebtj_stack_rfc.o(i.DeviceRfc_Util_GetContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DeviceRfc_Util_GetContext
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUih
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUa
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameDm
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameDisc
</UL>

<P><STRONG><a name="[294]"></a>DeviceRfc_Util_GetService</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, devicebtj_stack_rfc.o(i.DeviceRfc_Util_GetService))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DeviceRfc_Util_GetService
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameUih
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRfc_Recv_FrameSabm
</UL>

<P><STRONG><a name="[2d6]"></a>HWdelay_Calibrate_</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, hw_delay.o(i.HWdelay_Calibrate_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = HWdelay_Calibrate_
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags (via BLX)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags (via BLX)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Initialise
</UL>

<P><STRONG><a name="[50]"></a>LMscan_Inquiry_Scan_Complete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lmp_scan.o(i.LMscan_Inquiry_Scan_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = LMscan_Inquiry_Scan_Complete &rArr; LMscan_Sleep &rArr; LC_Sleep &rArr; USLCsleep_Request &rArr; USLCsleep_State_Dispatcher &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_scan.o(i.LMscan_Initialise)
</UL>
<P><STRONG><a name="[4f]"></a>LMscan_Page_Scan_Complete</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lmp_scan.o(i.LMscan_Page_Scan_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = LMscan_Page_Scan_Complete &rArr; LMscan_Sleep &rArr; LC_Sleep &rArr; USLCsleep_Request &rArr; USLCsleep_State_Dispatcher &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Free_Link
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_scan.o(i.LMscan_Initialise)
</UL>
<P><STRONG><a name="[40c]"></a>LMscan_Sleep</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lmp_scan.o(i.LMscan_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = LMscan_Sleep &rArr; LC_Sleep &rArr; USLCsleep_Request &rArr; USLCsleep_State_Dispatcher &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Interval_To_Next_Wakeup
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Get_Interval_To_Periodic_Inq
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Sleep
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Is_Sleep_Possible
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Get_Interval_To_Next_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Page_Scan_Complete
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Inquiry_Scan_Complete
</UL>

<P><STRONG><a name="[21f]"></a>_BTq_Initialise_All_Data_Queues</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tra_queue.o(i._BTq_Initialise_All_Data_Queues))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _BTq_Initialise_All_Data_Queues &rArr; BTq_Initialise_Data_Queue_Type
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Initialise_Data_Queue
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Initialise_Data_Queue_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Initialise
</UL>

<P><STRONG><a name="[223]"></a>_BTq_Initialise_Data_Queue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tra_queue.o(i._BTq_Initialise_Data_Queue))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Initialise_All_Data_Queues
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reset
</UL>

<P><STRONG><a name="[220]"></a>_BTq_Initialise_Variable_Chunk_Queue</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, tra_queue.o(i._BTq_Initialise_Variable_Chunk_Queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _BTq_Initialise_Variable_Chunk_Queue
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Initialise
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reset
</UL>

<P><STRONG><a name="[68]"></a>_Dispatch_HC_BB_Command</STRONG> (Thumb, 1638 bytes, Stack size 96 bytes, hc_cmd_disp.o(i._Dispatch_HC_BB_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 1740 + Unknown Stack Size
<LI>Call Chain = _Dispatch_HC_BB_Command &rArr; LMssp_Generate_New_Public_Private_Key_Pair &rArr; LMecc_Generate_ECC_Key &rArr; ECC_Point_Multiplication &rArr; ECC_Point_Multiplication_uint8 &rArr; LMecc_CB_ECC_Point_Multiplication_Complete &rArr; LMssp_CallBack_DH_Key_Complete &rArr; _LMssp_Send_LMP_DH_Key_Check &rArr; LMssp_Calculate_DHKEY_Check &rArr; F3 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYShalconfig_Device_Class_Was_Set
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Write_Scan_Enable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Request_HC_Reset
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Device_FHS_Ref
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Write_Scan_Activity
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Write_Page_Scan_Type
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Write_Inquiry_Scan_Type
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Read_Scan_Enable
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Read_Scan_Activity
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_LM_Write_Supported_IAC
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_LM_Read_Supported_IAC
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Peer_Bd_Addr
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_ACL_Handle
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Get_Inquiry_Result_Mode
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Send_Keypress_Notification
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_Read_Local_OOB_Data
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Generate_New_Public_Private_Key_Pair
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Create_New_Unit_Key
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Pause_Encryption_Req
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Write_Supervision_Timeout
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Read_Supervision_Timeout
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Write_Flush_Timeout
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_HCI_Flush
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_HCI_Enhanced_Flush
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMkeydb_LM_Write_Stored_Link_Key
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMkeydb_LM_Read_Stored_Link_Key
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMkeydb_LM_Delete_Stored_Link_Key
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Set_Inquiry_Result_Mode
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMfltr_LM_Set_Filter
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Read_Local_Name
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Change_Local_Name
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LM_Write_AFH_Channel_Assessment_Mode
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LM_Set_AFH_Channel_Classification
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_LM_Read_AFH_Channel_Assessment_Mode
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Write_Local_Device_Class
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Set_Local_EIR
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Set_Inquiry_Tx_Power
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Read_Local_Device_Class
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Local_EIR
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Inquiry_Response_Tx_Power
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Set_Host_Controller_To_Host_Flow_Control
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Host_Number_Of_Completed_Packets
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Host_Buffer_Size
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Set_Event_Mask
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Status_Event
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCIparam_Get_Uint24
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCIparam_Get_Uint16
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCIparam_Get_Bd_Addr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>_Dispatch_Info_Command</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, hc_cmd_disp.o(i._Dispatch_Info_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = _Dispatch_Info_Command &rArr; HCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>_Dispatch_Invalid_OGF_Command</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hc_cmd_disp.o(i._Dispatch_Invalid_OGF_Command))
<BR>[Address Reference Count : 1]<UL><LI> hc_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>_Dispatch_Link_Control_Command</STRONG> (Thumb, 1378 bytes, Stack size 120 bytes, hc_cmd_disp.o(i._Dispatch_Link_Control_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 1476 + Unknown Stack Size
<LI>Call Chain = _Dispatch_Link_Control_Command &rArr; LMssp_LM_User_Confirmation_Request_Reply &rArr; _LMssp_Send_LMP_DH_Key_Check &rArr; LMssp_Calculate_DHKEY_Check &rArr; F3 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Peer_Bd_Addr
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_ACL_Handle
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Passkey_Request_Reply
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Passkey_Request_Negative_Reply
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Confirmation_Request_Reply
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Confirmation_Request_Negative_Reply
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_Remote_OOB_Data_Request_Reply
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_Remote_OOB_Data_Request_Negative_Reply
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_IO_Capability_Request_Reply
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_IO_Capability_Request_Negative_Reply
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Set_Connection_Encryption
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Pin_Code_Request_Reply
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Pin_Code_Request_Negative_Reply
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Master_Link_Key
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Link_Key_Request_Reply
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Link_Key_Request_Negative_Reply
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Change_Connection_Link_Key
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_LM_Authentication_Requested
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Send_HC_Packet_Type_Changed_Event
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Validate_Change_Packet_Type
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Change_Validated_Packet_Type
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LM_Clock_Offset_Req
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Periodic_Inquiry
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Start
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Cancel
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Exit_Periodic_Inquiry_Mode
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Read_Remote_Supported_Features
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Read_Remote_Name_Cancel
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Read_Remote_Name
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Read_Remote_Extended_Features
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Disconnect_Req
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Req
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Reject
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Cancel
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Accept
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Read_Remote_Version
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Send_LMP_Packet_Type_Table_Req
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Status_Event
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCIparam_Get_Uint32
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCIparam_Get_Uint16
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCIparam_Get_Lap
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCIparam_Get_Bd_Addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>_Dispatch_Link_Policy_Command</STRONG> (Thumb, 666 bytes, Stack size 104 bytes, hc_cmd_disp.o(i._Dispatch_Link_Policy_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = _Dispatch_Link_Policy_Command &rArr; LMpolicy_LM_Sniff_Mode &rArr; LMpol_Adjust_ACL_Packet_Types_On_Link &rArr; LMpol_Adjust_Peer_Packet_Type &rArr; LMqos_Send_LMP_Preferred_Rate &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Peer_Bd_Addr
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_ACL_Handle
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_QOS_Setup
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Flow_Specification
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Sniff_Mode
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Role_Discovery
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Park_Mode
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Exit_Sniff_Mode
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Exit_Park_Mode
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Switch_Role
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Status_Event
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCIparam_Get_Uint32
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCIparam_Get_Uint16
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCIparam_Get_Bd_Addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>_Dispatch_Local_Status_Command</STRONG> (Thumb, 226 bytes, Stack size 72 bytes, hc_cmd_disp.o(i._Dispatch_Local_Status_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = _Dispatch_Local_Status_Command &rArr; HCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_ACL_Handle
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_LM_Read_AFH_Channel_Map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>_Dispatch_Test_Command</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, hc_cmd_disp.o(i._Dispatch_Test_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 1724 + Unknown Stack Size
<LI>Call Chain = _Dispatch_Test_Command &rArr; LMssp_LM_Write_SSP_Debug_Mode &rArr; LMssp_Generate_New_Public_Private_Key_Pair &rArr; LMecc_Generate_ECC_Key &rArr; ECC_Point_Multiplication &rArr; ECC_Point_Multiplication_uint8 &rArr; LMecc_CB_ECC_Point_Multiplication_Complete &rArr; LMssp_CallBack_DH_Key_Complete &rArr; _LMssp_Send_LMP_DH_Key_Check &rArr; LMssp_Calculate_DHKEY_Check &rArr; F3 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtst_Write_Loopback_Mode
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_Write_SSP_Debug_Mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[2c5]"></a>_Insert_Bd_Addr_In_PDU</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hc_event_gen.o(i._Insert_Bd_Addr_In_PDU))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Inquiry_Result_Event
</UL>

<P><STRONG><a name="[2d8]"></a>_HWlc_Clear_Jalapeno_Registers</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, hw_lc.o(i._HWlc_Clear_Jalapeno_Registers))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _HWlc_Clear_Jalapeno_Registers
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWlc_Initialise
</UL>

<P><STRONG><a name="[27]"></a>LMconnection_Connection_Timeout</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lmp_ch.o(i.LMconnection_Connection_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = LMconnection_Connection_Timeout &rArr; LMconnection_LM_Connection_Reject &rArr; LM_Encode_LMP_Not_Accepted_PDU &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Reject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_ch.o(i.LMconnection_Handle_Incoming_LM_Connection_Request)
</UL>
<P><STRONG><a name="[37b]"></a>LMconnection_Finalise_Connection_Setup</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, lmp_ch.o(i.LMconnection_Finalise_Connection_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = LMconnection_Finalise_Connection_Setup &rArr; LMqos_LM_Change_Packet_Type &rArr; LMqos_LM_Change_Validated_Packet_Type &rArr; LMqos_LM_Max_Slot_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Send_LMP_Encryption_Key_Size_Mask_Req
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Gen_Allowed_Packet_Types
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Change_Packet_Type
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Auto_Rate
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LM_Timing_Accuracy_Req
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Connection_Complete_Event_ACL
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Setup_Complete
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Not_Accepted
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Features_Res
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Features_Req
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Local_Setup_Complete
</UL>

<P><STRONG><a name="[384]"></a>LMconnection_Local_Setup_Complete</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lmp_ch.o(i.LMconnection_Local_Setup_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = LMconnection_Local_Setup_Complete &rArr; LMconnection_Finalise_Connection_Setup &rArr; LMqos_LM_Change_Packet_Type &rArr; LMqos_LM_Change_Validated_Packet_Type &rArr; LMqos_LM_Max_Slot_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_LMP_Connection_PDU
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Finalise_Connection_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Accept
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Encrypt_Complete
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Auth_Complete
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Not_Accepted
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Accepted
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Handle_Incoming_LM_Connection_Request
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Success
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Switch_Complete_Failure
</UL>

<P><STRONG><a name="[31]"></a>LMconnection_Switch_Complete_Failure</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lmp_ch.o(i.LMconnection_Switch_Complete_Failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = LMconnection_Switch_Complete_Failure &rArr; LMsec_peer_Resume_Encryption &rArr; _Start_Encryption &rArr; _Generate_Encryption_Key &rArr; LM_SecEng_Generate_Key_E3 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_SSP_Enabled_On_Link
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Resume_Encryption
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_Authentication
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Start_Classification_Reporting
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Activate_AFH
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_Accepted_PDU
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Role_Change_Event
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Local_Setup_Complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_ch.o(i.LMconnection_LM_Switch_Role_Complete)
</UL>
<P><STRONG><a name="[32]"></a>LMconnection_Switch_Complete_Success</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, lmp_ch.o(i.LMconnection_Switch_Complete_Success))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = LMconnection_Switch_Complete_Success &rArr; LMsec_peer_Resume_Encryption &rArr; _Start_Encryption &rArr; _Generate_Encryption_Key &rArr; LM_SecEng_Generate_Key_E3 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_SSP_Enabled_On_Link
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Resume_Encryption
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Init_Authentication
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Activate_AFH
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_Accepted_PDU
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Role_Change_Event
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Local_Setup_Complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_ch.o(i.LMconnection_LM_Switch_Role_Complete)
</UL>
<P><STRONG><a name="[39d]"></a>_LMconnection_Create_ACL_Connection</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, lmp_ch.o(i._LMconnection_Create_ACL_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _LMconnection_Create_ACL_Connection &rArr; LC_Create_Connection &rArr; USLCpage_Request &rArr; LSLCfreq_Assign_Frequency_Kernel &rArr; LSLCafh_Assign_AFH_Kernel &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Free_Link
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Alloc_Link
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Create_Connection
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Write_Bd_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Read_Remote_Name
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Req
</UL>

<P><STRONG><a name="[39c]"></a>_LMconnection_Validate_ACL_Admission</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lmp_ch.o(i._LMconnection_Validate_ACL_Admission))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _LMconnection_Validate_ACL_Admission &rArr; LMaclctr_Find_Bd_Addr &rArr; LMutils_Bd_Addr_Match
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Bd_Addr_Match
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Bd_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Read_Remote_Name
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Req
</UL>

<P><STRONG><a name="[37a]"></a>_Send_HC_Connection_Complete_Event_ACL</STRONG> (Thumb, 94 bytes, Stack size 72 bytes, lmp_ch.o(i._Send_HC_Connection_Complete_Event_ACL))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _Send_HC_Connection_Complete_Event_ACL &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Cancel
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Page_Complete_ERROR
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Disconnect_Acl
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Finalise_Connection_Setup
</UL>

<P><STRONG><a name="[379]"></a>_Send_HC_Create_Connection_Cancel_Command_Complete_Event</STRONG> (Thumb, 34 bytes, Stack size 48 bytes, lmp_ch.o(i._Send_HC_Create_Connection_Cancel_Command_Complete_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = _Send_HC_Create_Connection_Cancel_Command_Complete_Event &rArr; HCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Cancel
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Disconnect_Acl
</UL>

<P><STRONG><a name="[375]"></a>_Send_HC_Read_Remote_Name_Cancel_Command_Complete_Event</STRONG> (Thumb, 32 bytes, Stack size 48 bytes, lmp_ch.o(i._Send_HC_Read_Remote_Name_Cancel_Command_Complete_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = _Send_HC_Read_Remote_Name_Cancel_Command_Complete_Event &rArr; HCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Read_Remote_Name_Cancel
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Disconnect_Acl
</UL>

<P><STRONG><a name="[38e]"></a>_Send_HC_Remote_Extended_Features_Complete_Event</STRONG> (Thumb, 64 bytes, Stack size 64 bytes, lmp_ch.o(i._Send_HC_Remote_Extended_Features_Complete_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _Send_HC_Remote_Extended_Features_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Not_Accepted
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Features_Res_Ext
</UL>

<P><STRONG><a name="[38b]"></a>_Send_HC_Remote_Features_Complete_Event</STRONG> (Thumb, 28 bytes, Stack size 64 bytes, lmp_ch.o(i._Send_HC_Remote_Features_Complete_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _Send_HC_Remote_Features_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Not_Accepted
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Features_Res
</UL>

<P><STRONG><a name="[376]"></a>_Send_HC_Remote_Name_Request_Complete_Event</STRONG> (Thumb, 76 bytes, Stack size 72 bytes, lmp_ch.o(i._Send_HC_Remote_Name_Request_Complete_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _Send_HC_Remote_Name_Request_Complete_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Read_Remote_Name_Cancel
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Page_Complete_ERROR
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Not_Accepted
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Name_Res
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Disconnect_Acl
</UL>

<P><STRONG><a name="[386]"></a>_Send_LMP_Connection_PDU</STRONG> (Thumb, 176 bytes, Stack size 72 bytes, lmp_ch.o(i._Send_LMP_Connection_PDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = _Send_LMP_Connection_PDU &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Piconet_Clock_Ex
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Read_Local_Slot_Offset
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Connected_As_SCO_Master
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Switch_Role
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Read_Remote_Supported_Features
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Connection_Accept
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Switch_Req
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Page_Complete_NO_ERROR
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Switch_Req
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Setup_Complete
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Features_Res_Ext
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Features_Res
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Features_Req
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Handle_Incoming_LM_Connection_Request
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_Local_Setup_Complete
</UL>

<P><STRONG><a name="[3a5]"></a>_Send_LMP_Features_Req_Ext</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lmp_ch.o(i._Send_LMP_Features_Req_Ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _Send_LMP_Features_Req_Ext &rArr; LM_Encode_LMP_PDU_Fully_Encoded &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU_Fully_Encoded
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memset8
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Read_Remote_Extended_Features
</UL>

<P><STRONG><a name="[38a]"></a>_Send_LMP_Features_Res_Ext</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lmp_ch.o(i._Send_LMP_Features_Res_Ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _Send_LMP_Features_Res_Ext &rArr; LM_Encode_LMP_PDU_Fully_Encoded &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU_Fully_Encoded
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memset8
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Features_Req_Ext
</UL>

<P><STRONG><a name="[38d]"></a>_Send_LMP_Name_Req</STRONG> (Thumb, 28 bytes, Stack size 64 bytes, lmp_ch.o(i._Send_LMP_Name_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _Send_LMP_Name_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Read_Remote_Name
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Not_Accepted
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Name_Res
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Features_Res_Ext
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LMP_Features_Res
</UL>

<P><STRONG><a name="[3b2]"></a>_LMdisp_Clear_Any_Associated_Message_Timer</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, lmp_cmd_disp.o(i._LMdisp_Clear_Any_Associated_Message_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _LMdisp_Clear_Any_Associated_Message_Timer &rArr; LMtmr_Clear_Timer &rArr; LMtmr_Delist_Timer
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Command_Dispatcher
</UL>

<P><STRONG><a name="[36]"></a>LMinq_Inquiry_Complete_Success</STRONG> (Thumb, 192 bytes, Stack size 80 bytes, lmp_inquiry.o(i.LMinq_Inquiry_Complete_Success))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = LMinq_Inquiry_Complete_Success &rArr; LC_Sleep &rArr; USLCsleep_Request &rArr; USLCsleep_State_Dispatcher &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Interval_To_Next_Wakeup
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Sleep
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Is_Sleep_Possible
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Read_Scan_Enable
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMscan_Get_Interval_To_Next_Scan
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_inquiry.o(i.LMinq_Inquiry_Complete)
</UL>
<P><STRONG><a name="[37]"></a>LMinq_Inquiry_Result_Handler</STRONG> (Thumb, 364 bytes, Stack size 112 bytes, lmp_inquiry.o(i.LMinq_Inquiry_Result_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = LMinq_Inquiry_Result_Handler &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Bd_Addr_Match
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Inquiry_Cancel
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Set_Bd_Addr
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMfltr_Inquiry_Filter_Check
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_inquiry.o(i.LMinq_Inquiry_Result)
</UL>
<P><STRONG><a name="[38]"></a>LMinq_Period_Interval_Timeout</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lmp_inquiry.o(i.LMinq_Period_Interval_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = LMinq_Period_Interval_Timeout &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Inquiry_Cancel
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Inquiry_Request
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Get_Interval_Rand
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lmp_inquiry.o(i.LMinq_Periodic_Inquiry)
<LI> lmp_inquiry.o(i.LMinq_Period_Interval_Timeout)
</UL>
<P><STRONG><a name="[3c6]"></a>_Get_Interval_Rand</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lmp_inquiry.o(i._Get_Interval_Rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = _Get_Interval_Rand &rArr; SYSrand_Get_Rand &rArr; SYSrand_Get_Rand_R
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Periodic_Inquiry
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMinq_Period_Interval_Timeout
</UL>

<P><STRONG><a name="[3d6]"></a>LMpol_Filter_Multislot_To_Bandwidth</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lmp_link_policy.o(i.LMpol_Filter_Multislot_To_Bandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = LMpol_Filter_Multislot_To_Bandwidth &rArr; LMpol_Get_Interval_To_Next_Wakeup &rArr; LC_Get_Piconet_Clock_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Interval_To_Next_Wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Next_Slave_Sniff_Activity
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Get_Link_Tx_Activity
</UL>

<P><STRONG><a name="[39]"></a>LMpol_Flush_Execute</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lmp_link_policy.o(i.LMpol_Flush_Execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = LMpol_Flush_Execute &rArr; _LMpol_Flush_L2CAP_Packet &rArr; BTq_Ack_Last_Dequeued &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Flush_Link_Buffer
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Flush_Auto_Link_Buffer
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Flush_L2CAP_Packet
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lmp_link_policy.o(i.LMpol_Ack_Last_Tx_Packet)
<LI> lmp_link_policy.o(i.LMpol_Get_Next_Slave_Rx_Activity)
<LI> lmp_link_policy.o(i._LMpol_Get_Link_Tx_Activity)
</UL>
<P><STRONG><a name="[3d9]"></a>_LMpol_Flush_L2CAP_Packet</STRONG> (Thumb, 196 bytes, Stack size 104 bytes, lmp_link_policy.o(i._LMpol_Flush_L2CAP_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _LMpol_Flush_L2CAP_Packet &rArr; BTq_Ack_Last_Dequeued &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_BB_Dequeue_Next
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Enable_L2CAP_Traffic
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Disable_L2CAP_Traffic
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Flush_Timeout
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Flush_Execute
</UL>

<P><STRONG><a name="[13d]"></a>_LMpol_Get_Link_Tx_Activity</STRONG> (Thumb, 572 bytes, Stack size 24 bytes, lmp_link_policy.o(i._LMpol_Get_Link_Tx_Activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = _LMpol_Get_Link_Tx_Activity &rArr; LMpol_Set_Flush_Timeout &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_BB_Dequeue_Next
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Disable_L2CAP_Traffic
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Reset_Flush_Timeout
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Set_Flush_Timeout
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Filter_Multislot_To_Bandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Tx_Activity
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Tx_Activity
</UL>

<P><STRONG><a name="[141]"></a>_LMpol_Get_Master_Broadcast_Tx</STRONG> (Thumb, 562 bytes, Stack size 24 bytes, lmp_link_policy.o(i._LMpol_Get_Master_Broadcast_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _LMpol_Get_Master_Broadcast_Tx &rArr; BTq_Ack_Last_Dequeued &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_BB_Dequeue_Next
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Toggle_Tx_LT_Seqn
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Scan_For_Pending_Broadcast
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Beacon_Tx
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Tx_Activity
</UL>

<P><STRONG><a name="[13f]"></a>_LMpol_Get_Next_Master_Sniff_Activity</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, lmp_link_policy.o(i._LMpol_Get_Next_Master_Sniff_Activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _LMpol_Get_Next_Master_Sniff_Activity &rArr; LMpol_Sleep &rArr; LC_Sleep &rArr; USLCsleep_Request &rArr; USLCsleep_State_Dispatcher &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Interval_To_Next_Wakeup
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Timing_Equation_Satisfied
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Piconet_Reset_Delta_Slots
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Sleep
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Adjust_Wakeup_Slot_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Master_Tx_Activity
</UL>

<P><STRONG><a name="[3dc]"></a>_LMpol_Get_Next_Slave_Sniff_Activity</STRONG> (Thumb, 498 bytes, Stack size 40 bytes, lmp_link_policy.o(i._LMpol_Get_Next_Slave_Sniff_Activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _LMpol_Get_Next_Slave_Sniff_Activity &rArr; LC_Wakeup &rArr; USLCr2p_Request &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Interval_To_Next_Wakeup
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_State_Dispatcher
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_BB_Dequeue_Next
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Piconet_Clock_Ex
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Piconet_Reset_Slots
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Timing_Equation_Satisfied
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Piconet_Reset_Delta_Slots
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_Get_Search_Window_Frames
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Wakeup
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Sleep
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Adjust_Wakeup_Slot_Time
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Filter_Multislot_To_Bandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Get_Next_Slave_Rx_Activity
</UL>

<P><STRONG><a name="[47]"></a>LMpolicy_Access_Window_Complete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lmp_link_policy_protocol.o(i.LMpolicy_Access_Window_Complete))
<BR>[Address Reference Count : 1]<UL><LI> lmp_link_policy_protocol.o(i.LMpolicy_Initialise)
</UL>
<P><STRONG><a name="[3e7]"></a>LMpolicy_Are_Links_Being_Parked_UnParked</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lmp_link_policy_protocol.o(i.LMpolicy_Are_Links_Being_Parked_UnParked))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMpolicy_Are_Links_Being_Parked_UnParked
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Extract_Park_Parameters
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Derive_Park_Parameters
</UL>

<P><STRONG><a name="[3e6]"></a>LMpolicy_Derive_Park_Parameters</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, lmp_link_policy_protocol.o(i.LMpolicy_Derive_Park_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = LMpolicy_Derive_Park_Parameters &rArr; LC_Get_Piconet_Clock_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Piconet_Clock_Ex
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Are_Links_Being_Parked_UnParked
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Park_Mode
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Park_Req
</UL>

<P><STRONG><a name="[3e8]"></a>LMpolicy_Derive_Sniff_Parameters</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, lmp_link_policy_protocol.o(i.LMpolicy_Derive_Sniff_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = LMpolicy_Derive_Sniff_Parameters &rArr; LC_Get_Piconet_Clock_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Connected_As_Scatternet
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Piconet_Clock_Ex
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Master_Derive_D_Sniff
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Sniff_Mode
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Sniff_Req
</UL>

<P><STRONG><a name="[41]"></a>LMpolicy_Enter_Park_Mode_Complete_Handler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lmp_link_policy_protocol.o(i.LMpolicy_Enter_Park_Mode_Complete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LMpolicy_Enter_Park_Mode_Complete_Handler &rArr; _Send_HC_Mode_Change_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_Device_Index
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Mode_Change_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_link_policy_protocol.o(i.LMpolicy_Enter_Park_Mode_Complete)
</UL>
<P><STRONG><a name="[42]"></a>LMpolicy_Exit_Park_Mode_Complete_Handler</STRONG> (Thumb, 368 bytes, Stack size 80 bytes, lmp_link_policy_protocol.o(i.LMpolicy_Exit_Park_Mode_Complete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = LMpolicy_Exit_Park_Mode_Complete_Handler &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Decr_Links_In_Low_Power
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Unpark_Rollback
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Unpark_Commit
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Mode_Change_Event
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Remove_UnPark_Link
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Insert_UnPark_Link
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_link_policy_protocol.o(i.LMpolicy_Exit_Park_Mode_Complete)
</UL>
<P><STRONG><a name="[3ec]"></a>LMpolicy_Extract_Park_Parameters</STRONG> (Thumb, 372 bytes, Stack size 104 bytes, lmp_link_policy_protocol.o(i.LMpolicy_Extract_Park_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LMpolicy_Extract_Park_Parameters &rArr; LMpolicy_Are_Links_Being_Parked_UnParked
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Are_Links_Being_Parked_UnParked
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Park_Req
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Modify_Beacon
</UL>

<P><STRONG><a name="[3ed]"></a>LMpolicy_Extract_Sniff_Parameters</STRONG> (Thumb, 548 bytes, Stack size 32 bytes, lmp_link_policy_protocol.o(i.LMpolicy_Extract_Sniff_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LMpolicy_Extract_Sniff_Parameters &rArr; LC_Get_Piconet_Clock_Ex
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Connected_As_Scatternet
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Piconet_Clock_Ex
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Timer_On_Timing_Equation
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Sniff_Req
</UL>

<P><STRONG><a name="[3e5]"></a>LMpolicy_Free_Ar_Addr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lmp_link_policy_protocol.o(i.LMpolicy_Free_Ar_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMpolicy_Free_Ar_Addr
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Free_u_int8_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Not_Accepted
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Accepted
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Clear_Link_If_Parked
</UL>

<P><STRONG><a name="[3e4]"></a>LMpolicy_Free_Pm_Addr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lmp_link_policy_protocol.o(i.LMpolicy_Free_Pm_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMpolicy_Free_Pm_Addr
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Free_u_int8_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Not_Accepted
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Accepted
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Clear_Link_If_Parked
</UL>

<P><STRONG><a name="[4a]"></a>LMpolicy_LMP_Sniff_Req_Accepted_Ack_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lmp_link_policy_protocol.o(i.LMpolicy_LMP_Sniff_Req_Accepted_Ack_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = LMpolicy_LMP_Sniff_Req_Accepted_Ack_Handler &rArr; LMpolicy_Enter_Sniff_Mode &rArr; _Send_HC_Mode_Change_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Enter_Sniff_Mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_link_policy_protocol.o(i.LMpolicy_LMP_Sniff_Req_Accepted_Ack)
</UL>
<P><STRONG><a name="[4b]"></a>LMpolicy_LMP_Unpark_Pmaddr_Accepted_Ack_Hanlder</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lmp_link_policy_protocol.o(i.LMpolicy_LMP_Unpark_Pmaddr_Accepted_Ack_Hanlder))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = LMpolicy_LMP_Unpark_Pmaddr_Accepted_Ack_Hanlder &rArr; LMconnection_LM_Disconnect &rArr; LMconnection_Send_LMP_Detach &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Disconnect
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Enable_L2CAP_Traffic
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Mode_Change_Event
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Remove_UnPark_Link
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_link_policy_protocol.o(i.LMpolicy_LMP_Unpark_Pmaddr_Accepted_Ack)
</UL>
<P><STRONG><a name="[4c]"></a>LMpolicy_LMP_Unsniff_Req_Accepted_Ack_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lmp_link_policy_protocol.o(i.LMpolicy_LMP_Unsniff_Req_Accepted_Ack_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = LMpolicy_LMP_Unsniff_Req_Accepted_Ack_Handler &rArr; LMpolicy_LM_Return_From_Sniff &rArr; LMpol_Adjust_ACL_Packet_Types_On_Link &rArr; LMpol_Adjust_Peer_Packet_Type &rArr; LMqos_Send_LMP_Preferred_Rate &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Return_From_Sniff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_link_policy_protocol.o(i.LMpolicy_LMP_Unsniff_Req_Accepted_Ack)
</UL>
<P><STRONG><a name="[3ef]"></a>LMpolicy_LM_Return_From_Sniff</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, lmp_link_policy_protocol.o(i.LMpolicy_LM_Return_From_Sniff))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = LMpolicy_LM_Return_From_Sniff &rArr; LMpol_Adjust_ACL_Packet_Types_On_Link &rArr; LMpol_Adjust_Peer_Packet_Type &rArr; LMqos_Send_LMP_Preferred_Rate &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCsleep_Cancel
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Is_Sleep_Request_Pending
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Get_Active_Procedure
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Connected_As_Scatternet
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Decr_Links_In_Low_Power
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconnection_LM_Disconnect
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Wakeup
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Adjust_Wakeup_Slot_Time
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Adjust_ACL_Packet_Types_On_Link
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Adjust_Supervision_Timeout_On_Link
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Send_HC_Mode_Change_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Unsniff_Req
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Not_Accepted
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Accepted
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Unsniff_Req_Accepted_Ack_Handler
</UL>

<P><STRONG><a name="[3e9]"></a>LMpolicy_Master_Derive_D_Sniff</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, lmp_link_policy_protocol.o(i.LMpolicy_Master_Derive_D_Sniff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LMpolicy_Master_Derive_D_Sniff
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Derive_Sniff_Parameters
</UL>

<P><STRONG><a name="[46]"></a>LMpolicy_Slave_Init_Unpark</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lmp_link_policy_protocol.o(i.LMpolicy_Slave_Init_Unpark))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LMpolicy_Slave_Init_Unpark &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Set_Timer
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMaclctr_Find_ARADDR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_link_policy_protocol.o(i.LMpolicy_Initialise)
</UL>
<P><STRONG><a name="[4d]"></a>LMpolicy_Slave_Init_Unpark_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lmp_link_policy_protocol.o(i.LMpolicy_Slave_Init_Unpark_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = LMpolicy_Slave_Init_Unpark_Handler &rArr; _LMpol_Execute_Unpark_Request &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Execute_Unpark_Request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_link_policy_protocol.o(i.LMpolicy_Slave_Init_Unpark)
</UL>
<P><STRONG><a name="[48]"></a>_LMpolicy_Enter_Park_Mode</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, lmp_link_policy_protocol.o(i._LMpolicy_Enter_Park_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = _LMpolicy_Enter_Park_Mode &rArr; LC_Park_Request &rArr; USLCparkSlave_Park_Request &rArr; USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMtmr_Clear_Timer
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Clear_Device_State
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Get_Piconet_Clock_Ex
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Timer_On_Timing_Equation
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Piconet_Reset_Delta_Slots
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Park_Request
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Remove_Park_Link
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Insert_UnPark_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_LMP_Park_Accepted_Ack_Timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lmp_link_policy_protocol.o(i.LMpolicy_LMP_Accepted)
<LI> lmp_link_policy_protocol.o(i.LMpolicy_LMP_Park_Accepted_Ack)
</UL>
<P><STRONG><a name="[3f7]"></a>_LMpolicy_Execute_Park_Request</STRONG> (Thumb, 130 bytes, Stack size 88 bytes, lmp_link_policy_protocol.o(i._LMpolicy_Execute_Park_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = _LMpolicy_Execute_Park_Request &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Disable_L2CAP_Traffic
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Alloc_u_int8_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Service_Park_Links
</UL>

<P><STRONG><a name="[3f0]"></a>_LMpolicy_Insert_Park_Link</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, lmp_link_policy_protocol.o(i._LMpolicy_Insert_Park_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _LMpolicy_Insert_Park_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Park_Mode
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Park_Req
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Accepted
</UL>

<P><STRONG><a name="[3eb]"></a>_LMpolicy_Insert_UnPark_Link</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, lmp_link_policy_protocol.o(i._LMpolicy_Insert_UnPark_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _LMpolicy_Insert_UnPark_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Exit_Park_Mode
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Unpark_Pm_Addr_Req
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Enter_Park_Mode
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Exit_Park_Mode_Complete_Handler
</UL>

<P><STRONG><a name="[49]"></a>_LMpolicy_LMP_Park_Accepted_Ack_Timeout</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lmp_link_policy_protocol.o(i._LMpolicy_LMP_Park_Accepted_Ack_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _LMpolicy_LMP_Park_Accepted_Ack_Timeout &rArr; _LMpolicy_Enter_Park_Mode &rArr; LC_Park_Request &rArr; USLCparkSlave_Park_Request &rArr; USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags (via BLX)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags (via BLX)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Enter_Park_Mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_link_policy_protocol.o(i.LMpolicy_LMP_Park_Req)
</UL>
<P><STRONG><a name="[3e1]"></a>_LMpolicy_Remove_Park_Link</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lmp_link_policy_protocol.o(i._LMpolicy_Remove_Park_Link))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Service_Park_Links
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Exit_Park_Mode
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Not_Accepted
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Remove_Link
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Clear_Link_If_Parked
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpolicy_Enter_Park_Mode
</UL>

<P><STRONG><a name="[3e2]"></a>_LMpolicy_Remove_UnPark_Link</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lmp_link_policy_protocol.o(i._LMpolicy_Remove_UnPark_Link))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Service_Park_Links
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Accepted
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Remove_Link
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Clear_Link_If_Parked
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Unpark_Pmaddr_Accepted_Ack_Hanlder
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Exit_Park_Mode_Complete_Handler
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Execute_Unpark_Request
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Unpark_Timeout
</UL>

<P><STRONG><a name="[3e3]"></a>_Send_HC_Mode_Change_Event</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, lmp_link_policy_protocol.o(i._Send_HC_Mode_Change_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _Send_HC_Mode_Change_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Enable_L2CAP_Traffic
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Sniff_Req
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Not_Accepted
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Accepted
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Clear_Link_If_Parked
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Return_From_Sniff
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Unpark_Pmaddr_Accepted_Ack_Hanlder
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Exit_Park_Mode_Complete_Handler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Enter_Park_Mode_Complete_Handler
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMpol_Execute_Unpark_Request
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Unpark_Timeout
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_Enter_Sniff_Mode
</UL>

<P><STRONG><a name="[3f2]"></a>_Send_LMP_Sniff_Req</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, lmp_link_policy_protocol.o(i._Send_LMP_Sniff_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _Send_LMP_Sniff_Req &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LM_Sniff_Mode
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpolicy_LMP_Sniff_Req
</UL>

<P><STRONG><a name="[424]"></a>_AgeRepeatAttemptsList</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lmp_sec_core.o(i._AgeRepeatAttemptsList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _AgeRepeatAttemptsList &rArr; BTtimer_Get_Native_Clock &rArr; HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Get_Native_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_RecordAuthFailure
</UL>

<P><STRONG><a name="[52d]"></a>USLCmss_Update_Ctrl_State_</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uslc_master_slave_switch.o(i.USLCmss_Update_Ctrl_State_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USLCmss_Update_Ctrl_State_
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCmss_State_Dispatcher
</UL>

<P><STRONG><a name="[ad]"></a>USLCr2p_State_OS_RECONNECTING_</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, uslc_return_to_piconet.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = USLCr2p_State_OS_RECONNECTING_ &rArr; LSLCpkt_Prepare_Receiver_Return_To_Piconet &rArr; LSLCfreq_Prepare_Rx_Frequency_R2P &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetRadioMode
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Enable_Transmitter
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Enable_Receiver
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Write_BT_Clk_Avoid_Race
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Disable_Receiver
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Finish
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_Get_Search_Window_Frames
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_Return_To_Piconet
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Bt_Clk_Avoid_Race
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Set_HSE_Engine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uslc_return_to_piconet.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>USLCr2p_State_OS_START_</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, uslc_return_to_piconet.o(i.USLCr2p_State_OS_START_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = USLCr2p_State_OS_START_ &rArr; LSLCpkt_Prepare_Receiver_Return_To_Piconet &rArr; LSLCfreq_Prepare_Rx_Frequency_R2P &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_SetRadioMode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Disable_Receiver
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCchac_Procedure_Start
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCr2p_Get_Search_Window_Frames
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_Return_To_Piconet
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Bt_Clk_Avoid_Race
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Set_HSE_Engine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uslc_return_to_piconet.o(.constdata)
</UL>
<P><STRONG><a name="[179]"></a>_LSLCacc_Prepare_Tx_Complete_If_Same_Device</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _LSLCacc_Prepare_Tx_Complete_If_Same_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Extract_Packet
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Extract_ACL_Payload
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Process_No_Rx_Packet
</UL>

<P><STRONG><a name="[17e]"></a>_LSLCacc_Process_Rx_CRC</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, lslc_access.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _LSLCacc_Process_Rx_CRC &rArr; LSLCass_Record_Rx_CRC_Event_Channel &rArr; LSLCass_Is_Assessment_State &rArr; LMafh_Is_Classification_Reporting
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Is_Queue_Empty
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USLCinq_Is_Extended_Inquiry_Response_Frame
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCass_Record_Rx_CRC_Event_Channel
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Toggle_Rx_LT_Expected_Seqn
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Inc_Rx_ACL_Data_Packets_Nacked
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Extract_Packet
</UL>

<P><STRONG><a name="[17b]"></a>_LSLCacc_Loopback_Testmode_Payload</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, lslc_access.o(i._LSLCacc_Loopback_Testmode_Payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = _LSLCacc_Loopback_Testmode_Payload &rArr; LSLCpkt_Generate_NULL &rArr; _LSLCpkt_Prepare_Piconet_Channel_Access &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Enable_Transmitter
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Use_Local_Tx_Descriptor
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Set_PTT
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_NULL
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LSLCacc_Extract_ACL_Payload
</UL>

<P><STRONG><a name="[174]"></a>_LSLCacc_Move_CC_Shadow_to_Hardware</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lslc_access.o(i._LSLCacc_Move_CC_Shadow_to_Hardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _LSLCacc_Move_CC_Shadow_to_Hardware &rArr; hw_memcpy128
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy128
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Enable_Transmitter
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Enable_Receiver
</UL>

<P><STRONG><a name="[b3]"></a>_LSLChop_Execute_HSE_Connection_23</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, lslc_hop.o(i._LSLChop_Execute_HSE_Connection_23))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _LSLChop_Execute_HSE_Connection_23
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lslc_hop.o(fastcall)
</UL>
<P><STRONG><a name="[af]"></a>_LSLChop_Execute_HSE_Connection_79</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lslc_hop.o(i._LSLChop_Execute_HSE_Connection_79))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = _LSLChop_Execute_HSE_Connection_79 &rArr; LSLChop_Execute_79_Hop_Kernel_Connection_Summation
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Execute_79_Hop_Kernel_Connection_Summation
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lslc_hop.o(fastcall)
</UL>
<P><STRONG><a name="[b2]"></a>_LSLChop_Execute_HSE_Connection_Hardware</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lslc_hop.o(i._LSLChop_Execute_HSE_Connection_Hardware))
<BR>[Address Reference Count : 1]<UL><LI> lslc_hop.o(fastcall)
</UL>
<P><STRONG><a name="[47b]"></a>_LSLChop_Execute_HSE_Non_Connection</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, lslc_hop.o(i._LSLChop_Execute_HSE_Non_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _LSLChop_Execute_HSE_Non_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLChop_Build_Frequency_Table
</UL>

<P><STRONG><a name="[b1]"></a>_LSLChop_Execute_HSE_Reduced</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lslc_hop.o(i._LSLChop_Execute_HSE_Reduced))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _LSLChop_Execute_HSE_Reduced
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lslc_hop.o(fastcall)
</UL>
<P><STRONG><a name="[b0]"></a>_LSLChop_Execute_HSE_Single_Connection</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lslc_hop.o(i._LSLChop_Execute_HSE_Single_Connection))
<BR>[Address Reference Count : 1]<UL><LI> lslc_hop.o(fastcall)
</UL>
<P><STRONG><a name="[482]"></a>LSLCpkt_Generate_FHS_Common_</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lslc_pkt.o(i.LSLCpkt_Generate_FHS_Common_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = LSLCpkt_Generate_FHS_Common_ &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Set_Tx_Power_Level
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_PacketHeader
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_AccessCode
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Tx_Rx_Connection
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Tx_Rx_FHS
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Prepare_Frequency_Context
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_FHS_Ex
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_FHS
</UL>

<P><STRONG><a name="[47e]"></a>_LSLCpkt_Prepare_Piconet_Channel_Access</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, lslc_pkt.o(i._LSLCpkt_Prepare_Piconet_Channel_Access))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _LSLCpkt_Prepare_Piconet_Channel_Access &rArr; LSLCfreq_Prepare_Frequency_Context &rArr; LSLCafh_Get_Frequency_Channel &rArr; hw_memcpy8
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Set_Tx_Power_Level
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Local_Device_Ref
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Build_AccessCode
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Tx_Rx_Connection
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCacc_Prepare_Tx_Rx_Encryption
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Prepare_Frequency_Connection
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCfreq_Prepare_Frequency_Context
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_Master_Slave_Switch
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Prepare_Receiver_Connection
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_POLL
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_ACL
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCpkt_Generate_NULL
</UL>

<P><STRONG><a name="[246]"></a>DL_Initialise_Link</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, dl_dev_impl.o(i.DL_Initialise_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = DL_Initialise_Link &rArr; DL_Reset_New_Connection &rArr; DL_Assign_Piconet_Index &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Reset_New_Connection
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSconfig_Get_Device_Links_Location
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Initialise_All
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Alloc_Link
</UL>

<P><STRONG><a name="[354]"></a>LMafh_Update_Slave_AFH_If_Required</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lmp_afh.o(i.LMafh_Update_Slave_AFH_If_Required))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = LMafh_Update_Slave_AFH_If_Required &rArr; LM_Encode_LMP_PDU_Fully_Encoded &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Get_Device_Ref
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU_Fully_Encoded
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Enable_L2CAP_Traffic
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMch_Disable_L2CAP_Traffic
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCafh_set_AFH
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Activate_AFH
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Update_Master_AFH_Piconet
</UL>

<P><STRONG><a name="[353]"></a>_LMafh_Set_AFH_Instant</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lmp_afh.o(i._LMafh_Set_AFH_Instant))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _LMafh_Set_AFH_Instant
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Set_Uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Activate_AFH
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMafh_Update_Master_AFH_Piconet
</UL>

<P><STRONG><a name="[3bf]"></a>LMfltr_Get_Next_Free_Filter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lmp_con_filter.o(i.LMfltr_Get_Next_Free_Filter))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMfltr_LM_Set_Filter
</UL>

<P><STRONG><a name="[3bc]"></a>LMfltr_Inquiry_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lmp_con_filter.o(i.LMfltr_Inquiry_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMfltr_LM_Set_Filter
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMfltr_Initialise
</UL>

<P><STRONG><a name="[14]"></a>_LM_Encode_Extended_PDU</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lmp_encode_pdu.o(i._LM_Encode_Extended_PDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _LM_Encode_Extended_PDU &rArr; LMutils_Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
</UL>
<P><STRONG><a name="[13]"></a>_LM_Encode_Normal_PDU</STRONG> (Thumb, 612 bytes, Stack size 24 bytes, lmp_encode_pdu.o(i._LM_Encode_Normal_PDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _LM_Encode_Normal_PDU &rArr; LMutils_Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Set_Uint32
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Set_Uint16
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmp_encode_pdu.o(i.LM_Encode_LMP_PDU)
</UL>
<P><STRONG><a name="[3cf]"></a>_Send_UL_Read_Clock_Offset_Event</STRONG> (Thumb, 28 bytes, Stack size 64 bytes, lmp_link_control_protocol.o(i._Send_UL_Read_Clock_Offset_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _Send_UL_Read_Clock_Offset_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LM_Clock_Offset_Req
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LMP_Not_Accepted
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMlc_LMP_Clock_Offset_Res
</UL>

<P><STRONG><a name="[3ca]"></a>_Send_HC_Return_Link_Key_Event</STRONG> (Thumb, 26 bytes, Stack size 64 bytes, lmp_link_key_db.o(i._Send_HC_Return_Link_Key_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _Send_HC_Return_Link_Key_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMkeydb_LM_Read_Stored_Link_Key
</UL>

<P><STRONG><a name="[3ce]"></a>_Set_DB_Entry_Link_Key</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lmp_link_key_db.o(i._Set_DB_Entry_Link_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Set_DB_Entry_Link_Key
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMkeydb_Write_Link_Key
</UL>

<P><STRONG><a name="[3fb]"></a>LMqos_Max_Packet_Size</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, lmp_link_qos.o(i.LMqos_Max_Packet_Size))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Quality_of_Service_Req
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Quality_of_Service
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Update_Link_Flow_Spec
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Get_Communication_Interval
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Check_Link_QoS
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Check_Link_Flow_Specification
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Update_Link_QoS
</UL>

<P><STRONG><a name="[401]"></a>LMqos_Update_Link_QoS</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, lmp_link_qos.o(i.LMqos_Update_Link_QoS))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = LMqos_Update_Link_QoS &rArr; LMconfig_LM_Set_Device_State &rArr; LC_Inquiry_Scan_Cancel &rArr; USLCinqScan_Cancel &rArr; USLCchac_Procedure_Request &rArr; USLCchac_Procedure_Finish &rArr;  USLCinqScan_Cancel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Set_Device_State
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_Max_Packet_Size
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LM_Change_Validated_Packet_Type
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Accepted
</UL>

<P><STRONG><a name="[403]"></a>_Send_HC_Flow_Spec_Complete_Event</STRONG> (Thumb, 82 bytes, Stack size 72 bytes, lmp_link_qos.o(i._Send_HC_Flow_Spec_Complete_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _Send_HC_Flow_Spec_Complete_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Not_Accepted
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Accepted
</UL>

<P><STRONG><a name="[3ff]"></a>_Send_HC_Max_Slots_Change_Event</STRONG> (Thumb, 24 bytes, Stack size 64 bytes, lmp_link_qos.o(i._Send_HC_Max_Slots_Change_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _Send_HC_Max_Slots_Change_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Max_Slot
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Accepted
</UL>

<P><STRONG><a name="[404]"></a>_Send_HC_QoS_Setup_Complete_Event</STRONG> (Thumb, 34 bytes, Stack size 64 bytes, lmp_link_qos.o(i._Send_HC_QoS_Setup_Complete_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _Send_HC_QoS_Setup_Complete_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Quality_of_Service_Req
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Quality_of_Service
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Not_Accepted
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMqos_LMP_Accepted
</UL>

<P><STRONG><a name="[340]"></a>_Array_Copy</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lmp_sec_engine.o(i._Array_Copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Array_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Generate_Key_E22
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Generate_Key_E21
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Authenticate_E1
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Generate_Kc_Prime
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Safer_Plus_Encrypt
</UL>

<P><STRONG><a name="[33f]"></a>_Keyed_Hash</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, lmp_sec_engine.o(i._Keyed_Hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Safer_Plus_Encrypt
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Authenticate_E1
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Generate_Key_E3
</UL>

<P><STRONG><a name="[343]"></a>_Mod2_Multiply_Kc</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, lmp_sec_engine.o(i._Mod2_Multiply_Kc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _Mod2_Multiply_Kc
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Generate_Kc_Prime
</UL>

<P><STRONG><a name="[342]"></a>_Mod2_Reduce_Kc</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lmp_sec_engine.o(i._Mod2_Reduce_Kc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _Mod2_Reduce_Kc
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Generate_Kc_Prime
</UL>

<P><STRONG><a name="[345]"></a>_Safer_Plus_Encrypt</STRONG> (Thumb, 436 bytes, Stack size 352 bytes, lmp_sec_engine.o(i._Safer_Plus_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Array_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Generate_Key_E22
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Generate_Key_E21
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Keyed_Hash
</UL>

<P><STRONG><a name="[42c]"></a>_Complete_CombKey_Setup</STRONG> (Thumb, 70 bytes, Stack size 64 bytes, lmp_sec_peer.o(i._Complete_CombKey_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = _Complete_CombKey_Setup &rArr; LM_SecEng_Generate_Key_E21 &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Generate_Key_E21
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Array_Xor
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Comb_Key
</UL>

<P><STRONG><a name="[42f]"></a>_Generate_Encryption_Key</STRONG> (Thumb, 134 bytes, Stack size 80 bytes, lmp_sec_peer.o(i._Generate_Encryption_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = _Generate_Encryption_Key &rArr; LM_SecEng_Generate_Key_E3 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Get_Current_Key_Persistance
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Generate_Key_E3
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_SecEng_Generate_Kc_Prime
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Start_Encryption_Req
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Start_Encryption
</UL>

<P><STRONG><a name="[429]"></a>_Start_Encryption</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, lmp_sec_peer.o(i._Start_Encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = _Start_Encryption &rArr; _Generate_Encryption_Key &rArr; LM_SecEng_Generate_Key_E3 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMacl_Get_Current_Key_Persistance
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_128_Ex
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_PeerData_Tx_Stop_Callback
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Generate_Encryption_Key
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Resume_Encryption_Req
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Encryption_Key_Size_Req
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Accepted
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_Resume_Encryption
</UL>

<P><STRONG><a name="[430]"></a>_Update_Link_Key</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lmp_sec_peer.o(i._Update_Link_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _Update_Link_Key &rArr; LMsec_core_Array_Xor
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Array_Xor
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_peer_LMP_Unit_Key
</UL>

<P><STRONG><a name="[442]"></a>LMssp_Calculate_DHKEY_Check</STRONG> (Thumb, 346 bytes, Stack size 72 bytes, lmp_ssp.o(i.LMssp_Calculate_DHKEY_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 1260<LI>Call Chain = LMssp_Calculate_DHKEY_Check &rArr; F3 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F3
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Confirmation_Request_Reply
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_DHkey_Check
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_CallBack_DH_Key_Complete
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LMssp_Send_LMP_DH_Key_Check
</UL>

<P><STRONG><a name="[44a]"></a>LMssp_Send_LMP_Simple_Pairing_Confirm</STRONG> (Thumb, 58 bytes, Stack size 88 bytes, lmp_ssp.o(i.LMssp_Send_LMP_Simple_Pairing_Confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = LMssp_Send_LMP_Simple_Pairing_Confirm &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Passkey_Request_Reply
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Simple_Pairing_Number
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Simple_Pairing_Confirm
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Encapsulated_Payload
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Accepted
</UL>

<P><STRONG><a name="[44b]"></a>LMssp_Send_LMP_Simple_Pairing_Number</STRONG> (Thumb, 60 bytes, Stack size 80 bytes, lmp_ssp.o(i.LMssp_Send_LMP_Simple_Pairing_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = LMssp_Send_LMP_Simple_Pairing_Number &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_Remote_OOB_Data_Request_Reply
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Simple_Pairing_Number
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Simple_Pairing_Confirm
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Encapsulated_Payload
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Accepted
</UL>

<P><STRONG><a name="[444]"></a>_Compare_16byte_Arrays</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lmp_ssp.o(i._Compare_16byte_Arrays))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Compare_16byte_Arrays
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Confirmation_Request_Reply
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_Remote_OOB_Data_Request_Reply
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Simple_Pairing_Number
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_DHkey_Check
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_CallBack_DH_Key_Complete
</UL>

<P><STRONG><a name="[440]"></a>_LMspp_Send_LMP_Encapsulated_Header</STRONG> (Thumb, 50 bytes, Stack size 64 bytes, lmp_ssp.o(i._LMspp_Send_LMP_Encapsulated_Header))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _LMspp_Send_LMP_Encapsulated_Header &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Encapsulated_Payload
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMspp_LMP_IO_Capability_Response
</UL>

<P><STRONG><a name="[44c]"></a>_LMssp_Calculate_Link_Key</STRONG> (Thumb, 188 bytes, Stack size 80 bytes, lmp_ssp.o(i._LMssp_Calculate_Link_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 1172<LI>Call Chain = _LMssp_Calculate_Link_Key &rArr; F2 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F2
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_DHkey_Check
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Accepted
</UL>

<P><STRONG><a name="[44d]"></a>_LMssp_Mutual_Authentication</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lmp_ssp.o(i._LMssp_Mutual_Authentication))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = _LMssp_Mutual_Authentication &rArr; LMsec_core_Auth_Challenge &rArr; LM_SecEng_Authenticate_E1 &rArr; _Keyed_Hash &rArr; _Safer_Plus_Encrypt &rArr; _Array_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_core_Auth_Challenge
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_DHkey_Check
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Accepted
</UL>

<P><STRONG><a name="[443]"></a>_LMssp_Send_LMP_DH_Key_Check</STRONG> (Thumb, 80 bytes, Stack size 80 bytes, lmp_ssp.o(i._LMssp_Send_LMP_DH_Key_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 1340<LI>Call Chain = _LMssp_Send_LMP_DH_Key_Check &rArr; LMssp_Calculate_DHKEY_Check &rArr; F3 &rArr; HMAC &rArr; SHA_256
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_Calculate_DHKEY_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Confirmation_Request_Reply
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Simple_Pairing_Number
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_DHkey_Check
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_CallBack_DH_Key_Complete
</UL>

<P><STRONG><a name="[43e]"></a>_LMssp_Send_LMP_IO_Capability_Response</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lmp_ssp.o(i._LMssp_Send_LMP_IO_Capability_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = _LMssp_Send_LMP_IO_Capability_Response &rArr; LM_Encode_LMP_PDU_Fully_Encoded &rArr; LM_Encode_LMP_PDU &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Encode_LMP_PDU_Fully_Encoded
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_IO_Capability_Request_Reply
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMspp_LMP_IO_Capability_Request
</UL>

<P><STRONG><a name="[43f]"></a>_LMssp_Send_Simple_Pairing_Complete_Event</STRONG> (Thumb, 64 bytes, Stack size 72 bytes, lmp_ssp.o(i._LMssp_Send_Simple_Pairing_Complete_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = _LMssp_Send_Simple_Pairing_Complete_Event &rArr; LMsec_upper_Send_HCI_Event &rArr; LMtmr_Set_Timer &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Generate_Event &rArr; HCeg_Inquiry_Result_Event &rArr; BTq_Enqueue &rArr;  HCeg_Generate_Event (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMsec_upper_Send_HCI_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Passkey_Request_Negative_Reply
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Confirmation_Request_Reply
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_User_Confirmation_Request_Negative_Reply
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_Remote_OOB_Data_Request_Reply
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_Remote_OOB_Data_Request_Negative_Reply
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LM_IO_Capability_Request_Negative_Reply
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Simple_Pairing_Number
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Passkey_Entry_Failed
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_OOB_Failed
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Numeric_Comparison_Failure
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Not_Accepted
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Encapsulated_Payload
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Encapsulated_Header
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_DHkey_Check
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_LMP_Accepted
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMspp_LMP_IO_Capability_Response
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMspp_LMP_IO_Capability_Request
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_CallBack_DH_Key_Complete
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMssp_HCI_Timeout
</UL>

<P><STRONG><a name="[1f8]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1f7]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1f6]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1f9]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[e]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[1e5]"></a>_fp_digits</STRONG> (Thumb, 406 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status (via BLX)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via BLX)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via BLX)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e (via BLX)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[1f4]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1a4]"></a>_printf_fp_hex</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[1ee]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[1f0]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
