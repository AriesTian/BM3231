


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; MODULE NAME:    sys_fiq_irq.s
    3 00000000         ; PROJECT CODE:   pimiento
    4 00000000         ; DESCRIPTION:    Low-level ARM FIQ and IRQ Manipulation
                        Routines
    5 00000000         ;                  - enabling / disabling FIQ
    6 00000000         ;                  - enabling / disabling IRQ
    7 00000000         ;                  - setting FIQ stack (not at present, 
                       should this be done?)
    8 00000000         ;                  - setting IRQ stack
    9 00000000         ;
   10 00000000         ; MAINTAINER:     Ivan Griffin
   11 00000000         ; DATE:           7 September 1999
   12 00000000         ;
   13 00000000         ; SOURCE CONTROL: $Id: sys_fiq_irq.s,v 1.9 2004/07/07 14
                       :30:48 namarad Exp $
   14 00000000         ; LICENSE:
   15 00000000         ;     This source code is copyright (c) 2000-2004 Ceva I
                       nc.,
   16 00000000         ;     All rights reserved.
   17 00000000         ;
   18 00000000         ; REVISION HISTORY:
   19 00000000         ;    07 Sept 1999 -   IG       - Developed for ARM PID7T
                        board
   20 00000000         ;    16 Sept 1999 -   IG       - Updated for ARM 2.50
   21 00000000         ;    27 Sept 1999 -   IG       - Updated for SHARP LH777
                       90 AEB
   22 00000000         ;                 -   DA/JS    - Code to disable interru
                       pts
   23 00000000         ;    19 Jan 2000  -   IG       - Removed ANGEL Code,
   24 00000000         ;                                integrated with and rem
                       oved
   25 00000000         ;                                sys_irq_angel_veneer.s
   26 00000000         ;
   27 00000000         ; NOTES:
   28 00000000         ;    Currently are not setting a stack for FIQ - should 
                       not matter
   29 00000000         ;    since nothing is put on stack that isn't taken off 
                       by FIQ.
   30 00000000         ;    no chaining of FIQ interrupts 
   31 00000000         ;
   32 00000000         
   33 00000000                 EXPORT           SYSirq_IRQ_Enable_All
   34 00000000                 EXPORT           SYSirq_IRQ_Disable_All
   35 00000000                 EXPORT           SYSirq_IRQ_Stack_Setup
   36 00000000         
   37 00000000                 EXPORT           SYSirq_FIQ_Enable_All
   38 00000000                 EXPORT           SYSirq_FIQ_Disable_All
   39 00000000                 EXPORT           SYSirq_FIQ_Stack_Setup
   40 00000000         
   41 00000000                 EXPORT           SYSirq_SYS_Stack_Setup
   42 00000000                 EXPORT           SYSirq_IRQ_wrapper
   43 00000000         
   44 00000000         
   45 00000000                 AREA             irq,CODE,READONLY
   46 00000000         
   47 00000000                 IMPORT           SYSirq_IRQ_Tabasco_ISR
   48 00000000         
   49 00000000 00000011 



ARM Macro Assembler    Page 2 


                       MODE_FIQ
                               EQU              0x0011      ;
   50 00000000 00000012 
                       MODE_IRQ
                               EQU              0x0012      ;
   51 00000000 00000013 
                       MODE_SVC
                               EQU              0x0013      ;
   52 00000000 0000001F 
                       MODE_SYS
                               EQU              0x001F
   53 00000000         
   54 00000000         SYSirq_IRQ_Enable_All
   55 00000000 E92D0001        stmfd            sp!, {r0}
   56 00000004 E10F0000        mrs              r0, cpsr
   57 00000008 E3C00080        bic              r0, r0, #0x80
   58 0000000C E121F000        msr              cpsr_c, r0
   59 00000010 E8BD0001        ldmfd            sp!, {r0}
   60 00000014 E1A0F00E        mov              pc,lr
   61 00000018         
   62 00000018         SYSirq_IRQ_Disable_All
   63 00000018 E92D0001        stmfd            sp!, {r0}
   64 0000001C E10F0000        mrs              r0, cpsr
   65 00000020 E3800080        orr              r0, r0, #0x80
   66 00000024 E121F000        msr              cpsr_c, r0
   67 00000028 E8BD0001        ldmfd            sp!, {r0}
   68 0000002C E1A0F00E        mov              pc,lr
   69 00000030         
   70 00000030         SYSirq_FIQ_Enable_All
   71 00000030 E92D0001        stmfd            sp!, {r0}
   72 00000034 E10F0000        mrs              r0, cpsr
   73 00000038 E3C00040        bic              r0, r0, #0x40
   74 0000003C E121F000        msr              cpsr_c, r0
   75 00000040 E8BD0001        ldmfd            sp!, {r0}
   76 00000044 E1A0F00E        mov              pc,lr
   77 00000048         
   78 00000048         
   79 00000048         SYSirq_FIQ_Disable_All
   80 00000048 E92D0001        stmfd            sp!, {r0}
   81 0000004C E10F0000        mrs              r0, cpsr
   82 00000050 E3800040        orr              r0, r0, #0x40
   83 00000054 E121F000        msr              cpsr_c, r0
   84 00000058 E8BD0001        ldmfd            sp!, {r0}
   85 0000005C E1A0F00E        mov              pc,lr
   86 00000060         
   87 00000060 00404BFC 
                       FIQ_STACK_ADDR
                               EQU              0x00405FFC-5120 ; NEEDS TO BE D
                                                            ETERMINED!!
   88 00000060 00403BFC 
                       IRQ_STACK_ADDR
                               EQU              FIQ_STACK_ADDR-4096 ;
   89 00000060 004027FC 
                       SYS_STACK_ADDR
                               EQU              IRQ_STACK_ADDR-5120
   90 00000060         
   91 00000060         SYSirq_IRQ_Stack_Setup
   92 00000060         
   93 00000060         ; no longer needed - an ELF image starts in SVC mode by 



ARM Macro Assembler    Page 3 


                       default
   94 00000060         ;                ldr     r0, =0x17
   95 00000060         ;                swi     0x123456                ; this 
                       will set us into SVC Mode
   96 00000060         
   97 00000060 E10F1000        mrs              r1, cpsr    ; read-modify-write
                                                             to get
   98 00000064         ; to IRQ mode
   99 00000064 E3C1101F        bic              r1, r1, #0x1f ; clear current m
                                                            ode
  100 00000068 E3811012        orr              r1, r1, #MODE_IRQ 
                                                            ; set IRQ mode
  101 0000006C E121F001        msr              cpsr_c, r1  ; now we should be 
                                                            in IRQ mode
  102 00000070 E59FD08C        ldr              r13, =IRQ_STACK_ADDR ; set up a
                                                             reasonable IRQ
  103 00000074         ; stack pointer - 32 bit
  104 00000074         ; aligned 
  105 00000074         
  106 00000074 E10F1000        mrs              r1, cpsr    ; read-modify-write
                                                             to get
  107 00000078         ; to SVC mode
  108 00000078 E3C1101F        bic              r1, r1, #0x1f ; clear current m
                                                            ode
  109 0000007C E3811013        orr              r1, r1, #MODE_SVC 
                                                            ; set SVC mode
  110 00000080 E121F001        msr              cpsr_c, r1  ; now we should be 
                                                            in SVC mode
  111 00000084 E1A0F00E        mov              pc, lr
  112 00000088         
  113 00000088         
  114 00000088         
  115 00000088         SYSirq_FIQ_Stack_Setup
  116 00000088         
  117 00000088         ; no longer needed - an ELF image starts in SVC mode by 
                       default
  118 00000088         ;                ldr     r0, =0x17
  119 00000088         ;                swi     0x123456                ; this 
                       will set us into SVC Mode
  120 00000088         
  121 00000088 E10F1000        mrs              r1, cpsr    ; read-modify-write
                                                             to get
  122 0000008C         ; to IRQ mode
  123 0000008C E3C1101F        bic              r1, r1, #0x1f ; clear current m
                                                            ode
  124 00000090 E3811011        orr              r1, r1, #MODE_FIQ 
                                                            ; set IRQ mode
  125 00000094 E121F001        msr              cpsr_c, r1  ; now we should be 
                                                            in IRQ mode
  126 00000098 E59FD068        ldr              r13, =FIQ_STACK_ADDR ; set up a
                                                             reasonable IRQ
  127 0000009C         ; stack pointer - 32 bit
  128 0000009C         ; aligned 
  129 0000009C         
  130 0000009C E10F1000        mrs              r1, cpsr    ; read-modify-write
                                                             to get
  131 000000A0         ; to SVC mode
  132 000000A0 E3C1101F        bic              r1, r1, #0x1f ; clear current m
                                                            ode



ARM Macro Assembler    Page 4 


  133 000000A4 E3811013        orr              r1, r1, #MODE_SVC 
                                                            ; set SVC mode
  134 000000A8 E121F001        msr              cpsr_c, r1  ; now we should be 
                                                            in SVC mode
  135 000000AC E1A0F00E        mov              pc, lr
  136 000000B0         
  137 000000B0         
  138 000000B0         SYSirq_SYS_Stack_Setup
  139 000000B0         
  140 000000B0         ; no longer needed - an ELF image starts in SVC mode by 
                       default
  141 000000B0         ;                ldr     r0, =0x17
  142 000000B0         ;                swi     0x123456                ; this 
                       will set us into SVC Mode
  143 000000B0         
  144 000000B0 E10F1000        mrs              r1, cpsr    ; read-modify-write
                                                             to get
  145 000000B4         ; to SYS mode
  146 000000B4 E3C1101F        bic              r1, r1, #0x1f ; clear current m
                                                            ode
  147 000000B8 E381101F        orr              r1, r1, #MODE_SYS 
                                                            ; set SYS mode
  148 000000BC E121F001        msr              cpsr_c, r1  ; now we should be 
                                                            in SYS mode
  149 000000C0 E59FD044        ldr              r13, =SYS_STACK_ADDR ; set up a
                                                             reasonable SYS
  150 000000C4         ; stack pointer - 32 bit
  151 000000C4         ; aligned 
  152 000000C4         
  153 000000C4 E10F1000        mrs              r1, cpsr    ; read-modify-write
                                                             to get
  154 000000C8         ; to SVC mode
  155 000000C8 E3C1101F        bic              r1, r1, #0x1f ; clear current m
                                                            ode
  156 000000CC E3811013        orr              r1, r1, #MODE_SVC 
                                                            ; set SVC mode
  157 000000D0 E121F001        msr              cpsr_c, r1  ; now we should be 
                                                            in SVC mode
  158 000000D4 E1A0F00E        mov              pc, lr
  159 000000D8         
  160 000000D8         
  161 000000D8         SYSirq_IRQ_wrapper
  162 000000D8 E24EE004        sub              lr, lr, #4  ; construct the ret
                                                            urn address
  163 000000DC E92D4000        STMFD            sp!, {lr}   ; and push the adju
                                                            sted lr_IRQ
  164 000000E0 E14FE000        MRS              r14, SPSR   ; copy spsr_IRQ to 
                                                            r14
  165 000000E4 E92D5000        STMFD            sp!, {r12, r14} ; save work reg
                                                            s and spsr_IRQ
  166 000000E8         
  167 000000E8         ; Add instructions to clear the interrupt here
  168 000000E8         ; then re-enable interrupts.
  169 000000E8         
  170 000000E8 E321F09F        MSR              CPSR_c, #0x9F ; switch to SYS m
                                                            ode, FIQ enabled an
                                                            d IRQ
  171 000000EC         ; disabled. USR mode registers
  172 000000EC         ; are now current.



ARM Macro Assembler    Page 5 


  173 000000EC E92D400F        STMFD            sp!, {r0-r3, lr} ; save lr_USR 
                                                            and non-callee 
  174 000000F0         ; saved registers
  175 000000F0         ;BL      SYSirq_IRQ_Tabasco_ISR     ; branch to C IRQ ha
                       ndler.
  176 000000F0 E8BD400F        LDMFD            sp!, {r0-r3, lr} 
                                                            ; restore registers
                                                            
  177 000000F4 E321F092        MSR              CPSR_c, #0x92 ; switch to IRQ m
                                                            ode and disable
  178 000000F8         ; IRQs. FIQ is still enabled.
  179 000000F8         
  180 000000F8 E8BD5000        LDMFD            sp!, {r12, r14} ; restore work 
                                                            regs and spsr_IRQ
  181 000000FC E169F00E        MSR              SPSR_cf, r14
  182 00000100 E8FD8000        LDMFD            sp!, {pc}^  ; return from IRQ.
  183 00000104         
  184 00000104         
  185 00000104                 END
              00403BFC 
              00404BFC 
              004027FC 
Command Line: --debug --diag_suppress=9931 --cpu=ARM9E --apcs=interwork --depen
d=.\obj\sys_fiq_irq.d -o.\obj\sys_fiq_irq.o -I.\src\Core\include -I.\src\BKTest
App\include -I.\src\API\include -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSI
S\Include --predefine="__UVISION_VERSION SETA 514" --list=.\obj\sys_fiq_irq.lst
 src\hal\prth_chimera\sys\sys_fiq_irq.s
